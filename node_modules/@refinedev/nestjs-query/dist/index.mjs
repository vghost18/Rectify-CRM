import c from"camelcase";import*as g from"gql-query-builder";import{GraphQLClient as A}from"graphql-request";import C from"graphql-tag";import{singular as q}from"pluralize";import b from"camelcase";import*as O from"gql-query-builder";import S from"lodash/set";import{singular as $}from"pluralize";import{visit as F}from"graphql";var D=n=>{var r,i;return(i=(r=n==null?void 0:n.selectionSet)==null?void 0:r.selections)==null?void 0:i.find(e=>e.kind==="Field"&&e.name.value==="nodes")},w=n=>{let r=[],i=!0,e=0,t=!1;return F(n,{Field:{enter(s){if(i){i=!1;let o=D(s)??s;if(typeof o.selectionSet>"u")throw new Error("Operation must have a selection set");return o.selectionSet}r.push(`${e>0?"  ".repeat(t?e:e-1):""}${s.name.value}${s.selectionSet?" {":""}`),s.selectionSet&&(e++,t=!0)},leave(s){s.selectionSet&&(e--,r.push(`${"  ".repeat(e)}}`),t=!1)}}}),r.join(`
`).trim()},L=n=>{let r=!1;return F(n,{OperationDefinition:{enter(i){i.operation==="mutation"&&(r=!0)}}}),r};var M=(n,{callback:r,params:i,meta:e},t)=>{let s={created:E,updated:I,deleted:P},{resource:u,filters:o,subscriptionType:a,id:l,ids:p}=i??{},d=s[t],{operation:f,query:y,variables:h,operationName:x}=d({ids:p,id:l,resource:u,filters:o,meta:e,subscriptionType:a}),N=_=>{r(_.data[f])};return n.subscribe({query:y,variables:h,operationName:x},{next:N,error:console.error,complete:()=>null})},V={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},k=(n,r)=>{if(n==="contains")return{iLike:`%${r}%`};if(n==="ncontains")return{notILike:`%${r}%`};if(n==="containss")return{like:`%${r}%`};if(n==="ncontainss")return{notLike:`%${r}%`};if(n==="startswith")return{iLike:`${r}%`};if(n==="nstartswith")return{notILike:`${r}%`};if(n==="startswiths")return{like:`${r}%`};if(n==="nstartswiths")return{notLike:`${r}%`};if(n==="endswith")return{iLike:`%${r}`};if(n==="nendswith")return{notILike:`%${r}`};if(n==="endswiths")return{like:`%${r}`};if(n==="nendswiths")return{notLike:`%${r}`};if(n==="null")return{is:null};if(n==="nnull")return{isNot:null};if(n==="between"){if(!Array.isArray(r))throw new Error("Between operator requires an array");return r.length!==2?{}:{between:{lower:r[0],upper:r[1]}}}if(n==="nbetween"){if(!Array.isArray(r))throw new Error("NBetween operator requires an array");return r.length!==2?{}:{notBetween:{lower:r[0],upper:r[1]}}}return{[V[n]]:r}},v=n=>{let r={};return n.filter(i=>Array.isArray(i.value)&&i.value.length===0?!1:typeof i.value=="number"?Number.isFinite(i.value):i.value!=null).map(i=>i.operator==="and"||i.operator==="or"?S(r,i.operator,[v(i.value)]):"field"in i?S(r,i.field,k(i.operator,i.value)):{}),r},R=n=>n.map(r=>({field:r.field,direction:r.order.toUpperCase()})),B=n=>{if(n.mode==="off")return{limit:2147483647};if(n.mode==="server"&&!(!n.current||!n.pageSize))return{limit:n.pageSize,offset:(n.current-1)*n.pageSize}},E=({resource:n,filters:r,meta:i})=>{let e=(i==null?void 0:i.gqlQuery)??(i==null?void 0:i.gqlMutation);if(e){let a=b($(n),{pascalCase:!0}),l=`Created${a}`,p=`created${a}`,d=`
            subscription ${l}($input: Create${a}SubscriptionFilterInput) {
                ${p}(input: $input) {
                    ${w(e)}
                }
            }
        `,f={};return r&&(f.input={filter:v(r.filter(y=>!y.field.includes(".")))}),{query:d,variables:f,operation:p,operationName:l}}let t=`created${b($(n),{pascalCase:!0})}`,s={};r&&(s.input={type:b(`create_${$(n)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(r.filter(a=>!a.field.includes(".")))}});let{query:u,variables:o}=O.subscription({operation:t,fields:i.fields,variables:s});return{query:u,variables:o,operation:t}},I=({id:n,resource:r,filters:i,meta:e})=>{let t=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(t){let l=b($(r),{pascalCase:!0}),p=`Updated${l}`,d=`updatedOne${l}`,f=`
            subscription ${p}($input: UpdateOne${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                   ${w(t)}
                }
            }
        `,y={};return i&&(y.input={filter:v(i.filter(h=>!h.field.includes(".")))}),n&&(y.input={filter:{id:{eq:n}}}),{query:f,variables:y,operation:d,operationName:p}}let s=`updatedOne${b($(r),{pascalCase:!0})}`,u={};i&&(u.input={type:b(`update_one_${$(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(i.filter(l=>!l.field.includes(".")))}}),n&&(u.input={type:b(`update_one_${$(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:{id:{eq:n}}}});let{query:o,variables:a}=O.subscription({operation:s,fields:e.fields,variables:u});return{query:o,variables:a,operation:s}},P=({resource:n,filters:r,meta:i})=>{if(i!=null&&i.gqlQuery){let o=b($(n),{pascalCase:!0}),a=`Deleted${o}`,l=`deletedOne${o}`,p=`
            subscription ${a}($input: DeleteOne${o}SubscriptionFilterInput) {
                ${l}(input: $input) {
                    id
                }
            }
        `,d={};return r&&(d.input={filter:v(r.filter(f=>!f.field.includes(".")))}),{query:p,variables:d,operation:l,operationName:a}}let e=`deletedOne${b($(n),{pascalCase:!0})}`,t={};r&&(t.input={type:b(`delete_one_${$(n)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(r.filter(o=>!o.field.includes(".")))}});let{query:s,variables:u}=O.subscription({operation:e,fields:i.fields.filter(o=>typeof o!="object"),variables:t});return{query:s,variables:u,operation:e}};var T=n=>({getList:async({resource:r,pagination:i,sorters:e,filters:t,meta:s})=>{let u=c(r),o=B(i||{}),a={},l,p;if(s!=null&&s.gqlQuery)l=s==null?void 0:s.gqlQuery,p={filter:t?v(t):{},sorting:e?R(e):[],paging:o};else{t&&(a.filter={type:c(`${q(r)}Filter`,{pascalCase:!0}),required:!0,value:v(t)}),e&&(a.sorting={type:c(`${q(r)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:R(e)}),o&&(a.paging={type:"OffsetPaging",required:!0,value:o});let f=g.query({operation:u,fields:[{nodes:s==null?void 0:s.fields},"totalCount"],variables:a});l=f.query,p=f.variables}let d=await n.request(l,p);return{data:d[u].nodes,total:d[u].totalCount}},getMany:async({resource:r,ids:i,meta:e})=>{let t=c(r);if(e!=null&&e.gqlQuery)return{data:(await n.request(e.gqlQuery,{filter:{id:{in:i}}}))[t].nodes};let{query:s,variables:u}=g.query({operation:t,fields:[{nodes:(e==null?void 0:e.fields)||["id"]}],variables:{filter:{type:c(`${q(r)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:i}}}}});return{data:(await n.request(s,u))[t].nodes}},create:async({resource:r,variables:i,meta:e})=>{let t=`createOne${c(q(r),{pascalCase:!0})}`,s=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(s)return{data:(await n.request(s,{input:{[c(q(r))]:i}}))[t]};let{query:u,variables:o}=g.mutation({operation:t,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateOne${c(q(r),{pascalCase:!0})}Input`,required:!0,value:{[c(q(r))]:i}}}});return{data:(await n.request(u,o))[t]}},createMany:async({resource:r,variables:i,meta:e})=>{let s=`createMany${c(r,{pascalCase:!0})}`,u=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(u)return{data:(await n.request(u,{input:{[c(r)]:i}}))[s]};let{query:o,variables:a}=g.mutation({operation:s,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateMany${c(r,{pascalCase:!0})}Input`,required:!0,value:{[c(r)]:i}}}});return{data:(await n.request(o,a))[s]}},update:async({resource:r,id:i,variables:e,meta:t})=>{let s=`updateOne${c(q(r),{pascalCase:!0})}`,u=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(u)return{data:(await n.request(u,{input:{id:i,update:e}}))[s]};let{query:o,variables:a}=g.mutation({operation:s,fields:(t==null?void 0:t.fields)||["id"],variables:{input:{type:`UpdateOne${c(q(r),{pascalCase:!0})}Input`,required:!0,value:{id:i,update:e}}}});return{data:(await n.request(o,a))[s]}},updateMany:async({resource:r,ids:i,variables:e,meta:t})=>{let s=c(r,{pascalCase:!0}),u=`updateMany${s}`,o=C`
                mutation UpdateMany${s}($input: UpdateMany${s}Input!) {
                    ${u}(input: $input) {
                        updatedCount
                    }
                }
            `;await n.request(o,{input:{filter:{id:{in:i}},update:e}});let a=c(r),l,p;if(t!=null&&t.fields){let f=g.query({operation:a,fields:[{nodes:(t==null?void 0:t.fields)||["id"]}],variables:{filter:{type:c(`${q(r)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:i}}}}});l=f.query,p=f.variables}else l=C`
                    query GetMany${s}($filter: ${q(s)}Filter!) {
                        ${a}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `,p={filter:{id:{in:i}}};return{data:(await n.request(l,p))[a].nodes}},getOne:async({resource:r,id:i,meta:e})=>{let t=c(q(r)),s=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(s){let l=s,p={id:i};if(L(s)){let f=w(s);l=C`
                        query Get${c(q(r),{pascalCase:!0})}($id: ID!) {
                            ${t}(id: $id) {
                            ${f}
                            }
                        }
                    `}return{data:(await n.request(l,p))[t]}}let{query:u,variables:o}=g.query({operation:t,fields:(e==null?void 0:e.fields)||["id"],variables:{id:{type:"ID",required:!0,value:i}}});return{data:(await n.request(u,o))[t]}},deleteOne:async({resource:r,id:i,meta:e})=>{let t=c(q(r),{pascalCase:!0}),s=`deleteOne${t}`;if(e!=null&&e.gqlMutation)return{data:(await n.request(e.gqlMutation,{input:{id:i}}))[s]};let u=C`
                    mutation DeleteOne${t}($input: DeleteOne${t}Input!) {
                        ${s}(input: $input) {
                            id
                        }
                    }
                `;return{data:(await n.request(u,{input:{id:i}}))[s]}},deleteMany:async({resource:r,ids:i})=>{let e=c(r,{pascalCase:!0}),t=`deleteMany${e}`,s=C`
                mutation DeleteMany${e}($input: DeleteMany${e}Input!) {
                    ${t}(input: $input) {
                        deletedCount
                    }
                }
            `,u={input:{filter:{id:{in:i}}}};return await n.request(s,u),{data:[]}},getApiUrl:()=>n.url,custom:async({url:r,method:i,headers:e,meta:t})=>{let s=["get","post"],u=r||n.url;if(!s.some(p=>p===i))throw Error(`GraphQL does not support ${i} method.`);let o=i,a=new A(u,{...n.requestConfig,method:o,headers:{...n.requestConfig.headers,...e}}),l=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(l)return{data:await a.request({document:l,variables:t==null?void 0:t.variables})};if(t!=null&&t.rawQuery)return{data:await a.request({document:t.rawQuery,variables:t.variables})};if(t){if(t.operation){let p,d;if(i==="get"){let y=g.query({operation:t.operation,fields:t.fields,variables:t.variables});p=y.query,d=y.variables}else{let y=g.mutation({operation:t.operation,fields:t.fields,variables:t.variables});p=y.query,d=y.variables}return{data:(await a.request({document:p,variables:d}))[t.operation]}}throw Error("GraphQL operation name required.")}throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),Q=T;var ne=n=>{let r=(i,e,t,s,u,o,a)=>{let l=M(i,{callback:e,params:t,meta:s},u);a.push(l)};return{subscribe({callback:i,params:e,meta:t}){let{resource:s,subscriptionType:u}=e??{};if(!t||!u||!s)throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");let o=[];return(e==null?void 0:e.subscriptionType)==="useList"&&["created","updated","deleted"].forEach(l=>r(n,i,e,t,l,s,o)),(e==null?void 0:e.subscriptionType)==="useOne"&&r(n,i,e,t,"updated",s,o),()=>{o.forEach(l=>l())}},unsubscribe(i){i()}}};import*as de from"gql-query-builder";import{batchRequests as qe,gql as ye,GraphQLClient as ge,rawRequest as be,request as $e,resolveRequestDocument as ve}from"graphql-request";import*as we from"graphql-ws";var ue=Q;export{ge as GraphQLClient,qe as batchRequests,ue as default,ye as gql,we as graphqlWS,ne as liveProvider,de as qqlQueryBuilder,be as rawRequest,$e as request,ve as resolveRequestDocument};
//# sourceMappingURL=index.mjs.map