var De=Object.create;var A=Object.defineProperty;var Ce=Object.getOwnPropertyDescriptor;var je=Object.getOwnPropertyNames;var Ne=Object.getPrototypeOf,Ve=Object.prototype.hasOwnProperty;var Ue=(e,t)=>{for(var r in t)A(e,r,{get:t[r],enumerable:!0})},C=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of je(t))!Ve.call(e,s)&&s!==r&&A(e,s,{get:()=>t[s],enumerable:!(o=Ce(t,s))||o.enumerable});return e};var p=(e,t,r)=>(r=e!=null?De(Ne(e)):{},C(t||!e||!e.__esModule?A(r,"default",{value:e,enumerable:!0}):r,e)),Fe=e=>C(A({},"__esModule",{value:!0}),e);var Qe={};Ue(Qe,{server:()=>Ye});module.exports=Fe(Qe);var ke=p(require("express")),a=require("@refinedev/devtools-shared");var j=p(require("express")),k=p(require("path")),N=e=>{e.use(j.default.static(k.default.join(__dirname,"client"))),e.use((t,r,o)=>{if(t.path.startsWith("/api")||t.path.startsWith("/open-in-editor"))return o();r.status(200).sendFile(k.default.join(`${__dirname}/client/index.html`))})};var G=p(require("ws"));var V=p(require("dotenv")),U={};V.default.config({processEnv:U});var $e=process.env.REFINE_DEVTOOLS_PORT||U.REFINE_DEVTOOLS_PORT,He=5001,_=Number($e)||He,x="https://auth.refine.dev",F="https://cloud2.refine.dev",$="/api/login",T="/api/login-callback",H="/after-login",M="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";var R=require("chalk"),q=(e,t)=>{let r=new G.default.Server({server:e}).on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?console.error(`
${R.cyanBright.bold("\u2717 ")}${(0,R.bold)("Refine Devtools server")} (websocket) failed to start. Port ${_} is already in use.
`):console.error(`
${R.cyanBright.bold("\u2717 ")}${(0,R.bold)("error from refine devtools")}`,o),r.close(()=>{}),t()});return r.on("connection",o=>{o.on("close",()=>{o.terminate()})}),process.on("SIGTERM",()=>{r.close(()=>{})}),r};var rt=require("lodash/debounce"),ot=require("@refinedev/devtools-shared"),st=require("ws"),W=()=>0;var P=require("chalk"),J=p(require("http")),B=(e,t)=>{let r=J.default.createServer(e);return r.on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?(console.error(`
${P.cyanBright.bold("\u2717 ")}${(0,P.bold)("Refine Devtools server")} (http) failed to start. Port ${_} is already in use.
`),console.info(`${P.cyanBright.bold("\u2139 ")}You can change the port by setting the ${(0,P.bold)("REFINE_DEVTOOLS_PORT")} environment variable.`)):console.error(`
${P.cyanBright.bold("\u2717 ")}${(0,P.bold)("error from Refine Devtools")}`,o),r.close(()=>{}),t()}).on("listening",()=>{console.log(`
${P.cyanBright.bold("\u2713 ")}${(0,P.bold)("Refine Devtools")} is running at port ${P.cyanBright.bold(_)}
`)}),process.on("SIGTERM",()=>{r.close(()=>{})}),r.listen(_,void 0,void 0,()=>{}),r};var Me={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},K=()=>({...Me});var ye=require("express"),Ee=p(require("lodash/uniq"));var Y=p(require("node-fetch")),Q=p(require("gray-matter")),I=require("marked"),O=p(require("sanitize-html"));var Ge=e=>e.split("---section").slice(1).map(r=>`---section${r}`),qe=e=>{let t=new I.marked.Renderer;t.link=function(...o){return I.marked.Renderer.prototype.link.apply(this,o).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=(0,I.marked)(e,{renderer:t});return(0,O.default)(r,{allowedTags:O.default.defaults.allowedTags.concat(["img"]),allowedAttributes:{...O.default.defaults.allowedAttributes,img:["src"]}})},We=e=>{let t=(0,Q.default)(e.replace("---section","---"));return{...t.data,content:qe(t.content)}},Je=async()=>{try{return(await(0,Y.default)(M)).text()}catch{return""}},z=async()=>{try{let e=await Je();return Ge(e).map(We)}catch{return[]}};var te=p(require("fs"));var X=p(require("path")),Z=p(require("globby")),ee=async e=>{try{let t=await(0,Z.default)(`node_modules/${e}/package.json`,{onlyFiles:!0}),r=null;try{let o=require.resolve(X.default.join(e,"package.json"));o&&(r=o)}catch{}return[...t,...r?[r]:[]][0]??null}catch{return null}};var re=async e=>{try{let t=await ee(e);if(!t)return null;let r=JSON.parse(te.default.readFileSync(t,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};var ne=p(require("path")),oe=require("fs-extra"),L=async(e=process.cwd())=>{let t=await(0,oe.readJSON)(ne.default.join(e,"package.json"),{encoding:"utf-8"});return Object.keys(t.dependencies).filter(o=>o.startsWith("@refinedev/"))};var ie=e=>e.replace("@refinedev/","https://c.refine.dev/");var ae=e=>"https://refine.dev/docs/api-reference/general-concepts/";var se=async e=>{try{let t=await L(e);return await Promise.all(t.map(async o=>{let s=await re(o);return{name:o,currentVersion:s==null?void 0:s.version,description:s==null?void 0:s.description,changelog:ie(o),documentation:ae(o)}}))}catch{return[]}};var m=p(require("dedent"));var Be=[{name:"@refinedev/ably",description:"Ably integration for Refine",install:"npm install @refinedev/ably",usage:(0,m.default)(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for Refine",install:"npm install @refinedev/airtable",usage:(0,m.default)(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for Refine",install:"npm install @refinedev/antd antd",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for Refine",install:"npm install @refinedev/appwrite",usage:(0,m.default)(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for Refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion @tabler/icons-react",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for Refine",install:"npm install @refinedev/graphql",usage:(0,m.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for Refine",install:"npm install @refinedev/hasura",usage:(0,m.default)(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with Refine",install:"npm install @refinedev/inferencer",usage:(0,m.default)(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for Refine",install:"npm install @refinedev/kbar",usage:(0,m.default)(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for Refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons-react",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for Refine",install:"npm install @refinedev/medusa",usage:(0,m.default)(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for Refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:(0,m.default)(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for Refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:(0,m.default)(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for Refine",install:"npm install @refinedev/nestjsx-crud",usage:(0,m.default)(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for Refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:(0,m.default)(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for Refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:(0,m.default)(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with Refine",install:"npm install @refinedev/simple-rest",usage:(0,m.default)(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with Refine",install:"npm install @refinedev/supabase",usage:(0,m.default)(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of Refine",install:"npm install @refinedev/strapi axios",usage:(0,m.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of Refine",install:"npm install @refinedev/strapi-v4 axios",usage:(0,m.default)(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],ce=async e=>{let t=await L(e);return Be.filter(r=>!t.includes(r.name))};var le=require("package-manager-detector"),de=p(require("execa")),pe=async(e,t=process.cwd())=>{try{let r=await(0,le.detect)({cwd:t}),[o]=((r==null?void 0:r.agent)||"npm").split("@"),{failed:s}=await(0,de.default)(o,["install",...e.map(f=>`${f}@latest`)]);return!s}catch{return!1}};var me=p(require("execa")),fe=async e=>{try{let{stdout:t}=await(0,me.default)("npm",["view",e,"name","version","--json"]);return JSON.parse(t)}catch{return{name:e}}};var ue=require("fs-extra"),ve=p(require("path")),S=async(e=process.cwd())=>{var t;try{let r=await(0,ue.readJSON)(ve.default.join(e,"package.json"),{encoding:"utf-8"}),o=(t=r==null?void 0:r.refine)==null?void 0:t.projectId;return o||!1}catch{return null}};var ge=p(require("execa")),Pe=async(e,t=process.cwd())=>{try{return ge.default.sync("npm",["pkg","set",`refine.projectId=${e}`],{cwd:t}),!0}catch{return null}};var he=p(require("execa")),w=p(require("path")),_e=async(e,t=process.cwd())=>{try{let r=require.resolve(".bin/jscodeshift"),o=he.default.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${w.default.resolve(w.default.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${e}`],{cwd:t,timeout:1e3*10});o.stderr&&console.error(o.stderr)}catch(r){console.error(r)}};var Re=async(e,t=process.cwd())=>{try{return await Promise.all([Pe(e,t),_e(e,t)]),!0}catch{return!1}};var Ae=(e,t)=>{e.use("/api",(0,ye.json)()),e.get("/api/connected-app",(c,n)=>{n.json({url:t.connectedApp})}),e.get("/api/activities",(c,n)=>{let{offset:i=0,limit:d=t.activities.length}=c.query;n.setHeader("x-total-count",t.activities.length),n.json({data:t.activities.slice(Number(i),Number(d))})}),e.get("/api/activities/reset",(c,n)=>{t.activities=[],n.json({success:!0})}),e.get("/api/unique-trace-items",(c,n)=>{n.header("Access-Control-Allow-Origin","*"),n.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let i=t.activities.flatMap(u=>{var l;return((l=u.trace)==null?void 0:l.map(v=>v.function).filter(Boolean))??[]}),d=(0,Ee.default)(i);n.setHeader("x-total-count",d.length),n.json({data:d})});let r=null;e.get("/api/installed-packages",async(c,n)=>{let{force:i}=c.query??{};(!r||i)&&(r=await se()),n.header("x-total-count",`${r.length}`),n.json({data:r})});let o=null;e.get("/api/available-packages",async(c,n)=>{o||(o=await ce()),n.header("x-total-count",`${o.length}`),n.json({data:o})});let s=new Map;e.get("/api/packages/:packageName/latest",async(c,n)=>{let{packageName:i}=c.params??{};if(!i){n.status(400).json({error:"Package name is required"});return}if(!s.has(i)){let d=await fe(i);s.set(i,d)}return n.json({data:s.get(i)})}),e.post("/api/packages/install",async(c,n)=>{let{packages:i}=c.body??{};if((i==null?void 0:i.length)===0){n.status(400).json({error:"Package name is required"});return}await pe(i)?(r=null,o=null,n.status(200).json({success:!0})):n.status(400).json({success:!1,error:"Failed to update package"})});let f=null;e.get("/api/feed",async(c,n)=>{f||(f=await z()),n.header("x-total-count",`${f.length}`),n.json({data:f})}),e.get("/api/project-id/status",async(c,n)=>{let i={OK:0,NOT_FOUND:1,ERROR:2},d=await S();if(d){n.status(200).json({projectId:d,status:i.OK});return}if(d===!1){n.status(200).json({projectId:null,status:i.NOT_FOUND});return}n.status(200).json({projectId:null,status:i.ERROR})}),e.post("/api/project-id/update",async(c,n)=>{let{projectId:i}=c.body??{};if(!i){n.status(400).json({error:"Project ID is required"});return}if(await Re(i)){n.status(200).json({success:!0});return}n.status(500).json({success:!1,error:"Failed to update project ID"})})};var Ie=p(require("path")),b=require("fs-extra"),y=require("http-proxy-middleware");var Oe=Ie.default.join(__dirname,"..",".persist.json"),Te=async(e,t)=>{try{await(0,b.writeJSON)(Oe,{token:e,jwt:t})}catch{}},Ke=async()=>{try{return await(0,b.readJSON)(Oe)}catch{}return{}},Le=async e=>{let{token:t,jwt:r}=await Ke(),o=(0,y.createProxyMiddleware)({target:`${x}/api/.auth`,secure:!1,changeOrigin:!0,logger:void 0,on:{proxyReq:y.fixRequestBody,proxyRes:(l,v)=>{var h;(h=v.url)!=null&&h.includes("self-service/logout/api")&&(t=void 0,r=void 0,Te())}}}),s=(0,y.createProxyMiddleware)({target:`${F}/.refine`,secure:!1,changeOrigin:!0,logger:void 0,on:{proxyReq:y.fixRequestBody}}),f=null,c=async(l,v,h)=>{f||(f=await S()),f&&(l.headers["x-project-id"]=f),h()},n=async(l,v,h)=>{var g;t&&(l.headers["X-Session-Token"]=t),(g=l.url)!=null&&g.includes("self-service/logout/api")&&(l.body={session_token:t},l.headers["Content-Length"]=Buffer.byteLength(JSON.stringify(l.body)).toString()),h()},i=async(l,v,h)=>{r&&(l.headers.Authorization=`Bearer ${r}`,delete l.headers.cookie),h()},d=async(l,v,h)=>{let g=l.query;g.token&&g.jwt&&(t=g.token,r=g.jwt,await Te(g.token,g.jwt));let E=new URLSearchParams;g.error&&E.set("error",g.error),g.code&&E.set("code",g.code),v.redirect(`${H}?${E.toString()}`)},u=async(l,v,h)=>{let g=l.query,E=l.secure?"https":"http",D=l.headers.host;if(!D){v.redirect(`${T}?error=Missing%20Host`);return}let xe=`${E}://${D}${T}`,we=new URLSearchParams({provider:g.provider,returnUrl:encodeURIComponent(xe)});v.redirect(`${x}/login?${we.toString()}`)};e.use($,u),e.use(T,d),e.use("/api/.auth",n,o),e.use("/api/.refine",c,i,s)};var Se=p(require("path")),be=(e,t)=>{e.get("/open-in-editor/*",(r,o)=>{let{line:s,column:f}=r.query,c=r.path.replace("/open-in-editor",""),n=`vscode://file/${Se.default.join(t,c)}?${s?`line=${s}`:""}${f?`&column=${f}`:""}`;o.redirect(n)})};var Ye=async({projectPath:e=process.cwd(),onError:t=()=>{process.exit(1)}}={})=>new Promise((r,o)=>{let s=(0,ke.default)(),f=B(s,()=>{o(),t()}),c=q(f,()=>{o(),t()}),n=K();c.on("connection",i=>{(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_INIT,d=>{n.connectedApp?(0,a.send)(i,a.DevtoolsEvent.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=d.url,n.clientWs=i,c.clients.forEach(u=>{(0,a.send)(u,a.DevtoolsEvent.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),(0,a.receive)(i,a.DevtoolsEvent.ACTIVITY,d=>{let u=n.activities.findIndex(v=>v.identifier===d.identifier),l={...d,createdAt:Date.now(),updatedAt:Date.now()};u>-1?(l.createdAt=n.activities[u].createdAt,n.activities[u]=l):n.activities.push(l),c.clients.forEach(v=>{(0,a.send)(v,a.DevtoolsEvent.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[l]})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:d})=>{c.clients.forEach(u=>{(0,a.send)(u,a.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:d})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY,({queryKey:d})=>{c.clients.forEach(u=>{(0,a.send)(u,a.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY_ACTION,{queryKey:d})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_LOGIN_SUCCESS,()=>{c.clients.forEach(d=>{(0,a.send)(d,a.DevtoolsEvent.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),(0,a.receive)(i,a.DevtoolsEvent.DEVTOOLS_LOGIN_FAILURE,({error:d,code:u})=>{c.clients.forEach(l=>{(0,a.send)(l,a.DevtoolsEvent.DEVTOOLS_DISPLAY_LOGIN_FAILURE,{error:d,code:u})})}),i.on("close",(d,u)=>{n.clientWs&&(c.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],c.clients.forEach(l=>{(0,a.send)(l,a.DevtoolsEvent.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),W(c),N(s),Ae(s,n),Le(s),be(s,e),process.on("SIGTERM",()=>{o()})});0&&(module.exports={server});
//# sourceMappingURL=index.cjs.map