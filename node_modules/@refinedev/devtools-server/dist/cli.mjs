#!/usr/bin/env node
var E=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});import Je from"express";import{DevtoolsEvent as v,receive as _,send as P}from"@refinedev/devtools-shared";import fe from"express";import x from"path";var w=e=>{e.use(fe.static(x.join(__dirname,"client"))),e.use((t,r,o)=>{if(t.path.startsWith("/api")||t.path.startsWith("/open-in-editor"))return o();r.status(200).sendFile(x.join(`${__dirname}/client/index.html`))})};import Pe from"ws";import ue from"dotenv";var D={};ue.config({processEnv:D});var ve=process.env.REFINE_DEVTOOLS_PORT||D.REFINE_DEVTOOLS_PORT,ge=5001,h=Number(ve)||ge,L="https://auth.refine.dev",C="https://cloud2.refine.dev",j="/api/login",A="/api/login-callback",N="/after-login",V="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";import{bold as U,cyanBright as F}from"chalk";var $=(e,t)=>{let r=new Pe.Server({server:e}).on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?console.error(`
${F.bold("\u2717 ")}${U("Refine Devtools server")} (websocket) failed to start. Port ${h} is already in use.
`):console.error(`
${F.bold("\u2717 ")}${U("error from refine devtools")}`,o),r.close(()=>{}),t()});return r.on("connection",o=>{o.on("close",()=>{o.terminate()})}),process.on("SIGTERM",()=>{r.close(()=>{})}),r};import"lodash-es/debounce.js";import"@refinedev/devtools-shared";import"ws";var H=()=>0;import{bold as T,cyanBright as y}from"chalk";import he from"http";var M=(e,t)=>{let r=he.createServer(e);return r.on("error",o=>{(o==null?void 0:o.code)==="EADDRINUSE"?(console.error(`
${y.bold("\u2717 ")}${T("Refine Devtools server")} (http) failed to start. Port ${h} is already in use.
`),console.info(`${y.bold("\u2139 ")}You can change the port by setting the ${T("REFINE_DEVTOOLS_PORT")} environment variable.`)):console.error(`
${y.bold("\u2717 ")}${T("error from Refine Devtools")}`,o),r.close(()=>{}),t()}).on("listening",()=>{console.log(`
${y.bold("\u2713 ")}${T("Refine Devtools")} is running at port ${y.bold(h)}
`)}),process.on("SIGTERM",()=>{r.close(()=>{})}),r.listen(h,void 0,void 0,()=>{}),r};var _e={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},G=()=>({..._e});import{json as Fe}from"express";import $e from"lodash-es/uniq.js";import Re from"node-fetch";import ye from"gray-matter";import{marked as b}from"marked";import S from"sanitize-html";var Ee=e=>e.split("---section").slice(1).map(r=>`---section${r}`),Ae=e=>{let t=new b.Renderer;t.link=function(...o){return b.Renderer.prototype.link.apply(this,o).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=b(e,{renderer:t});return S(r,{allowedTags:S.defaults.allowedTags.concat(["img"]),allowedAttributes:{...S.defaults.allowedAttributes,img:["src"]}})},Te=e=>{let t=ye(e.replace("---section","---"));return{...t.data,content:Ae(t.content)}},Ie=async()=>{try{return(await Re(V)).text()}catch{return""}},q=async()=>{try{let e=await Ie();return Ee(e).map(Te)}catch{return[]}};import be from"fs";import Oe from"path";import Le from"globby";var W=async e=>{try{let t=await Le(`node_modules/${e}/package.json`,{onlyFiles:!0}),r=null;try{let o=E.resolve(Oe.join(e,"package.json"));o&&(r=o)}catch{}return[...t,...r?[r]:[]][0]??null}catch{return null}};var J=async e=>{try{let t=await W(e);if(!t)return null;let r=JSON.parse(be.readFileSync(t,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};import Se from"path";import{readJSON as ke}from"fs-extra";var I=async(e=process.cwd())=>{let t=await ke(Se.join(e,"package.json"),{encoding:"utf-8"});return Object.keys(t.dependencies).filter(o=>o.startsWith("@refinedev/"))};var B=e=>e.replace("@refinedev/","https://c.refine.dev/");var K=e=>"https://refine.dev/docs/api-reference/general-concepts/";var Y=async e=>{try{let t=await I(e);return await Promise.all(t.map(async o=>{let l=await J(o);return{name:o,currentVersion:l==null?void 0:l.version,description:l==null?void 0:l.description,changelog:B(o),documentation:K(o)}}))}catch{return[]}};import d from"dedent";var xe=[{name:"@refinedev/ably",description:"Ably integration for Refine",install:"npm install @refinedev/ably",usage:d(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for Refine",install:"npm install @refinedev/airtable",usage:d(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for Refine",install:"npm install @refinedev/antd antd",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for Refine",install:"npm install @refinedev/appwrite",usage:d(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for Refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion @tabler/icons-react",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for Refine",install:"npm install @refinedev/graphql",usage:d(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for Refine",install:"npm install @refinedev/hasura",usage:d(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with Refine",install:"npm install @refinedev/inferencer",usage:d(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for Refine",install:"npm install @refinedev/kbar",usage:d(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for Refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons-react",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for Refine",install:"npm install @refinedev/medusa",usage:d(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for Refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:d(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for Refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:d(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for Refine",install:"npm install @refinedev/nestjsx-crud",usage:d(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for Refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:d(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for Refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:d(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with Refine",install:"npm install @refinedev/simple-rest",usage:d(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with Refine",install:"npm install @refinedev/supabase",usage:d(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of Refine",install:"npm install @refinedev/strapi axios",usage:d(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of Refine",install:"npm install @refinedev/strapi-v4 axios",usage:d(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],Q=async e=>{let t=await I(e);return xe.filter(r=>!t.includes(r.name))};import{detect as we}from"package-manager-detector";import De from"execa";var z=async(e,t=process.cwd())=>{try{let r=await we({cwd:t}),[o]=((r==null?void 0:r.agent)||"npm").split("@"),{failed:l}=await De(o,["install",...e.map(p=>`${p}@latest`)]);return!l}catch{return!1}};import Ce from"execa";var X=async e=>{try{let{stdout:t}=await Ce("npm",["view",e,"name","version","--json"]);return JSON.parse(t)}catch{return{name:e}}};import{readJSON as je}from"fs-extra";import Ne from"path";var O=async(e=process.cwd())=>{var t;try{let r=await je(Ne.join(e,"package.json"),{encoding:"utf-8"}),o=(t=r==null?void 0:r.refine)==null?void 0:t.projectId;return o||!1}catch{return null}};import Ve from"execa";var Z=async(e,t=process.cwd())=>{try{return Ve.sync("npm",["pkg","set",`refine.projectId=${e}`],{cwd:t}),!0}catch{return null}};import Ue from"execa";import ee from"path";var te=async(e,t=process.cwd())=>{try{let r=E.resolve(".bin/jscodeshift"),o=Ue.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${ee.resolve(ee.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${e}`],{cwd:t,timeout:1e3*10});o.stderr&&console.error(o.stderr)}catch(r){console.error(r)}};var re=async(e,t=process.cwd())=>{try{return await Promise.all([Z(e,t),te(e,t)]),!0}catch{return!1}};var ne=(e,t)=>{e.use("/api",Fe()),e.get("/api/connected-app",(a,n)=>{n.json({url:t.connectedApp})}),e.get("/api/activities",(a,n)=>{let{offset:i=0,limit:c=t.activities.length}=a.query;n.setHeader("x-total-count",t.activities.length),n.json({data:t.activities.slice(Number(i),Number(c))})}),e.get("/api/activities/reset",(a,n)=>{t.activities=[],n.json({success:!0})}),e.get("/api/unique-trace-items",(a,n)=>{n.header("Access-Control-Allow-Origin","*"),n.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let i=t.activities.flatMap(m=>{var s;return((s=m.trace)==null?void 0:s.map(f=>f.function).filter(Boolean))??[]}),c=$e(i);n.setHeader("x-total-count",c.length),n.json({data:c})});let r=null;e.get("/api/installed-packages",async(a,n)=>{let{force:i}=a.query??{};(!r||i)&&(r=await Y()),n.header("x-total-count",`${r.length}`),n.json({data:r})});let o=null;e.get("/api/available-packages",async(a,n)=>{o||(o=await Q()),n.header("x-total-count",`${o.length}`),n.json({data:o})});let l=new Map;e.get("/api/packages/:packageName/latest",async(a,n)=>{let{packageName:i}=a.params??{};if(!i){n.status(400).json({error:"Package name is required"});return}if(!l.has(i)){let c=await X(i);l.set(i,c)}return n.json({data:l.get(i)})}),e.post("/api/packages/install",async(a,n)=>{let{packages:i}=a.body??{};if((i==null?void 0:i.length)===0){n.status(400).json({error:"Package name is required"});return}await z(i)?(r=null,o=null,n.status(200).json({success:!0})):n.status(400).json({success:!1,error:"Failed to update package"})});let p=null;e.get("/api/feed",async(a,n)=>{p||(p=await q()),n.header("x-total-count",`${p.length}`),n.json({data:p})}),e.get("/api/project-id/status",async(a,n)=>{let i={OK:0,NOT_FOUND:1,ERROR:2},c=await O();if(c){n.status(200).json({projectId:c,status:i.OK});return}if(c===!1){n.status(200).json({projectId:null,status:i.NOT_FOUND});return}n.status(200).json({projectId:null,status:i.ERROR})}),e.post("/api/project-id/update",async(a,n)=>{let{projectId:i}=a.body??{};if(!i){n.status(400).json({error:"Project ID is required"});return}if(await re(i)){n.status(200).json({success:!0});return}n.status(500).json({success:!1,error:"Failed to update project ID"})})};import He from"path";import{readJSON as Me,writeJSON as Ge}from"fs-extra";import{createProxyMiddleware as oe,fixRequestBody as ie}from"http-proxy-middleware";var se=He.join(__dirname,"..",".persist.json"),ae=async(e,t)=>{try{await Ge(se,{token:e,jwt:t})}catch{}},qe=async()=>{try{return await Me(se)}catch{}return{}},ce=async e=>{let{token:t,jwt:r}=await qe(),o=oe({target:`${L}/api/.auth`,secure:!1,changeOrigin:!0,logger:void 0,on:{proxyReq:ie,proxyRes:(s,f)=>{var g;(g=f.url)!=null&&g.includes("self-service/logout/api")&&(t=void 0,r=void 0,ae())}}}),l=oe({target:`${C}/.refine`,secure:!1,changeOrigin:!0,logger:void 0,on:{proxyReq:ie}}),p=null,a=async(s,f,g)=>{p||(p=await O()),p&&(s.headers["x-project-id"]=p),g()},n=async(s,f,g)=>{var u;t&&(s.headers["X-Session-Token"]=t),(u=s.url)!=null&&u.includes("self-service/logout/api")&&(s.body={session_token:t},s.headers["Content-Length"]=Buffer.byteLength(JSON.stringify(s.body)).toString()),g()},i=async(s,f,g)=>{r&&(s.headers.Authorization=`Bearer ${r}`,delete s.headers.cookie),g()},c=async(s,f,g)=>{let u=s.query;u.token&&u.jwt&&(t=u.token,r=u.jwt,await ae(u.token,u.jwt));let R=new URLSearchParams;u.error&&R.set("error",u.error),u.code&&R.set("code",u.code),f.redirect(`${N}?${R.toString()}`)},m=async(s,f,g)=>{let u=s.query,R=s.secure?"https":"http",k=s.headers.host;if(!k){f.redirect(`${A}?error=Missing%20Host`);return}let pe=`${R}://${k}${A}`,me=new URLSearchParams({provider:u.provider,returnUrl:encodeURIComponent(pe)});f.redirect(`${L}/login?${me.toString()}`)};e.use(j,m),e.use(A,c),e.use("/api/.auth",n,o),e.use("/api/.refine",a,i,l)};import We from"path";var le=(e,t)=>{e.get("/open-in-editor/*",(r,o)=>{let{line:l,column:p}=r.query,a=r.path.replace("/open-in-editor",""),n=`vscode://file/${We.join(t,a)}?${l?`line=${l}`:""}${p?`&column=${p}`:""}`;o.redirect(n)})};var de=async({projectPath:e=process.cwd(),onError:t=()=>{process.exit(1)}}={})=>new Promise((r,o)=>{let l=Je(),p=M(l,()=>{o(),t()}),a=$(p,()=>{o(),t()}),n=G();a.on("connection",i=>{_(i,v.DEVTOOLS_INIT,c=>{n.connectedApp?P(i,v.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=c.url,n.clientWs=i,a.clients.forEach(m=>{P(m,v.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),_(i,v.ACTIVITY,c=>{let m=n.activities.findIndex(f=>f.identifier===c.identifier),s={...c,createdAt:Date.now(),updatedAt:Date.now()};m>-1?(s.createdAt=n.activities[m].createdAt,n.activities[m]=s):n.activities.push(s),a.clients.forEach(f=>{P(f,v.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[s]})})}),_(i,v.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:c})=>{a.clients.forEach(m=>{P(m,v.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:c})})}),_(i,v.DEVTOOLS_INVALIDATE_QUERY,({queryKey:c})=>{a.clients.forEach(m=>{P(m,v.DEVTOOLS_INVALIDATE_QUERY_ACTION,{queryKey:c})})}),_(i,v.DEVTOOLS_LOGIN_SUCCESS,()=>{a.clients.forEach(c=>{P(c,v.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),_(i,v.DEVTOOLS_LOGIN_FAILURE,({error:c,code:m})=>{a.clients.forEach(s=>{P(s,v.DEVTOOLS_DISPLAY_LOGIN_FAILURE,{error:c,code:m})})}),i.on("close",(c,m)=>{n.clientWs&&(a.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],a.clients.forEach(s=>{P(s,v.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),H(a),w(l),ne(l,n),ce(l),le(l,e),process.on("SIGTERM",()=>{o()})});de().catch(()=>0);
//# sourceMappingURL=cli.mjs.map