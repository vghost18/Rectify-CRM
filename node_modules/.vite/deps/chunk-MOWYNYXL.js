import {
  require_pluralize
} from "./chunk-2F4BPO6M.js";
import {
  chunk_default,
  debounce_default,
  differenceWith_default,
  fromPairs_default,
  get_default,
  isEqual_default,
  unionWith_default,
  uniqBy_default,
  zip_default
} from "./chunk-T4K5N7DV.js";
import {
  O,
  T,
  d,
  p
} from "./chunk-AYVKWIAZ.js";
import {
  require_react_dom
} from "./chunk-OQJUKZWL.js";
import {
  require_react
} from "./chunk-BZ5DSBWL.js";
import {
  __commonJS,
  __toESM
} from "./chunk-GFT2G5UO.js";

// node_modules/stackframe/stackframe.js
var require_stackframe = __commonJS({
  "node_modules/stackframe/stackframe.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("stackframe", [], factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.StackFrame = factory();
      }
    })(exports, function() {
      "use strict";
      function _isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      }
      function _capitalize(str) {
        return str.charAt(0).toUpperCase() + str.substring(1);
      }
      function _getter(p3) {
        return function() {
          return this[p3];
        };
      }
      var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
      var numericProps = ["columnNumber", "lineNumber"];
      var stringProps = ["fileName", "functionName", "source"];
      var arrayProps = ["args"];
      var objectProps = ["evalOrigin"];
      var props = booleanProps.concat(numericProps, stringProps, arrayProps, objectProps);
      function StackFrame(obj) {
        if (!obj)
          return;
        for (var i3 = 0; i3 < props.length; i3++) {
          if (obj[props[i3]] !== void 0) {
            this["set" + _capitalize(props[i3])](obj[props[i3]]);
          }
        }
      }
      StackFrame.prototype = {
        getArgs: function() {
          return this.args;
        },
        setArgs: function(v2) {
          if (Object.prototype.toString.call(v2) !== "[object Array]") {
            throw new TypeError("Args must be an Array");
          }
          this.args = v2;
        },
        getEvalOrigin: function() {
          return this.evalOrigin;
        },
        setEvalOrigin: function(v2) {
          if (v2 instanceof StackFrame) {
            this.evalOrigin = v2;
          } else if (v2 instanceof Object) {
            this.evalOrigin = new StackFrame(v2);
          } else {
            throw new TypeError("Eval Origin must be an Object or StackFrame");
          }
        },
        toString: function() {
          var fileName = this.getFileName() || "";
          var lineNumber = this.getLineNumber() || "";
          var columnNumber = this.getColumnNumber() || "";
          var functionName = this.getFunctionName() || "";
          if (this.getIsEval()) {
            if (fileName) {
              return "[eval] (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
            }
            return "[eval]:" + lineNumber + ":" + columnNumber;
          }
          if (functionName) {
            return functionName + " (" + fileName + ":" + lineNumber + ":" + columnNumber + ")";
          }
          return fileName + ":" + lineNumber + ":" + columnNumber;
        }
      };
      StackFrame.fromString = function StackFrame$$fromString(str) {
        var argsStartIndex = str.indexOf("(");
        var argsEndIndex = str.lastIndexOf(")");
        var functionName = str.substring(0, argsStartIndex);
        var args = str.substring(argsStartIndex + 1, argsEndIndex).split(",");
        var locationString = str.substring(argsEndIndex + 1);
        if (locationString.indexOf("@") === 0) {
          var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, "");
          var fileName = parts[1];
          var lineNumber = parts[2];
          var columnNumber = parts[3];
        }
        return new StackFrame({
          functionName,
          args: args || void 0,
          fileName,
          lineNumber: lineNumber || void 0,
          columnNumber: columnNumber || void 0
        });
      };
      for (var i2 = 0; i2 < booleanProps.length; i2++) {
        StackFrame.prototype["get" + _capitalize(booleanProps[i2])] = _getter(booleanProps[i2]);
        StackFrame.prototype["set" + _capitalize(booleanProps[i2])] = /* @__PURE__ */ function(p3) {
          return function(v2) {
            this[p3] = Boolean(v2);
          };
        }(booleanProps[i2]);
      }
      for (var j2 = 0; j2 < numericProps.length; j2++) {
        StackFrame.prototype["get" + _capitalize(numericProps[j2])] = _getter(numericProps[j2]);
        StackFrame.prototype["set" + _capitalize(numericProps[j2])] = /* @__PURE__ */ function(p3) {
          return function(v2) {
            if (!_isNumber(v2)) {
              throw new TypeError(p3 + " must be a Number");
            }
            this[p3] = Number(v2);
          };
        }(numericProps[j2]);
      }
      for (var k2 = 0; k2 < stringProps.length; k2++) {
        StackFrame.prototype["get" + _capitalize(stringProps[k2])] = _getter(stringProps[k2]);
        StackFrame.prototype["set" + _capitalize(stringProps[k2])] = /* @__PURE__ */ function(p3) {
          return function(v2) {
            this[p3] = String(v2);
          };
        }(stringProps[k2]);
      }
      return StackFrame;
    });
  }
});

// node_modules/error-stack-parser/error-stack-parser.js
var require_error_stack_parser = __commonJS({
  "node_modules/error-stack-parser/error-stack-parser.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define("error-stack-parser", ["stackframe"], factory);
      } else if (typeof exports === "object") {
        module.exports = factory(require_stackframe());
      } else {
        root.ErrorStackParser = factory(root.StackFrame);
      }
    })(exports, function ErrorStackParser(StackFrame) {
      "use strict";
      var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
      var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
      var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
      return {
        /**
         * Given an Error object, extract the most information from it.
         *
         * @param {Error} error object
         * @return {Array} of StackFrames
         */
        parse: function ErrorStackParser$$parse(error) {
          if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
            return this.parseOpera(error);
          } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
            return this.parseV8OrIE(error);
          } else if (error.stack) {
            return this.parseFFOrSafari(error);
          } else {
            throw new Error("Cannot parse given Error object");
          }
        },
        // Separate line and column numbers from a string of the form: (URI:Line:Column)
        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
          if (urlLike.indexOf(":") === -1) {
            return [urlLike];
          }
          var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
          var parts = regExp.exec(urlLike.replace(/[()]/g, ""));
          return [parts[1], parts[2] || void 0, parts[3] || void 0];
        },
        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(CHROME_IE_STACK_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf("(eval ") > -1) {
              line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(,.*$)/g, "");
            }
            var sanitizedLine = line.replace(/^\s+/, "").replace(/\(eval code/g, "(").replace(/^.*?\s+/, "");
            var location = sanitizedLine.match(/ (\(.+\)$)/);
            sanitizedLine = location ? sanitizedLine.replace(location[0], "") : sanitizedLine;
            var locationParts = this.extractLocation(location ? location[1] : sanitizedLine);
            var functionName = location && sanitizedLine || void 0;
            var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
            return new StackFrame({
              functionName,
              fileName,
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        },
        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !line.match(SAFARI_NATIVE_CODE_REGEXP);
          }, this);
          return filtered.map(function(line) {
            if (line.indexOf(" > eval") > -1) {
              line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1");
            }
            if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
              return new StackFrame({
                functionName: line
              });
            } else {
              var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
              var matches = line.match(functionNameRegex);
              var functionName = matches && matches[1] ? matches[1] : void 0;
              var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
              return new StackFrame({
                functionName,
                fileName: locationParts[0],
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }
          }, this);
        },
        parseOpera: function ErrorStackParser$$parseOpera(e) {
          if (!e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length) {
            return this.parseOpera9(e);
          } else if (!e.stack) {
            return this.parseOpera10(e);
          } else {
            return this.parseOpera11(e);
          }
        },
        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
          var lines = e.message.split("\n");
          var result = [];
          for (var i2 = 2, len = lines.length; i2 < len; i2 += 2) {
            var match = lineRE.exec(lines[i2]);
            if (match) {
              result.push(new StackFrame({
                fileName: match[2],
                lineNumber: match[1],
                source: lines[i2]
              }));
            }
          }
          return result;
        },
        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
          var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
          var lines = e.stacktrace.split("\n");
          var result = [];
          for (var i2 = 0, len = lines.length; i2 < len; i2 += 2) {
            var match = lineRE.exec(lines[i2]);
            if (match) {
              result.push(
                new StackFrame({
                  functionName: match[3] || void 0,
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i2]
                })
              );
            }
          }
          return result;
        },
        // Opera 10.65+ Error.stack very similar to FF/Safari
        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
          var filtered = error.stack.split("\n").filter(function(line) {
            return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
          }, this);
          return filtered.map(function(line) {
            var tokens = line.split("@");
            var locationParts = this.extractLocation(tokens.pop());
            var functionCall = tokens.shift() || "";
            var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
            var argsRaw;
            if (functionCall.match(/\(([^)]*)\)/)) {
              argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, "$1");
            }
            var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
            return new StackFrame({
              functionName,
              args,
              fileName: locationParts[0],
              lineNumber: locationParts[1],
              columnNumber: locationParts[2],
              source: line
            });
          }, this);
        }
      };
    });
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React11 = require_react();
        var ReactSharedInternals = React11.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState5 = React11.useState, useEffect6 = React11.useEffect, useLayoutEffect = React11.useLayoutEffect, useDebugValue = React11.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React11.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState5({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect6(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            };
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$12(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$12 : useSyncExternalStore2;
        var useSyncExternalStore$2 = React11.useSyncExternalStore !== void 0 ? React11.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/es-errors/index.js"(exports, module) {
    "use strict";
    module.exports = Error;
  }
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/es-errors/eval.js"(exports, module) {
    "use strict";
    module.exports = EvalError;
  }
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/es-errors/range.js"(exports, module) {
    "use strict";
    module.exports = RangeError;
  }
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/es-errors/ref.js"(exports, module) {
    "use strict";
    module.exports = ReferenceError;
  }
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/es-errors/syntax.js"(exports, module) {
    "use strict";
    module.exports = SyntaxError;
  }
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/es-errors/type.js"(exports, module) {
    "use strict";
    module.exports = TypeError;
  }
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/es-errors/uri.js"(exports, module) {
    "use strict";
    module.exports = URIError;
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports, module) {
    "use strict";
    var test = {
      __proto__: null,
      foo: {}
    };
    var $Object = Object;
    module.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i2 = 0; i2 < a.length; i2 += 1) {
        arr[i2] = a[i2];
      }
      for (var j2 = 0; j2 < b.length; j2 += 1) {
        arr[j2 + a.length] = b[j2];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i2 = offset || 0, j2 = 0; i2 < arrLike.length; i2 += 1, j2 += 1) {
        arr[j2] = arrLike[i2];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i2 = 0; i2 < arr.length; i2 += 1) {
        str += arr[i2];
        if (i2 + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i2 = 0; i2 < boundLength; i2++) {
        boundArgs[i2] = "$" + i2;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports, module) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x2) {
      return x2.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
        var part = parts[i2];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i2 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/es-define-property/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module.exports = $defineProperty;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports, module) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports, module) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module.exports = hasPropertyDescriptors;
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var setFunctionLength = require_set_function_length();
    var $TypeError = require_type();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = require_es_define_property();
    var $max = GetIntrinsic("%Math.max%");
    module.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O3) {
      return O3.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i2 = 0; i2 < attrs.length; i2++) {
          s += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs2 = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs2)) {
          return "[" + indentedJoin(xs2, indent) + "]";
        }
        return "[ " + $join.call(xs2, ", ") + " ]";
      }
      if (isError2(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys2 = arrObjKeys(obj, inspect);
        var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys2.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys2, indent) + "}";
        }
        return tag + "{ " + $join.call(ys2, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError2(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f2) {
      if (f2.name) {
        return f2.name;
      }
      var m2 = $match.call(functionToString.call(f2), /^function\s*([\w$]+)/);
      if (m2) {
        return m2[1];
      }
      return null;
    }
    function indexOf(xs2, x2) {
      if (xs2.indexOf) {
        return xs2.indexOf(x2);
      }
      for (var i2 = 0, l2 = xs2.length; i2 < l2; i2++) {
        if (xs2[i2] === x2) {
          return i2;
        }
      }
      return -1;
    }
    function isMap(x2) {
      if (!mapSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        mapSize.call(x2);
        try {
          setSize.call(x2);
        } catch (s) {
          return true;
        }
        return x2 instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x2) {
      if (!weakMapHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x2, weakMapHas);
        try {
          weakSetHas.call(x2, weakSetHas);
        } catch (s) {
          return true;
        }
        return x2 instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x2) {
      if (!weakRefDeref || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x2);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x2) {
      if (!setSize || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        setSize.call(x2);
        try {
          mapSize.call(x2);
        } catch (m2) {
          return true;
        }
        return x2 instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x2) {
      if (!weakSetHas || !x2 || typeof x2 !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x2, weakSetHas);
        try {
          weakMapHas.call(x2, weakMapHas);
        } catch (s) {
          return true;
        }
        return x2 instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x2) {
      if (!x2 || typeof x2 !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x2 instanceof HTMLElement) {
        return true;
      }
      return typeof x2.nodeName === "string" && typeof x2.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x2 = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x2) {
        return "\\" + x2;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs2) {
      for (var i2 = 0; i2 < xs2.length; i2++) {
        if (indexOf(xs2[i2], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs2, indent) {
      if (xs2.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs2, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs2 = [];
      if (isArr) {
        xs2.length = obj.length;
        for (var i2 = 0; i2 < obj.length; i2++) {
          xs2[i2] = has(obj, i2) ? inspect(obj[i2], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k2 = 0; k2 < syms.length; k2++) {
          symMap["$" + syms[k2]] = syms[k2];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs2.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs2.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j2 = 0; j2 < syms.length; j2++) {
          if (isEnumerable.call(obj, syms[j2])) {
            xs2.push("[" + inspect(syms[j2]) + "]: " + inspect(obj[syms[j2]], obj));
          }
        }
      }
      return xs2;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = /** @type {NonNullable<typeof list.next>} */
          list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = /** @type {import('.').ListNode<typeof value>} */
        {
          // eslint-disable-line no-param-reassign, no-extra-parens
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o2;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o2) {
              return listGet($o2, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o2) {
              return listHas($o2, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o2) {
              $o2 = { key: {}, next: null };
            }
            listSet($o2, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "node_modules/qs/lib/formats.js"(exports, module) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "node_modules/qs/lib/utils.js"(exports, module) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i2 = 0; i2 < 256; ++i2) {
        array.push("%" + ((i2 < 16 ? "0" : "") + i2.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j2 = 0; j2 < obj.length; ++j2) {
            if (typeof obj[j2] !== "undefined") {
              compacted.push(obj[j2]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i2 = 0; i2 < source.length; ++i2) {
        if (typeof source[i2] !== "undefined") {
          obj[i2] = source[i2];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i2) {
          if (has.call(target, i2)) {
            var targetItem = target[i2];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i2] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i2] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var encode = function encode2(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i2 = 0; i2 < string.length; ++i2) {
        var c = string.charCodeAt(i2);
        if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
          out += string.charAt(i2);
          continue;
        }
        if (c < 128) {
          out = out + hexTable[c];
          continue;
        }
        if (c < 2048) {
          out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
          continue;
        }
        if (c < 55296 || c >= 57344) {
          out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
          continue;
        }
        i2 += 1;
        c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i2) & 1023);
        out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i2 = 0; i2 < queue.length; ++i2) {
        var item = queue[i2];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j2 = 0; j2 < keys.length; ++j2) {
          var key = keys[j2];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i2 = 0; i2 < val.length; i2 += 1) {
          mapped.push(fn(val[i2]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode,
      encode,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/qs/lib/stringify.js"(exports, module) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      allowEmptyArrays: false,
      arrayFormat: "indices",
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encodeDotInKeys: false,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v2) {
      return typeof v2 === "string" || typeof v2 === "number" || typeof v2 === "boolean" || typeof v2 === "symbol" || typeof v2 === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, "%2E") : prefix;
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
      if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + "[]";
      }
      for (var j2 = 0; j2 < objKeys.length; ++j2) {
        var key = objKeys[j2];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          allowEmptyArrays,
          strictNullHandling,
          skipNulls,
          encodeDotInKeys,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
        throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      var arrayFormat;
      if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if ("indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = defaults.arrayFormat;
      }
      if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
      var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i2 = 0; i2 < objKeys.length; ++i2) {
        var key = objKeys[i2];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.allowEmptyArrays,
          options.strictNullHandling,
          options.skipNulls,
          options.encodeDotInKeys,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "node_modules/qs/lib/parse.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowEmptyArrays: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decodeDotInKeys: true,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      duplicates: "combine",
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i2;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i2 = 0; i2 < parts.length; ++i2) {
          if (parts[i2].indexOf("utf8=") === 0) {
            if (parts[i2] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i2] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i2;
            i2 = parts.length;
          }
        }
      }
      for (i2 = 0; i2 < parts.length; ++i2) {
        if (i2 === skipIndex) {
          continue;
        }
        var part = parts[i2];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray(val) ? [val] : val;
        }
        var existing = has.call(obj, key);
        if (existing && options.duplicates === "combine") {
          obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === "last") {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i2 = chain.length - 1; i2 >= 0; --i2) {
        var obj;
        var root = chain[i2];
        if (root === "[]" && options.parseArrays) {
          obj = options.allowEmptyArrays && leaf === "" ? [] : [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
          var index = parseInt(decodedRoot, 10);
          if (!options.parseArrays && decodedRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (decodedRoot !== "__proto__") {
            obj[decodedRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i2 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i2 < options.depth) {
        i2 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
        throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
      }
      if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
        throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
      }
      if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
      if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
        throw new TypeError("The duplicates option must be either combine, first, or last");
      }
      var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
      return {
        allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i2 = 0; i2 < keys.length; ++i2) {
        var key = keys[i2];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// node_modules/qs/lib/index.js
var require_lib = __commonJS({
  "node_modules/qs/lib/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var parse = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse,
      stringify
    };
  }
});

// node_modules/warn-once/index.js
var require_warn_once = __commonJS({
  "node_modules/warn-once/index.js"(exports, module) {
    var DEV = true;
    var warnings = /* @__PURE__ */ new Set();
    function warnOnce(condition, ...rest) {
      if (DEV && condition) {
        const key = rest.join(" ");
        if (warnings.has(key)) {
          return;
        }
        warnings.add(key);
        console.warn(...rest);
      }
    }
    module.exports = warnOnce;
  }
});

// node_modules/papaparse/papaparse.min.js
var require_papaparse_min = __commonJS({
  "node_modules/papaparse/papaparse.min.js"(exports, module) {
    !function(e, t) {
      "function" == typeof define && define.amd ? define([], t) : "object" == typeof module && "undefined" != typeof exports ? module.exports = t() : e.Papa = t();
    }(exports, function s() {
      "use strict";
      var f2 = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== f2 ? f2 : {};
      var n = !f2.document && !!f2.postMessage, o2 = f2.IS_PAPA_WORKER || false, a = {}, u = 0, b = { parse: function(e, t) {
        var r2 = (t = t || {}).dynamicTyping || false;
        J2(r2) && (t.dynamicTypingFunction = r2, r2 = {});
        if (t.dynamicTyping = r2, t.transform = !!J2(t.transform) && t.transform, t.worker && b.WORKERS_SUPPORTED) {
          var i2 = function() {
            if (!b.WORKERS_SUPPORTED)
              return false;
            var e2 = (r3 = f2.URL || f2.webkitURL || null, i3 = s.toString(), b.BLOB_URL || (b.BLOB_URL = r3.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", i3, ")();"], { type: "text/javascript" })))), t2 = new f2.Worker(e2);
            var r3, i3;
            return t2.onmessage = _, t2.id = u++, a[t2.id] = t2;
          }();
          return i2.userStep = t.step, i2.userChunk = t.chunk, i2.userComplete = t.complete, i2.userError = t.error, t.step = J2(t.step), t.chunk = J2(t.chunk), t.complete = J2(t.complete), t.error = J2(t.error), delete t.worker, void i2.postMessage({ input: e, config: t, workerId: i2.id });
        }
        var n2 = null;
        b.NODE_STREAM_INPUT, "string" == typeof e ? (e = function(e2) {
          if (65279 === e2.charCodeAt(0))
            return e2.slice(1);
          return e2;
        }(e), n2 = t.download ? new l2(t) : new p3(t)) : true === e.readable && J2(e.read) && J2(e.on) ? n2 = new g2(t) : (f2.File && e instanceof File || e instanceof Object) && (n2 = new c(t));
        return n2.stream(e);
      }, unparse: function(e, t) {
        var n2 = false, _2 = true, m3 = ",", y3 = "\r\n", s2 = '"', a2 = s2 + s2, r2 = false, i2 = null, o3 = false;
        !function() {
          if ("object" != typeof t)
            return;
          "string" != typeof t.delimiter || b.BAD_DELIMITERS.filter(function(e2) {
            return -1 !== t.delimiter.indexOf(e2);
          }).length || (m3 = t.delimiter);
          ("boolean" == typeof t.quotes || "function" == typeof t.quotes || Array.isArray(t.quotes)) && (n2 = t.quotes);
          "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (r2 = t.skipEmptyLines);
          "string" == typeof t.newline && (y3 = t.newline);
          "string" == typeof t.quoteChar && (s2 = t.quoteChar);
          "boolean" == typeof t.header && (_2 = t.header);
          if (Array.isArray(t.columns)) {
            if (0 === t.columns.length)
              throw new Error("Option columns is empty");
            i2 = t.columns;
          }
          void 0 !== t.escapeChar && (a2 = t.escapeChar + s2);
          ("boolean" == typeof t.escapeFormulae || t.escapeFormulae instanceof RegExp) && (o3 = t.escapeFormulae instanceof RegExp ? t.escapeFormulae : /^[=+\-@\t\r].*$/);
        }();
        var u2 = new RegExp(Q(s2), "g");
        "string" == typeof e && (e = JSON.parse(e));
        if (Array.isArray(e)) {
          if (!e.length || Array.isArray(e[0]))
            return h2(null, e, r2);
          if ("object" == typeof e[0])
            return h2(i2 || Object.keys(e[0]), e, r2);
        } else if ("object" == typeof e)
          return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || i2), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), h2(e.fields || [], e.data || [], r2);
        throw new Error("Unable to serialize unrecognized input");
        function h2(e2, t2, r3) {
          var i3 = "";
          "string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2));
          var n3 = Array.isArray(e2) && 0 < e2.length, s3 = !Array.isArray(t2[0]);
          if (n3 && _2) {
            for (var a3 = 0; a3 < e2.length; a3++)
              0 < a3 && (i3 += m3), i3 += v3(e2[a3], a3);
            0 < t2.length && (i3 += y3);
          }
          for (var o4 = 0; o4 < t2.length; o4++) {
            var u3 = n3 ? e2.length : t2[o4].length, h3 = false, f3 = n3 ? 0 === Object.keys(t2[o4]).length : 0 === t2[o4].length;
            if (r3 && !n3 && (h3 = "greedy" === r3 ? "" === t2[o4].join("").trim() : 1 === t2[o4].length && 0 === t2[o4][0].length), "greedy" === r3 && n3) {
              for (var d4 = [], l3 = 0; l3 < u3; l3++) {
                var c2 = s3 ? e2[l3] : l3;
                d4.push(t2[o4][c2]);
              }
              h3 = "" === d4.join("").trim();
            }
            if (!h3) {
              for (var p4 = 0; p4 < u3; p4++) {
                0 < p4 && !f3 && (i3 += m3);
                var g3 = n3 && s3 ? e2[p4] : p4;
                i3 += v3(t2[o4][g3], p4);
              }
              o4 < t2.length - 1 && (!r3 || 0 < u3 && !f3) && (i3 += y3);
            }
          }
          return i3;
        }
        function v3(e2, t2) {
          if (null == e2)
            return "";
          if (e2.constructor === Date)
            return JSON.stringify(e2).slice(1, 25);
          var r3 = false;
          o3 && "string" == typeof e2 && o3.test(e2) && (e2 = "'" + e2, r3 = true);
          var i3 = e2.toString().replace(u2, a2);
          return (r3 = r3 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || function(e3, t3) {
            for (var r4 = 0; r4 < t3.length; r4++)
              if (-1 < e3.indexOf(t3[r4]))
                return true;
            return false;
          }(i3, b.BAD_DELIMITERS) || -1 < i3.indexOf(m3) || " " === i3.charAt(0) || " " === i3.charAt(i3.length - 1)) ? s2 + i3 + s2 : i3;
        }
      } };
      if (b.RECORD_SEP = String.fromCharCode(30), b.UNIT_SEP = String.fromCharCode(31), b.BYTE_ORDER_MARK = "\uFEFF", b.BAD_DELIMITERS = ["\r", "\n", '"', b.BYTE_ORDER_MARK], b.WORKERS_SUPPORTED = !n && !!f2.Worker, b.NODE_STREAM_INPUT = 1, b.LocalChunkSize = 10485760, b.RemoteChunkSize = 5242880, b.DefaultDelimiter = ",", b.Parser = E2, b.ParserHandle = r, b.NetworkStreamer = l2, b.FileStreamer = c, b.StringStreamer = p3, b.ReadableStreamStreamer = g2, f2.jQuery) {
        var d3 = f2.jQuery;
        d3.fn.parse = function(o3) {
          var r2 = o3.config || {}, u2 = [];
          return this.each(function(e2) {
            if (!("INPUT" === d3(this).prop("tagName").toUpperCase() && "file" === d3(this).attr("type").toLowerCase() && f2.FileReader) || !this.files || 0 === this.files.length)
              return true;
            for (var t = 0; t < this.files.length; t++)
              u2.push({ file: this.files[t], inputElem: this, instanceConfig: d3.extend({}, r2) });
          }), e(), this;
          function e() {
            if (0 !== u2.length) {
              var e2, t, r3, i2, n2 = u2[0];
              if (J2(o3.before)) {
                var s2 = o3.before(n2.file, n2.inputElem);
                if ("object" == typeof s2) {
                  if ("abort" === s2.action)
                    return e2 = "AbortError", t = n2.file, r3 = n2.inputElem, i2 = s2.reason, void (J2(o3.error) && o3.error({ name: e2 }, t, r3, i2));
                  if ("skip" === s2.action)
                    return void h2();
                  "object" == typeof s2.config && (n2.instanceConfig = d3.extend(n2.instanceConfig, s2.config));
                } else if ("skip" === s2)
                  return void h2();
              }
              var a2 = n2.instanceConfig.complete;
              n2.instanceConfig.complete = function(e3) {
                J2(a2) && a2(e3, n2.file, n2.inputElem), h2();
              }, b.parse(n2.file, n2.instanceConfig);
            } else
              J2(o3.complete) && o3.complete();
          }
          function h2() {
            u2.splice(0, 1), e();
          }
        };
      }
      function h(e) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, (function(e2) {
          var t = w(e2);
          t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
          this._handle = new r(t), (this._handle.streamer = this)._config = t;
        }).call(this, e), this.parseChunk = function(e2, t) {
          if (this.isFirstChunk && J2(this._config.beforeFirstChunk)) {
            var r2 = this._config.beforeFirstChunk(e2);
            void 0 !== r2 && (e2 = r2);
          }
          this.isFirstChunk = false, this._halted = false;
          var i2 = this._partialLine + e2;
          this._partialLine = "";
          var n2 = this._handle.parse(i2, this._baseIndex, !this._finished);
          if (!this._handle.paused() && !this._handle.aborted()) {
            var s2 = n2.meta.cursor;
            this._finished || (this._partialLine = i2.substring(s2 - this._baseIndex), this._baseIndex = s2), n2 && n2.data && (this._rowCount += n2.data.length);
            var a2 = this._finished || this._config.preview && this._rowCount >= this._config.preview;
            if (o2)
              f2.postMessage({ results: n2, workerId: b.WORKER_ID, finished: a2 });
            else if (J2(this._config.chunk) && !t) {
              if (this._config.chunk(n2, this._handle), this._handle.paused() || this._handle.aborted())
                return void (this._halted = true);
              n2 = void 0, this._completeResults = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n2.data), this._completeResults.errors = this._completeResults.errors.concat(n2.errors), this._completeResults.meta = n2.meta), this._completed || !a2 || !J2(this._config.complete) || n2 && n2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), a2 || n2 && n2.meta.paused || this._nextChunk(), n2;
          }
          this._halted = true;
        }, this._sendError = function(e2) {
          J2(this._config.error) ? this._config.error(e2) : o2 && this._config.error && f2.postMessage({ workerId: b.WORKER_ID, error: e2, finished: false });
        };
      }
      function l2(e) {
        var i2;
        (e = e || {}).chunkSize || (e.chunkSize = b.RemoteChunkSize), h.call(this, e), this._nextChunk = n ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e2) {
          this._input = e2, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished)
            this._chunkLoaded();
          else {
            if (i2 = new XMLHttpRequest(), this._config.withCredentials && (i2.withCredentials = this._config.withCredentials), n || (i2.onload = v2(this._chunkLoaded, this), i2.onerror = v2(this._chunkError, this)), i2.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n), this._config.downloadRequestHeaders) {
              var e2 = this._config.downloadRequestHeaders;
              for (var t in e2)
                i2.setRequestHeader(t, e2[t]);
            }
            if (this._config.chunkSize) {
              var r2 = this._start + this._config.chunkSize - 1;
              i2.setRequestHeader("Range", "bytes=" + this._start + "-" + r2);
            }
            try {
              i2.send(this._config.downloadRequestBody);
            } catch (e3) {
              this._chunkError(e3.message);
            }
            n && 0 === i2.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === i2.readyState && (i2.status < 200 || 400 <= i2.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : i2.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e2) {
            var t = e2.getResponseHeader("Content-Range");
            if (null === t)
              return -1;
            return parseInt(t.substring(t.lastIndexOf("/") + 1));
          }(i2), this.parseChunk(i2.responseText)));
        }, this._chunkError = function(e2) {
          var t = i2.statusText || e2;
          this._sendError(new Error(t));
        };
      }
      function c(e) {
        var i2, n2;
        (e = e || {}).chunkSize || (e.chunkSize = b.LocalChunkSize), h.call(this, e);
        var s2 = "undefined" != typeof FileReader;
        this.stream = function(e2) {
          this._input = e2, n2 = e2.slice || e2.webkitSlice || e2.mozSlice, s2 ? ((i2 = new FileReader()).onload = v2(this._chunkLoaded, this), i2.onerror = v2(this._chunkError, this)) : i2 = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e2 = this._input;
          if (this._config.chunkSize) {
            var t = Math.min(this._start + this._config.chunkSize, this._input.size);
            e2 = n2.call(e2, this._start, t);
          }
          var r2 = i2.readAsText(e2, this._config.encoding);
          s2 || this._chunkLoaded({ target: { result: r2 } });
        }, this._chunkLoaded = function(e2) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
        }, this._chunkError = function() {
          this._sendError(i2.error);
        };
      }
      function p3(e) {
        var r2;
        h.call(this, e = e || {}), this.stream = function(e2) {
          return r2 = e2, this._nextChunk();
        }, this._nextChunk = function() {
          if (!this._finished) {
            var e2, t = this._config.chunkSize;
            return t ? (e2 = r2.substring(0, t), r2 = r2.substring(t)) : (e2 = r2, r2 = ""), this._finished = !r2, this.parseChunk(e2);
          }
        };
      }
      function g2(e) {
        h.call(this, e = e || {});
        var t = [], r2 = true, i2 = false;
        this.pause = function() {
          h.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          h.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e2) {
          this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          i2 && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : r2 = true;
        }, this._streamData = v2(function(e2) {
          try {
            t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), r2 && (r2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e3) {
            this._streamError(e3);
          }
        }, this), this._streamError = v2(function(e2) {
          this._streamCleanUp(), this._sendError(e2);
        }, this), this._streamEnd = v2(function() {
          this._streamCleanUp(), i2 = true, this._streamData("");
        }, this), this._streamCleanUp = v2(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      function r(m3) {
        var a2, o3, u2, i2 = Math.pow(2, 53), n2 = -i2, s2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, h2 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, t = this, r2 = 0, f3 = 0, d4 = false, e = false, l3 = [], c2 = { data: [], errors: [], meta: {} };
        if (J2(m3.step)) {
          var p4 = m3.step;
          m3.step = function(e2) {
            if (c2 = e2, _2())
              g3();
            else {
              if (g3(), 0 === c2.data.length)
                return;
              r2 += e2.data.length, m3.preview && r2 > m3.preview ? o3.abort() : (c2.data = c2.data[0], p4(c2, t));
            }
          };
        }
        function y3(e2) {
          return "greedy" === m3.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
        }
        function g3() {
          return c2 && u2 && (k2("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b.DefaultDelimiter + "'"), u2 = false), m3.skipEmptyLines && (c2.data = c2.data.filter(function(e2) {
            return !y3(e2);
          })), _2() && function() {
            if (!c2)
              return;
            function e2(e3, t3) {
              J2(m3.transformHeader) && (e3 = m3.transformHeader(e3, t3)), l3.push(e3);
            }
            if (Array.isArray(c2.data[0])) {
              for (var t2 = 0; _2() && t2 < c2.data.length; t2++)
                c2.data[t2].forEach(e2);
              c2.data.splice(0, 1);
            } else
              c2.data.forEach(e2);
          }(), function() {
            if (!c2 || !m3.header && !m3.dynamicTyping && !m3.transform)
              return c2;
            function e2(e3, t3) {
              var r3, i3 = m3.header ? {} : [];
              for (r3 = 0; r3 < e3.length; r3++) {
                var n3 = r3, s3 = e3[r3];
                m3.header && (n3 = r3 >= l3.length ? "__parsed_extra" : l3[r3]), m3.transform && (s3 = m3.transform(s3, n3)), s3 = v3(n3, s3), "__parsed_extra" === n3 ? (i3[n3] = i3[n3] || [], i3[n3].push(s3)) : i3[n3] = s3;
              }
              return m3.header && (r3 > l3.length ? k2("FieldMismatch", "TooManyFields", "Too many fields: expected " + l3.length + " fields but parsed " + r3, f3 + t3) : r3 < l3.length && k2("FieldMismatch", "TooFewFields", "Too few fields: expected " + l3.length + " fields but parsed " + r3, f3 + t3)), i3;
            }
            var t2 = 1;
            !c2.data.length || Array.isArray(c2.data[0]) ? (c2.data = c2.data.map(e2), t2 = c2.data.length) : c2.data = e2(c2.data, 0);
            m3.header && c2.meta && (c2.meta.fields = l3);
            return f3 += t2, c2;
          }();
        }
        function _2() {
          return m3.header && 0 === l3.length;
        }
        function v3(e2, t2) {
          return r3 = e2, m3.dynamicTypingFunction && void 0 === m3.dynamicTyping[r3] && (m3.dynamicTyping[r3] = m3.dynamicTypingFunction(r3)), true === (m3.dynamicTyping[r3] || m3.dynamicTyping) ? "true" === t2 || "TRUE" === t2 || "false" !== t2 && "FALSE" !== t2 && (function(e3) {
            if (s2.test(e3)) {
              var t3 = parseFloat(e3);
              if (n2 < t3 && t3 < i2)
                return true;
            }
            return false;
          }(t2) ? parseFloat(t2) : h2.test(t2) ? new Date(t2) : "" === t2 ? null : t2) : t2;
          var r3;
        }
        function k2(e2, t2, r3, i3) {
          var n3 = { type: e2, code: t2, message: r3 };
          void 0 !== i3 && (n3.row = i3), c2.errors.push(n3);
        }
        this.parse = function(e2, t2, r3) {
          var i3 = m3.quoteChar || '"';
          if (m3.newline || (m3.newline = function(e3, t3) {
            e3 = e3.substring(0, 1048576);
            var r4 = new RegExp(Q(t3) + "([^]*?)" + Q(t3), "gm"), i4 = (e3 = e3.replace(r4, "")).split("\r"), n4 = e3.split("\n"), s4 = 1 < n4.length && n4[0].length < i4[0].length;
            if (1 === i4.length || s4)
              return "\n";
            for (var a3 = 0, o4 = 0; o4 < i4.length; o4++)
              "\n" === i4[o4][0] && a3++;
            return a3 >= i4.length / 2 ? "\r\n" : "\r";
          }(e2, i3)), u2 = false, m3.delimiter)
            J2(m3.delimiter) && (m3.delimiter = m3.delimiter(e2), c2.meta.delimiter = m3.delimiter);
          else {
            var n3 = function(e3, t3, r4, i4, n4) {
              var s4, a3, o4, u3;
              n4 = n4 || [",", "	", "|", ";", b.RECORD_SEP, b.UNIT_SEP];
              for (var h3 = 0; h3 < n4.length; h3++) {
                var f4 = n4[h3], d5 = 0, l4 = 0, c3 = 0;
                o4 = void 0;
                for (var p5 = new E2({ comments: i4, delimiter: f4, newline: t3, preview: 10 }).parse(e3), g4 = 0; g4 < p5.data.length; g4++)
                  if (r4 && y3(p5.data[g4]))
                    c3++;
                  else {
                    var _3 = p5.data[g4].length;
                    l4 += _3, void 0 !== o4 ? 0 < _3 && (d5 += Math.abs(_3 - o4), o4 = _3) : o4 = _3;
                  }
                0 < p5.data.length && (l4 /= p5.data.length - c3), (void 0 === a3 || d5 <= a3) && (void 0 === u3 || u3 < l4) && 1.99 < l4 && (a3 = d5, s4 = f4, u3 = l4);
              }
              return { successful: !!(m3.delimiter = s4), bestDelimiter: s4 };
            }(e2, m3.newline, m3.skipEmptyLines, m3.comments, m3.delimitersToGuess);
            n3.successful ? m3.delimiter = n3.bestDelimiter : (u2 = true, m3.delimiter = b.DefaultDelimiter), c2.meta.delimiter = m3.delimiter;
          }
          var s3 = w(m3);
          return m3.preview && m3.header && s3.preview++, a2 = e2, o3 = new E2(s3), c2 = o3.parse(a2, t2, r3), g3(), d4 ? { meta: { paused: true } } : c2 || { meta: { paused: false } };
        }, this.paused = function() {
          return d4;
        }, this.pause = function() {
          d4 = true, o3.abort(), a2 = J2(m3.chunk) ? "" : a2.substring(o3.getCharIndex());
        }, this.resume = function() {
          t.streamer._halted ? (d4 = false, t.streamer.parseChunk(a2, true)) : setTimeout(t.resume, 3);
        }, this.aborted = function() {
          return e;
        }, this.abort = function() {
          e = true, o3.abort(), c2.meta.aborted = true, J2(m3.complete) && m3.complete(c2), a2 = "";
        };
      }
      function Q(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function E2(j2) {
        var z2, M = (j2 = j2 || {}).delimiter, P2 = j2.newline, U = j2.comments, q2 = j2.step, N = j2.preview, B = j2.fastMode, K = z2 = void 0 === j2.quoteChar || null === j2.quoteChar ? '"' : j2.quoteChar;
        if (void 0 !== j2.escapeChar && (K = j2.escapeChar), ("string" != typeof M || -1 < b.BAD_DELIMITERS.indexOf(M)) && (M = ","), U === M)
          throw new Error("Comment character same as delimiter");
        true === U ? U = "#" : ("string" != typeof U || -1 < b.BAD_DELIMITERS.indexOf(U)) && (U = false), "\n" !== P2 && "\r" !== P2 && "\r\n" !== P2 && (P2 = "\n");
        var W = 0, H2 = false;
        this.parse = function(i2, t, r2) {
          if ("string" != typeof i2)
            throw new Error("Input must be a string");
          var n2 = i2.length, e = M.length, s2 = P2.length, a2 = U.length, o3 = J2(q2), u2 = [], h2 = [], f3 = [], d4 = W = 0;
          if (!i2)
            return L();
          if (j2.header && !t) {
            var l3 = i2.split(P2)[0].split(M), c2 = [], p4 = {}, g3 = false;
            for (var _2 in l3) {
              var m3 = l3[_2];
              J2(j2.transformHeader) && (m3 = j2.transformHeader(m3, _2));
              var y3 = m3, v3 = p4[m3] || 0;
              for (0 < v3 && (g3 = true, y3 = m3 + "_" + v3), p4[m3] = v3 + 1; c2.includes(y3); )
                y3 = y3 + "_" + v3;
              c2.push(y3);
            }
            if (g3) {
              var k2 = i2.split(P2);
              k2[0] = c2.join(M), i2 = k2.join(P2);
            }
          }
          if (B || false !== B && -1 === i2.indexOf(z2)) {
            for (var b2 = i2.split(P2), E3 = 0; E3 < b2.length; E3++) {
              if (f3 = b2[E3], W += f3.length, E3 !== b2.length - 1)
                W += P2.length;
              else if (r2)
                return L();
              if (!U || f3.substring(0, a2) !== U) {
                if (o3) {
                  if (u2 = [], I2(f3.split(M)), F2(), H2)
                    return L();
                } else
                  I2(f3.split(M));
                if (N && N <= E3)
                  return u2 = u2.slice(0, N), L(true);
              }
            }
            return L();
          }
          for (var w2 = i2.indexOf(M, W), R2 = i2.indexOf(P2, W), C2 = new RegExp(Q(K) + Q(z2), "g"), S = i2.indexOf(z2, W); ; )
            if (i2[W] !== z2)
              if (U && 0 === f3.length && i2.substring(W, W + a2) === U) {
                if (-1 === R2)
                  return L();
                W = R2 + s2, R2 = i2.indexOf(P2, W), w2 = i2.indexOf(M, W);
              } else if (-1 !== w2 && (w2 < R2 || -1 === R2))
                f3.push(i2.substring(W, w2)), W = w2 + e, w2 = i2.indexOf(M, W);
              else {
                if (-1 === R2)
                  break;
                if (f3.push(i2.substring(W, R2)), D(R2 + s2), o3 && (F2(), H2))
                  return L();
                if (N && u2.length >= N)
                  return L(true);
              }
            else
              for (S = W, W++; ; ) {
                if (-1 === (S = i2.indexOf(z2, S + 1)))
                  return r2 || h2.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: u2.length, index: W }), T2();
                if (S === n2 - 1)
                  return T2(i2.substring(W, S).replace(C2, z2));
                if (z2 !== K || i2[S + 1] !== K) {
                  if (z2 === K || 0 === S || i2[S - 1] !== K) {
                    -1 !== w2 && w2 < S + 1 && (w2 = i2.indexOf(M, S + 1)), -1 !== R2 && R2 < S + 1 && (R2 = i2.indexOf(P2, S + 1));
                    var O3 = A(-1 === R2 ? w2 : Math.min(w2, R2));
                    if (i2.substr(S + 1 + O3, e) === M) {
                      f3.push(i2.substring(W, S).replace(C2, z2)), i2[W = S + 1 + O3 + e] !== z2 && (S = i2.indexOf(z2, W)), w2 = i2.indexOf(M, W), R2 = i2.indexOf(P2, W);
                      break;
                    }
                    var x2 = A(R2);
                    if (i2.substring(S + 1 + x2, S + 1 + x2 + s2) === P2) {
                      if (f3.push(i2.substring(W, S).replace(C2, z2)), D(S + 1 + x2 + s2), w2 = i2.indexOf(M, W), S = i2.indexOf(z2, W), o3 && (F2(), H2))
                        return L();
                      if (N && u2.length >= N)
                        return L(true);
                      break;
                    }
                    h2.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: u2.length, index: W }), S++;
                  }
                } else
                  S++;
              }
          return T2();
          function I2(e2) {
            u2.push(e2), d4 = W;
          }
          function A(e2) {
            var t2 = 0;
            if (-1 !== e2) {
              var r3 = i2.substring(S + 1, e2);
              r3 && "" === r3.trim() && (t2 = r3.length);
            }
            return t2;
          }
          function T2(e2) {
            return r2 || (void 0 === e2 && (e2 = i2.substring(W)), f3.push(e2), W = n2, I2(f3), o3 && F2()), L();
          }
          function D(e2) {
            W = e2, I2(f3), f3 = [], R2 = i2.indexOf(P2, W);
          }
          function L(e2) {
            return { data: u2, errors: h2, meta: { delimiter: M, linebreak: P2, aborted: H2, truncated: !!e2, cursor: d4 + (t || 0) } };
          }
          function F2() {
            q2(L()), u2 = [], h2 = [];
          }
        }, this.abort = function() {
          H2 = true;
        }, this.getCharIndex = function() {
          return W;
        };
      }
      function _(e) {
        var t = e.data, r2 = a[t.workerId], i2 = false;
        if (t.error)
          r2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = { abort: function() {
            i2 = true, m2(t.workerId, { data: [], errors: [], meta: { aborted: true } });
          }, pause: y2, resume: y2 };
          if (J2(r2.userStep)) {
            for (var s2 = 0; s2 < t.results.data.length && (r2.userStep({ data: t.results.data[s2], errors: t.results.errors, meta: t.results.meta }, n2), !i2); s2++)
              ;
            delete t.results;
          } else
            J2(r2.userChunk) && (r2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !i2 && m2(t.workerId, t.results);
      }
      function m2(e, t) {
        var r2 = a[e];
        J2(r2.userComplete) && r2.userComplete(t), r2.terminate(), delete a[e];
      }
      function y2() {
        throw new Error("Not implemented.");
      }
      function w(e) {
        if ("object" != typeof e || null === e)
          return e;
        var t = Array.isArray(e) ? [] : {};
        for (var r2 in e)
          t[r2] = w(e[r2]);
        return t;
      }
      function v2(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      function J2(e) {
        return "function" == typeof e;
      }
      return o2 && (f2.onmessage = function(e) {
        var t = e.data;
        void 0 === b.WORKER_ID && t && (b.WORKER_ID = t.workerId);
        if ("string" == typeof t.input)
          f2.postMessage({ workerId: b.WORKER_ID, results: b.parse(t.input, t.config), finished: true });
        else if (f2.File && t.input instanceof File || t.input instanceof Object) {
          var r2 = b.parse(t.input, t.config);
          r2 && f2.postMessage({ workerId: b.WORKER_ID, results: r2, finished: true });
        }
      }), (l2.prototype = Object.create(h.prototype)).constructor = l2, (c.prototype = Object.create(h.prototype)).constructor = c, (p3.prototype = Object.create(p3.prototype)).constructor = p3, (g2.prototype = Object.create(h.prototype)).constructor = g2, b;
    });
  }
});

// node_modules/@refinedev/core/dist/index.mjs
var import_react2 = __toESM(require_react(), 1);

// node_modules/@refinedev/devtools-internal/dist/index.mjs
var import_error_stack_parser = __toESM(require_error_stack_parser(), 1);
var import_react = __toESM(require_react(), 1);
var v = "renderWithHooks";
var m = (r) => {
  let e = r.findIndex((s) => s.functionName === v);
  return e !== -1 ? r.slice(0, e) : r;
};
var i = false ? /node_modules\/refinedev\/(?<name>.*?)\// : /\/refine\/packages\/(?<name>.*?)\//;
var y = (r) => r ? !!r.match(i) : false;
var d2 = (r) => {
  var n;
  if (!r)
    return;
  let e = r.match(i), s = (n = e == null ? void 0 : e.groups) == null ? void 0 : n.name;
  if (s)
    return `@refinedev/${s}`;
};
function p2() {
  if (false)
    return [];
  try {
    let r = new Error(), e = import_error_stack_parser.default.parse(r);
    return m(e).map((t) => ({ file: t.fileName, line: t.lineNumber, column: t.columnNumber, function: t.functionName, isRefine: y(t.fileName), packageName: d2(t.fileName) })).filter((t) => t.function).slice(1);
  } catch {
    return [];
  }
}
var E = (r, e) => {
  if (p[r] === "auth")
    return null;
  if (r === "useCan")
    return e ? "key[1].resource" : "key[1]";
  if (p[r] === "audit-log")
    return r === "useLog" ? "variables.resource" : "key[1]";
  if (p[r] === "data") {
    if (r === "useCustom" || r === "useCustomMutation")
      return null;
    switch (r) {
      case "useList":
      case "useInfiniteList":
      case "useOne":
      case "useMany":
        return e ? "key[1]" : "key[2]";
      case "useCreate":
      case "useCreateMany":
      case "useDelete":
      case "useDeleteMany":
      case "useUpdate":
      case "useUpdateMany":
        return "variables.resource";
    }
  }
  return null;
};
function P(r, e) {
  if (false)
    return { hookName: "", trace: [], resourcePath: null, legacyKey: false };
  let s = p2().slice(1), n = E(r, e);
  return { hookName: r, trace: s, resourcePath: n, legacyKey: e };
}
var l = (r, e) => {
  let s = e == null ? void 0 : e.map((t) => `${t.file}:${t.line}:${t.column}#${t.function}-${t.packageName}-${t.isRefine ? 1 : 0}`);
  return JSON.stringify([...r ?? [], ...s ?? []]);
};
var R = (r) => (e) => {
  var n;
  if (!((n = e == null ? void 0 : e.meta) != null && n.trace))
    return;
  let s = e == null ? void 0 : e.meta;
  new Promise((t) => {
    var a, o2;
    d(r, T.ACTIVITY, { type: "mutation", identifier: l(e == null ? void 0 : e.options.mutationKey, (a = e == null ? void 0 : e.meta) == null ? void 0 : a.trace), key: e == null ? void 0 : e.options.mutationKey, status: e == null ? void 0 : e.state.status, state: e == null ? void 0 : e.state, variables: (o2 = e == null ? void 0 : e.state) == null ? void 0 : o2.variables, ...s }), t();
  });
};
var g = (r) => (e) => {
  var n;
  if (!((n = e == null ? void 0 : e.meta) != null && n.trace))
    return;
  let s = e == null ? void 0 : e.meta;
  new Promise((t) => {
    var a;
    d(r, T.ACTIVITY, { type: "query", identifier: l(e.queryKey, (a = e.meta) == null ? void 0 : a.trace), key: e.queryKey, status: e.state.status, state: e.state, ...s }), t();
  });
};
var C = false ? () => ({}) : (r) => {
  let { ws: e } = (0, import_react.useContext)(O), s = import_react.default.useRef(), n = import_react.default.useRef();
  return import_react.default.useEffect(() => {
    if (!e)
      return () => 0;
    let t = r.getQueryCache(), a = g(e);
    return t.getAll().forEach(a), s.current = t.subscribe(({ query: o2, type: c }) => (c === "added" || c === "updated") && a(o2)), () => {
      var o2;
      (o2 = s.current) == null || o2.call(s);
    };
  }, [e, r]), import_react.default.useEffect(() => {
    if (!e)
      return () => 0;
    let t = r.getMutationCache(), a = R(e);
    return t.getAll().forEach(a), n.current = t.subscribe(({ mutation: o2, type: c }) => (c === "added" || c === "updated") && a(o2)), () => {
      var o2;
      (o2 = n.current) == null || o2.call(n);
    };
  }, [e, r]), {};
};

// node_modules/@tanstack/query-core/build/lib/subscribable.mjs
var Subscribable = class {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set();
    this.subscribe = this.subscribe.bind(this);
  }
  subscribe(listener) {
    const identity = {
      listener
    };
    this.listeners.add(identity);
    this.onSubscribe();
    return () => {
      this.listeners.delete(identity);
      this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
};

// node_modules/@tanstack/query-core/build/lib/utils.mjs
var isServer = typeof window === "undefined" || "Deno" in window;
function noop() {
  return void 0;
}
function functionalUpdate(updater, input) {
  return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function parseQueryArgs(arg1, arg2, arg3) {
  if (!isQueryKey(arg1)) {
    return arg1;
  }
  if (typeof arg2 === "function") {
    return {
      ...arg3,
      queryKey: arg1,
      queryFn: arg2
    };
  }
  return {
    ...arg2,
    queryKey: arg1
  };
}
function parseMutationArgs(arg1, arg2, arg3) {
  if (isQueryKey(arg1)) {
    if (typeof arg2 === "function") {
      return {
        ...arg3,
        mutationKey: arg1,
        mutationFn: arg2
      };
    }
    return {
      ...arg2,
      mutationKey: arg1
    };
  }
  if (typeof arg1 === "function") {
    return {
      ...arg2,
      mutationFn: arg1
    };
  }
  return {
    ...arg1
  };
}
function parseFilterArgs(arg1, arg2, arg3) {
  return isQueryKey(arg1) ? [{
    ...arg2,
    queryKey: arg1
  }, arg3] : [arg1 || {}, arg2];
}
function matchQuery(filters, query) {
  const {
    type = "all",
    exact,
    fetchStatus,
    predicate,
    queryKey,
    stale
  } = filters;
  if (isQueryKey(queryKey)) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }
  if (type !== "all") {
    const isActive = query.isActive();
    if (type === "active" && !isActive) {
      return false;
    }
    if (type === "inactive" && isActive) {
      return false;
    }
  }
  if (typeof stale === "boolean" && query.isStale() !== stale) {
    return false;
  }
  if (typeof fetchStatus !== "undefined" && fetchStatus !== query.state.fetchStatus) {
    return false;
  }
  if (predicate && !predicate(query)) {
    return false;
  }
  return true;
}
function matchMutation(filters, mutation) {
  const {
    exact,
    fetching,
    predicate,
    mutationKey
  } = filters;
  if (isQueryKey(mutationKey)) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }
  if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
    return false;
  }
  if (predicate && !predicate(mutation)) {
    return false;
  }
  return true;
}
function hashQueryKeyByOptions(queryKey, options) {
  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
  return hashFn(queryKey);
}
function hashQueryKey(queryKey) {
  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {
    result[key] = val[key];
    return result;
  }, {}) : val);
}
function partialMatchKey(a, b) {
  return partialDeepEqual(a, b);
}
function partialDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]));
  }
  return false;
}
function replaceEqualDeep(a, b) {
  if (a === b) {
    return a;
  }
  const array = isPlainArray(a) && isPlainArray(b);
  if (array || isPlainObject(a) && isPlainObject(b)) {
    const aSize = array ? a.length : Object.keys(a).length;
    const bItems = array ? b : Object.keys(b);
    const bSize = bItems.length;
    const copy = array ? [] : {};
    let equalItems = 0;
    for (let i2 = 0; i2 < bSize; i2++) {
      const key = array ? i2 : bItems[i2];
      copy[key] = replaceEqualDeep(a[key], b[key]);
      if (copy[key] === a[key]) {
        equalItems++;
      }
    }
    return aSize === bSize && equalItems === aSize ? a : copy;
  }
  return b;
}
function shallowEqualObjects(a, b) {
  if (a && !b || b && !a) {
    return false;
  }
  for (const key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}
function isPlainArray(value) {
  return Array.isArray(value) && value.length === Object.keys(value).length;
}
function isPlainObject(o2) {
  if (!hasObjectPrototype(o2)) {
    return false;
  }
  const ctor = o2.constructor;
  if (typeof ctor === "undefined") {
    return true;
  }
  const prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o2) {
  return Object.prototype.toString.call(o2) === "[object Object]";
}
function isQueryKey(value) {
  return Array.isArray(value);
}
function sleep(timeout) {
  return new Promise((resolve) => {
    setTimeout(resolve, timeout);
  });
}
function scheduleMicrotask(callback) {
  sleep(0).then(callback);
}
function getAbortController() {
  if (typeof AbortController === "function") {
    return new AbortController();
  }
  return;
}
function replaceData(prevData, data, options) {
  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {
    return prevData;
  } else if (typeof options.structuralSharing === "function") {
    return options.structuralSharing(prevData, data);
  } else if (options.structuralSharing !== false) {
    return replaceEqualDeep(prevData, data);
  }
  return data;
}

// node_modules/@tanstack/query-core/build/lib/focusManager.mjs
var FocusManager = class extends Subscribable {
  constructor() {
    super();
    this.setup = (onFocus) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onFocus();
        window.addEventListener("visibilitychange", listener, false);
        window.addEventListener("focus", listener, false);
        return () => {
          window.removeEventListener("visibilitychange", listener);
          window.removeEventListener("focus", listener);
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((focused) => {
      if (typeof focused === "boolean") {
        this.setFocused(focused);
      } else {
        this.onFocus();
      }
    });
  }
  setFocused(focused) {
    const changed = this.focused !== focused;
    if (changed) {
      this.focused = focused;
      this.onFocus();
    }
  }
  onFocus() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isFocused() {
    if (typeof this.focused === "boolean") {
      return this.focused;
    }
    if (typeof document === "undefined") {
      return true;
    }
    return [void 0, "visible", "prerender"].includes(document.visibilityState);
  }
};
var focusManager = new FocusManager();

// node_modules/@tanstack/query-core/build/lib/onlineManager.mjs
var onlineEvents = ["online", "offline"];
var OnlineManager = class extends Subscribable {
  constructor() {
    super();
    this.setup = (onOnline) => {
      if (!isServer && window.addEventListener) {
        const listener = () => onOnline();
        onlineEvents.forEach((event) => {
          window.addEventListener(event, listener, false);
        });
        return () => {
          onlineEvents.forEach((event) => {
            window.removeEventListener(event, listener);
          });
        };
      }
      return;
    };
  }
  onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  }
  setEventListener(setup) {
    var _this$cleanup2;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup((online) => {
      if (typeof online === "boolean") {
        this.setOnline(online);
      } else {
        this.onOnline();
      }
    });
  }
  setOnline(online) {
    const changed = this.online !== online;
    if (changed) {
      this.online = online;
      this.onOnline();
    }
  }
  onOnline() {
    this.listeners.forEach(({
      listener
    }) => {
      listener();
    });
  }
  isOnline() {
    if (typeof this.online === "boolean") {
      return this.online;
    }
    if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
      return true;
    }
    return navigator.onLine;
  }
};
var onlineManager = new OnlineManager();

// node_modules/@tanstack/query-core/build/lib/retryer.mjs
function defaultRetryDelay(failureCount) {
  return Math.min(1e3 * 2 ** failureCount, 3e4);
}
function canFetch(networkMode) {
  return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
}
var CancelledError = class {
  constructor(options) {
    this.revert = options == null ? void 0 : options.revert;
    this.silent = options == null ? void 0 : options.silent;
  }
};
function isCancelledError(value) {
  return value instanceof CancelledError;
}
function createRetryer(config) {
  let isRetryCancelled = false;
  let failureCount = 0;
  let isResolved = false;
  let continueFn;
  let promiseResolve;
  let promiseReject;
  const promise = new Promise((outerResolve, outerReject) => {
    promiseResolve = outerResolve;
    promiseReject = outerReject;
  });
  const cancel = (cancelOptions) => {
    if (!isResolved) {
      reject(new CancelledError(cancelOptions));
      config.abort == null ? void 0 : config.abort();
    }
  };
  const cancelRetry = () => {
    isRetryCancelled = true;
  };
  const continueRetry = () => {
    isRetryCancelled = false;
  };
  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== "always" && !onlineManager.isOnline();
  const resolve = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onSuccess == null ? void 0 : config.onSuccess(value);
      continueFn == null ? void 0 : continueFn();
      promiseResolve(value);
    }
  };
  const reject = (value) => {
    if (!isResolved) {
      isResolved = true;
      config.onError == null ? void 0 : config.onError(value);
      continueFn == null ? void 0 : continueFn();
      promiseReject(value);
    }
  };
  const pause = () => {
    return new Promise((continueResolve) => {
      continueFn = (value) => {
        const canContinue = isResolved || !shouldPause();
        if (canContinue) {
          continueResolve(value);
        }
        return canContinue;
      };
      config.onPause == null ? void 0 : config.onPause();
    }).then(() => {
      continueFn = void 0;
      if (!isResolved) {
        config.onContinue == null ? void 0 : config.onContinue();
      }
    });
  };
  const run = () => {
    if (isResolved) {
      return;
    }
    let promiseOrValue;
    try {
      promiseOrValue = config.fn();
    } catch (error) {
      promiseOrValue = Promise.reject(error);
    }
    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
      var _config$retry, _config$retryDelay;
      if (isResolved) {
        return;
      }
      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;
      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
      const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
      const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
      if (isRetryCancelled || !shouldRetry) {
        reject(error);
        return;
      }
      failureCount++;
      config.onFail == null ? void 0 : config.onFail(failureCount, error);
      sleep(delay).then(() => {
        if (shouldPause()) {
          return pause();
        }
        return;
      }).then(() => {
        if (isRetryCancelled) {
          reject(error);
        } else {
          run();
        }
      });
    });
  };
  if (canFetch(config.networkMode)) {
    run();
  } else {
    pause().then(run);
  }
  return {
    promise,
    cancel,
    continue: () => {
      const didContinue = continueFn == null ? void 0 : continueFn();
      return didContinue ? promise : Promise.resolve();
    },
    cancelRetry,
    continueRetry
  };
}

// node_modules/@tanstack/query-core/build/lib/logger.mjs
var defaultLogger = console;

// node_modules/@tanstack/query-core/build/lib/notifyManager.mjs
function createNotifyManager() {
  let queue = [];
  let transactions = 0;
  let notifyFn = (callback) => {
    callback();
  };
  let batchNotifyFn = (callback) => {
    callback();
  };
  const batch = (callback) => {
    let result;
    transactions++;
    try {
      result = callback();
    } finally {
      transactions--;
      if (!transactions) {
        flush();
      }
    }
    return result;
  };
  const schedule = (callback) => {
    if (transactions) {
      queue.push(callback);
    } else {
      scheduleMicrotask(() => {
        notifyFn(callback);
      });
    }
  };
  const batchCalls = (callback) => {
    return (...args) => {
      schedule(() => {
        callback(...args);
      });
    };
  };
  const flush = () => {
    const originalQueue = queue;
    queue = [];
    if (originalQueue.length) {
      scheduleMicrotask(() => {
        batchNotifyFn(() => {
          originalQueue.forEach((callback) => {
            notifyFn(callback);
          });
        });
      });
    }
  };
  const setNotifyFunction = (fn) => {
    notifyFn = fn;
  };
  const setBatchNotifyFunction = (fn) => {
    batchNotifyFn = fn;
  };
  return {
    batch,
    batchCalls,
    schedule,
    setNotifyFunction,
    setBatchNotifyFunction
  };
}
var notifyManager = createNotifyManager();

// node_modules/@tanstack/query-core/build/lib/removable.mjs
var Removable = class {
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout();
    if (isValidTimeout(this.cacheTime)) {
      this.gcTimeout = setTimeout(() => {
        this.optionalRemove();
      }, this.cacheTime);
    }
  }
  updateCacheTime(newCacheTime) {
    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1e3);
  }
  clearGcTimeout() {
    if (this.gcTimeout) {
      clearTimeout(this.gcTimeout);
      this.gcTimeout = void 0;
    }
  }
};

// node_modules/@tanstack/query-core/build/lib/query.mjs
var Query = class extends Removable {
  constructor(config) {
    super();
    this.abortSignalConsumed = false;
    this.defaultOptions = config.defaultOptions;
    this.setOptions(config.options);
    this.observers = [];
    this.cache = config.cache;
    this.logger = config.logger || defaultLogger;
    this.queryKey = config.queryKey;
    this.queryHash = config.queryHash;
    this.initialState = config.state || getDefaultState(this.options);
    this.state = this.initialState;
    this.scheduleGc();
  }
  get meta() {
    return this.options.meta;
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  optionalRemove() {
    if (!this.observers.length && this.state.fetchStatus === "idle") {
      this.cache.remove(this);
    }
  }
  setData(newData, options) {
    const data = replaceData(this.state.data, newData, this.options);
    this.dispatch({
      data,
      type: "success",
      dataUpdatedAt: options == null ? void 0 : options.updatedAt,
      manual: options == null ? void 0 : options.manual
    });
    return data;
  }
  setState(state, setStateOptions) {
    this.dispatch({
      type: "setState",
      state,
      setStateOptions
    });
  }
  cancel(options) {
    var _this$retryer;
    const promise = this.promise;
    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
    return promise ? promise.then(noop).catch(noop) : Promise.resolve();
  }
  destroy() {
    super.destroy();
    this.cancel({
      silent: true
    });
  }
  reset() {
    this.destroy();
    this.setState(this.initialState);
  }
  isActive() {
    return this.observers.some((observer) => observer.options.enabled !== false);
  }
  isDisabled() {
    return this.getObserversCount() > 0 && !this.isActive();
  }
  isStale() {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer) => observer.getCurrentResult().isStale);
  }
  isStaleByTime(staleTime = 0) {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
  }
  onFocus() {
    var _this$retryer2;
    const observer = this.observers.find((x2) => x2.shouldFetchOnWindowFocus());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
  }
  onOnline() {
    var _this$retryer3;
    const observer = this.observers.find((x2) => x2.shouldFetchOnReconnect());
    if (observer) {
      observer.refetch({
        cancelRefetch: false
      });
    }
    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.cache.notify({
        type: "observerAdded",
        query: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    if (this.observers.includes(observer)) {
      this.observers = this.observers.filter((x2) => x2 !== observer);
      if (!this.observers.length) {
        if (this.retryer) {
          if (this.abortSignalConsumed) {
            this.retryer.cancel({
              revert: true
            });
          } else {
            this.retryer.cancelRetry();
          }
        }
        this.scheduleGc();
      }
      this.cache.notify({
        type: "observerRemoved",
        query: this,
        observer
      });
    }
  }
  getObserversCount() {
    return this.observers.length;
  }
  invalidate() {
    if (!this.state.isInvalidated) {
      this.dispatch({
        type: "invalidate"
      });
    }
  }
  fetch(options, fetchOptions) {
    var _this$options$behavio, _context$fetchOptions;
    if (this.state.fetchStatus !== "idle") {
      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {
        this.cancel({
          silent: true
        });
      } else if (this.promise) {
        var _this$retryer4;
        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
        return this.promise;
      }
    }
    if (options) {
      this.setOptions(options);
    }
    if (!this.options.queryFn) {
      const observer = this.observers.find((x2) => x2.options.queryFn);
      if (observer) {
        this.setOptions(observer.options);
      }
    }
    if (true) {
      if (!Array.isArray(this.options.queryKey)) {
        this.logger.error("As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']");
      }
    }
    const abortController = getAbortController();
    const queryFnContext = {
      queryKey: this.queryKey,
      pageParam: void 0,
      meta: this.meta
    };
    const addSignalProperty = (object) => {
      Object.defineProperty(object, "signal", {
        enumerable: true,
        get: () => {
          if (abortController) {
            this.abortSignalConsumed = true;
            return abortController.signal;
          }
          return void 0;
        }
      });
    };
    addSignalProperty(queryFnContext);
    const fetchFn = () => {
      if (!this.options.queryFn) {
        return Promise.reject("Missing queryFn for queryKey '" + this.options.queryHash + "'");
      }
      this.abortSignalConsumed = false;
      return this.options.queryFn(queryFnContext);
    };
    const context = {
      fetchOptions,
      options: this.options,
      queryKey: this.queryKey,
      state: this.state,
      fetchFn
    };
    addSignalProperty(context);
    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context);
    this.revertState = this.state;
    if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
      var _context$fetchOptions2;
      this.dispatch({
        type: "fetch",
        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
      });
    }
    const onError = (error) => {
      if (!(isCancelledError(error) && error.silent)) {
        this.dispatch({
          type: "error",
          error
        });
      }
      if (!isCancelledError(error)) {
        var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;
        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);
        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);
        if (true) {
          this.logger.error(error);
        }
      }
      if (!this.isFetchingOptimistic) {
        this.scheduleGc();
      }
      this.isFetchingOptimistic = false;
    };
    this.retryer = createRetryer({
      fn: context.fetchFn,
      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),
      onSuccess: (data) => {
        var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;
        if (typeof data === "undefined") {
          if (true) {
            this.logger.error("Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: " + this.queryHash);
          }
          onError(new Error(this.queryHash + " data is undefined"));
          return;
        }
        this.setData(data);
        (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);
        (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);
        if (!this.isFetchingOptimistic) {
          this.scheduleGc();
        }
        this.isFetchingOptimistic = false;
      },
      onError,
      onFail: (failureCount, error) => {
        this.dispatch({
          type: "failed",
          failureCount,
          error
        });
      },
      onPause: () => {
        this.dispatch({
          type: "pause"
        });
      },
      onContinue: () => {
        this.dispatch({
          type: "continue"
        });
      },
      retry: context.options.retry,
      retryDelay: context.options.retryDelay,
      networkMode: context.options.networkMode
    });
    this.promise = this.retryer.promise;
    return this.promise;
  }
  dispatch(action) {
    const reducer = (state) => {
      var _action$meta, _action$dataUpdatedAt;
      switch (action.type) {
        case "failed":
          return {
            ...state,
            fetchFailureCount: action.failureCount,
            fetchFailureReason: action.error
          };
        case "pause":
          return {
            ...state,
            fetchStatus: "paused"
          };
        case "continue":
          return {
            ...state,
            fetchStatus: "fetching"
          };
        case "fetch":
          return {
            ...state,
            fetchFailureCount: 0,
            fetchFailureReason: null,
            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
            fetchStatus: canFetch(this.options.networkMode) ? "fetching" : "paused",
            ...!state.dataUpdatedAt && {
              error: null,
              status: "loading"
            }
          };
        case "success":
          return {
            ...state,
            data: action.data,
            dataUpdateCount: state.dataUpdateCount + 1,
            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
            error: null,
            isInvalidated: false,
            status: "success",
            ...!action.manual && {
              fetchStatus: "idle",
              fetchFailureCount: 0,
              fetchFailureReason: null
            }
          };
        case "error":
          const error = action.error;
          if (isCancelledError(error) && error.revert && this.revertState) {
            return {
              ...this.revertState,
              fetchStatus: "idle"
            };
          }
          return {
            ...state,
            error,
            errorUpdateCount: state.errorUpdateCount + 1,
            errorUpdatedAt: Date.now(),
            fetchFailureCount: state.fetchFailureCount + 1,
            fetchFailureReason: error,
            fetchStatus: "idle",
            status: "error"
          };
        case "invalidate":
          return {
            ...state,
            isInvalidated: true
          };
        case "setState":
          return {
            ...state,
            ...action.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onQueryUpdate(action);
      });
      this.cache.notify({
        query: this,
        type: "updated",
        action
      });
    });
  }
};
function getDefaultState(options) {
  const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
  const hasData = typeof data !== "undefined";
  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
  return {
    data,
    dataUpdateCount: 0,
    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
    error: null,
    errorUpdateCount: 0,
    errorUpdatedAt: 0,
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchMeta: null,
    isInvalidated: false,
    status: hasData ? "success" : "loading",
    fetchStatus: "idle"
  };
}

// node_modules/@tanstack/query-core/build/lib/queryCache.mjs
var QueryCache = class extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.queries = [];
    this.queriesMap = {};
  }
  build(client, options, state) {
    var _options$queryHash;
    const queryKey = options.queryKey;
    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
    let query = this.get(queryHash);
    if (!query) {
      query = new Query({
        cache: this,
        logger: client.getLogger(),
        queryKey,
        queryHash,
        options: client.defaultQueryOptions(options),
        state,
        defaultOptions: client.getQueryDefaults(queryKey)
      });
      this.add(query);
    }
    return query;
  }
  add(query) {
    if (!this.queriesMap[query.queryHash]) {
      this.queriesMap[query.queryHash] = query;
      this.queries.push(query);
      this.notify({
        type: "added",
        query
      });
    }
  }
  remove(query) {
    const queryInMap = this.queriesMap[query.queryHash];
    if (queryInMap) {
      query.destroy();
      this.queries = this.queries.filter((x2) => x2 !== query);
      if (queryInMap === query) {
        delete this.queriesMap[query.queryHash];
      }
      this.notify({
        type: "removed",
        query
      });
    }
  }
  clear() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        this.remove(query);
      });
    });
  }
  get(queryHash) {
    return this.queriesMap[queryHash];
  }
  getAll() {
    return this.queries;
  }
  find(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.queries.find((query) => matchQuery(filters, query));
  }
  findAll(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    return Object.keys(filters).length > 0 ? this.queries.filter((query) => matchQuery(filters, query)) : this.queries;
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  onFocus() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onFocus();
      });
    });
  }
  onOnline() {
    notifyManager.batch(() => {
      this.queries.forEach((query) => {
        query.onOnline();
      });
    });
  }
};

// node_modules/@tanstack/query-core/build/lib/mutation.mjs
var Mutation = class extends Removable {
  constructor(config) {
    super();
    this.defaultOptions = config.defaultOptions;
    this.mutationId = config.mutationId;
    this.mutationCache = config.mutationCache;
    this.logger = config.logger || defaultLogger;
    this.observers = [];
    this.state = config.state || getDefaultState2();
    this.setOptions(config.options);
    this.scheduleGc();
  }
  setOptions(options) {
    this.options = {
      ...this.defaultOptions,
      ...options
    };
    this.updateCacheTime(this.options.cacheTime);
  }
  get meta() {
    return this.options.meta;
  }
  setState(state) {
    this.dispatch({
      type: "setState",
      state
    });
  }
  addObserver(observer) {
    if (!this.observers.includes(observer)) {
      this.observers.push(observer);
      this.clearGcTimeout();
      this.mutationCache.notify({
        type: "observerAdded",
        mutation: this,
        observer
      });
    }
  }
  removeObserver(observer) {
    this.observers = this.observers.filter((x2) => x2 !== observer);
    this.scheduleGc();
    this.mutationCache.notify({
      type: "observerRemoved",
      mutation: this,
      observer
    });
  }
  optionalRemove() {
    if (!this.observers.length) {
      if (this.state.status === "loading") {
        this.scheduleGc();
      } else {
        this.mutationCache.remove(this);
      }
    }
  }
  continue() {
    var _this$retryer$continu, _this$retryer;
    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();
  }
  async execute() {
    const executeMutation = () => {
      var _this$options$retry;
      this.retryer = createRetryer({
        fn: () => {
          if (!this.options.mutationFn) {
            return Promise.reject("No mutationFn found");
          }
          return this.options.mutationFn(this.state.variables);
        },
        onFail: (failureCount, error) => {
          this.dispatch({
            type: "failed",
            failureCount,
            error
          });
        },
        onPause: () => {
          this.dispatch({
            type: "pause"
          });
        },
        onContinue: () => {
          this.dispatch({
            type: "continue"
          });
        },
        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
        retryDelay: this.options.retryDelay,
        networkMode: this.options.networkMode
      });
      return this.retryer.promise;
    };
    const restored = this.state.status === "loading";
    try {
      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;
      if (!restored) {
        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;
        this.dispatch({
          type: "loading",
          variables: this.options.variables
        });
        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));
        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));
        if (context !== this.state.context) {
          this.dispatch({
            type: "loading",
            context,
            variables: this.state.variables
          });
        }
      }
      const data = await executeMutation();
      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));
      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));
      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));
      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));
      this.dispatch({
        type: "success",
        data
      });
      return data;
    } catch (error) {
      try {
        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;
        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));
        if (true) {
          this.logger.error(error);
        }
        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));
        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, void 0, error, this.state.variables, this.state.context, this));
        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, error, this.state.variables, this.state.context));
        throw error;
      } finally {
        this.dispatch({
          type: "error",
          error
        });
      }
    }
  }
  dispatch(action) {
    const reducer = (state) => {
      switch (action.type) {
        case "failed":
          return {
            ...state,
            failureCount: action.failureCount,
            failureReason: action.error
          };
        case "pause":
          return {
            ...state,
            isPaused: true
          };
        case "continue":
          return {
            ...state,
            isPaused: false
          };
        case "loading":
          return {
            ...state,
            context: action.context,
            data: void 0,
            failureCount: 0,
            failureReason: null,
            error: null,
            isPaused: !canFetch(this.options.networkMode),
            status: "loading",
            variables: action.variables
          };
        case "success":
          return {
            ...state,
            data: action.data,
            failureCount: 0,
            failureReason: null,
            error: null,
            status: "success",
            isPaused: false
          };
        case "error":
          return {
            ...state,
            data: void 0,
            error: action.error,
            failureCount: state.failureCount + 1,
            failureReason: action.error,
            isPaused: false,
            status: "error"
          };
        case "setState":
          return {
            ...state,
            ...action.state
          };
      }
    };
    this.state = reducer(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onMutationUpdate(action);
      });
      this.mutationCache.notify({
        mutation: this,
        type: "updated",
        action
      });
    });
  }
};
function getDefaultState2() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    failureReason: null,
    isPaused: false,
    status: "idle",
    variables: void 0
  };
}

// node_modules/@tanstack/query-core/build/lib/mutationCache.mjs
var MutationCache = class extends Subscribable {
  constructor(config) {
    super();
    this.config = config || {};
    this.mutations = [];
    this.mutationId = 0;
  }
  build(client, options, state) {
    const mutation = new Mutation({
      mutationCache: this,
      logger: client.getLogger(),
      mutationId: ++this.mutationId,
      options: client.defaultMutationOptions(options),
      state,
      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0
    });
    this.add(mutation);
    return mutation;
  }
  add(mutation) {
    this.mutations.push(mutation);
    this.notify({
      type: "added",
      mutation
    });
  }
  remove(mutation) {
    this.mutations = this.mutations.filter((x2) => x2 !== mutation);
    this.notify({
      type: "removed",
      mutation
    });
  }
  clear() {
    notifyManager.batch(() => {
      this.mutations.forEach((mutation) => {
        this.remove(mutation);
      });
    });
  }
  getAll() {
    return this.mutations;
  }
  find(filters) {
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.mutations.find((mutation) => matchMutation(filters, mutation));
  }
  findAll(filters) {
    return this.mutations.filter((mutation) => matchMutation(filters, mutation));
  }
  notify(event) {
    notifyManager.batch(() => {
      this.listeners.forEach(({
        listener
      }) => {
        listener(event);
      });
    });
  }
  resumePausedMutations() {
    var _this$resuming;
    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {
      const pausedMutations = this.mutations.filter((x2) => x2.state.isPaused);
      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));
    }).then(() => {
      this.resuming = void 0;
    });
    return this.resuming;
  }
};

// node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs
function infiniteQueryBehavior() {
  return {
    onFetch: (context) => {
      context.fetchFn = () => {
        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
        let newPageParams = oldPageParams;
        let cancelled = false;
        const addSignalProperty = (object) => {
          Object.defineProperty(object, "signal", {
            enumerable: true,
            get: () => {
              var _context$signal;
              if ((_context$signal = context.signal) != null && _context$signal.aborted) {
                cancelled = true;
              } else {
                var _context$signal2;
                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener("abort", () => {
                  cancelled = true;
                });
              }
              return context.signal;
            }
          });
        };
        const queryFn = context.options.queryFn || (() => Promise.reject("Missing queryFn for queryKey '" + context.options.queryHash + "'"));
        const buildNewPages = (pages, param, page, previous) => {
          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];
          return previous ? [page, ...pages] : [...pages, page];
        };
        const fetchPage = (pages, manual, param, previous) => {
          if (cancelled) {
            return Promise.reject("Cancelled");
          }
          if (typeof param === "undefined" && !manual && pages.length) {
            return Promise.resolve(pages);
          }
          const queryFnContext = {
            queryKey: context.queryKey,
            pageParam: param,
            meta: context.options.meta
          };
          addSignalProperty(queryFnContext);
          const queryFnResult = queryFn(queryFnContext);
          const promise2 = Promise.resolve(queryFnResult).then((page) => buildNewPages(pages, param, page, previous));
          return promise2;
        };
        let promise;
        if (!oldPages.length) {
          promise = fetchPage([]);
        } else if (isFetchingNextPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param);
        } else if (isFetchingPreviousPage) {
          const manual = typeof pageParam !== "undefined";
          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param, true);
        } else {
          newPageParams = [];
          const manual = typeof context.options.getNextPageParam === "undefined";
          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
          for (let i2 = 1; i2 < oldPages.length; i2++) {
            promise = promise.then((pages) => {
              const shouldFetchNextPage = refetchPage && oldPages[i2] ? refetchPage(oldPages[i2], i2, oldPages) : true;
              if (shouldFetchNextPage) {
                const param = manual ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                return fetchPage(pages, manual, param);
              }
              return Promise.resolve(buildNewPages(pages, oldPageParams[i2], oldPages[i2]));
            });
          }
        }
        const finalPromise = promise.then((pages) => ({
          pages,
          pageParams: newPageParams
        }));
        return finalPromise;
      };
    }
  };
}
function getNextPageParam(options, pages) {
  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
}
function getPreviousPageParam(options, pages) {
  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
}
function hasNextPage(options, pages) {
  if (options.getNextPageParam && Array.isArray(pages)) {
    const nextPageParam = getNextPageParam(options, pages);
    return typeof nextPageParam !== "undefined" && nextPageParam !== null && nextPageParam !== false;
  }
  return;
}
function hasPreviousPage(options, pages) {
  if (options.getPreviousPageParam && Array.isArray(pages)) {
    const previousPageParam = getPreviousPageParam(options, pages);
    return typeof previousPageParam !== "undefined" && previousPageParam !== null && previousPageParam !== false;
  }
  return;
}

// node_modules/@tanstack/query-core/build/lib/queryClient.mjs
var QueryClient = class {
  constructor(config = {}) {
    this.queryCache = config.queryCache || new QueryCache();
    this.mutationCache = config.mutationCache || new MutationCache();
    this.logger = config.logger || defaultLogger;
    this.defaultOptions = config.defaultOptions || {};
    this.queryDefaults = [];
    this.mutationDefaults = [];
    this.mountCount = 0;
    if (config.logger) {
      this.logger.error("Passing a custom logger has been deprecated and will be removed in the next major version.");
    }
  }
  mount() {
    this.mountCount++;
    if (this.mountCount !== 1)
      return;
    this.unsubscribeFocus = focusManager.subscribe(() => {
      if (focusManager.isFocused()) {
        this.resumePausedMutations();
        this.queryCache.onFocus();
      }
    });
    this.unsubscribeOnline = onlineManager.subscribe(() => {
      if (onlineManager.isOnline()) {
        this.resumePausedMutations();
        this.queryCache.onOnline();
      }
    });
  }
  unmount() {
    var _this$unsubscribeFocu, _this$unsubscribeOnli;
    this.mountCount--;
    if (this.mountCount !== 0)
      return;
    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
    this.unsubscribeFocus = void 0;
    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
    this.unsubscribeOnline = void 0;
  }
  isFetching(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    filters.fetchStatus = "fetching";
    return this.queryCache.findAll(filters).length;
  }
  isMutating(filters) {
    return this.mutationCache.findAll({
      ...filters,
      fetching: true
    }).length;
  }
  getQueryData(queryKey, filters) {
    var _this$queryCache$find;
    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
  }
  ensureQueryData(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const cachedData = this.getQueryData(parsedOptions.queryKey);
    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);
  }
  getQueriesData(queryKeyOrFilters) {
    return this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey,
      state
    }) => {
      const data = state.data;
      return [queryKey, data];
    });
  }
  setQueryData(queryKey, updater, options) {
    const query = this.queryCache.find(queryKey);
    const prevData = query == null ? void 0 : query.state.data;
    const data = functionalUpdate(updater, prevData);
    if (typeof data === "undefined") {
      return void 0;
    }
    const parsedOptions = parseQueryArgs(queryKey);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    return this.queryCache.build(this, defaultedOptions).setData(data, {
      ...options,
      manual: true
    });
  }
  setQueriesData(queryKeyOrFilters, updater, options) {
    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({
      queryKey
    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));
  }
  getQueryState(queryKey, filters) {
    var _this$queryCache$find2;
    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
  }
  removeQueries(arg1, arg2) {
    const [filters] = parseFilterArgs(arg1, arg2);
    const queryCache = this.queryCache;
    notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        queryCache.remove(query);
      });
    });
  }
  resetQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const queryCache = this.queryCache;
    const refetchFilters = {
      type: "active",
      ...filters
    };
    return notifyManager.batch(() => {
      queryCache.findAll(filters).forEach((query) => {
        query.reset();
      });
      return this.refetchQueries(refetchFilters, options);
    });
  }
  cancelQueries(arg1, arg2, arg3) {
    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);
    if (typeof cancelOptions.revert === "undefined") {
      cancelOptions.revert = true;
    }
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map((query) => query.cancel(cancelOptions)));
    return Promise.all(promises).then(noop).catch(noop);
  }
  invalidateQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    return notifyManager.batch(() => {
      var _ref, _filters$refetchType;
      this.queryCache.findAll(filters).forEach((query) => {
        query.invalidate();
      });
      if (filters.refetchType === "none") {
        return Promise.resolve();
      }
      const refetchFilters = {
        ...filters,
        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : "active"
      };
      return this.refetchQueries(refetchFilters, options);
    });
  }
  refetchQueries(arg1, arg2, arg3) {
    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);
    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
      var _options$cancelRefetc;
      return query.fetch(void 0, {
        ...options,
        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,
        meta: {
          refetchPage: filters.refetchPage
        }
      });
    }));
    let promise = Promise.all(promises).then(noop);
    if (!(options != null && options.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  }
  fetchQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    const defaultedOptions = this.defaultQueryOptions(parsedOptions);
    if (typeof defaultedOptions.retry === "undefined") {
      defaultedOptions.retry = false;
    }
    const query = this.queryCache.build(this, defaultedOptions);
    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
  }
  prefetchQuery(arg1, arg2, arg3) {
    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);
  }
  fetchInfiniteQuery(arg1, arg2, arg3) {
    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    parsedOptions.behavior = infiniteQueryBehavior();
    return this.fetchQuery(parsedOptions);
  }
  prefetchInfiniteQuery(arg1, arg2, arg3) {
    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);
  }
  resumePausedMutations() {
    return this.mutationCache.resumePausedMutations();
  }
  getQueryCache() {
    return this.queryCache;
  }
  getMutationCache() {
    return this.mutationCache;
  }
  getLogger() {
    return this.logger;
  }
  getDefaultOptions() {
    return this.defaultOptions;
  }
  setDefaultOptions(options) {
    this.defaultOptions = options;
  }
  setQueryDefaults(queryKey, options) {
    const result = this.queryDefaults.find((x2) => hashQueryKey(queryKey) === hashQueryKey(x2.queryKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.queryDefaults.push({
        queryKey,
        defaultOptions: options
      });
    }
  }
  getQueryDefaults(queryKey) {
    if (!queryKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.queryDefaults.find((x2) => partialMatchKey(queryKey, x2.queryKey));
    if (true) {
      const matchingDefaults = this.queryDefaults.filter((x2) => partialMatchKey(queryKey, x2.queryKey));
      if (matchingDefaults.length > 1) {
        this.logger.error("[QueryClient] Several query defaults match with key '" + JSON.stringify(queryKey) + "'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.");
      }
    }
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  setMutationDefaults(mutationKey, options) {
    const result = this.mutationDefaults.find((x2) => hashQueryKey(mutationKey) === hashQueryKey(x2.mutationKey));
    if (result) {
      result.defaultOptions = options;
    } else {
      this.mutationDefaults.push({
        mutationKey,
        defaultOptions: options
      });
    }
  }
  getMutationDefaults(mutationKey) {
    if (!mutationKey) {
      return void 0;
    }
    const firstMatchingDefaults = this.mutationDefaults.find((x2) => partialMatchKey(mutationKey, x2.mutationKey));
    if (true) {
      const matchingDefaults = this.mutationDefaults.filter((x2) => partialMatchKey(mutationKey, x2.mutationKey));
      if (matchingDefaults.length > 1) {
        this.logger.error("[QueryClient] Several mutation defaults match with key '" + JSON.stringify(mutationKey) + "'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.");
      }
    }
    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;
  }
  defaultQueryOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    const defaultedOptions = {
      ...this.defaultOptions.queries,
      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),
      ...options,
      _defaulted: true
    };
    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
    }
    if (typeof defaultedOptions.refetchOnReconnect === "undefined") {
      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
    }
    if (typeof defaultedOptions.useErrorBoundary === "undefined") {
      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;
    }
    return defaultedOptions;
  }
  defaultMutationOptions(options) {
    if (options != null && options._defaulted) {
      return options;
    }
    return {
      ...this.defaultOptions.mutations,
      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),
      ...options,
      _defaulted: true
    };
  }
  clear() {
    this.queryCache.clear();
    this.mutationCache.clear();
  }
};

// node_modules/@tanstack/query-core/build/lib/queryObserver.mjs
var QueryObserver = class extends Subscribable {
  constructor(client, options) {
    super();
    this.client = client;
    this.options = options;
    this.trackedProps = /* @__PURE__ */ new Set();
    this.selectError = null;
    this.bindMethods();
    this.setOptions(options);
  }
  bindMethods() {
    this.remove = this.remove.bind(this);
    this.refetch = this.refetch.bind(this);
  }
  onSubscribe() {
    if (this.listeners.size === 1) {
      this.currentQuery.addObserver(this);
      if (shouldFetchOnMount(this.currentQuery, this.options)) {
        this.executeFetch();
      }
      this.updateTimers();
    }
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      this.destroy();
    }
  }
  shouldFetchOnReconnect() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);
  }
  shouldFetchOnWindowFocus() {
    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);
  }
  destroy() {
    this.listeners = /* @__PURE__ */ new Set();
    this.clearStaleTimeout();
    this.clearRefetchInterval();
    this.currentQuery.removeObserver(this);
  }
  setOptions(options, notifyOptions) {
    const prevOptions = this.options;
    const prevQuery = this.currentQuery;
    this.options = this.client.defaultQueryOptions(options);
    if (typeof (options == null ? void 0 : options.isDataEqual) !== "undefined") {
      this.client.getLogger().error("The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option");
    }
    if (!shallowEqualObjects(prevOptions, this.options)) {
      this.client.getQueryCache().notify({
        type: "observerOptionsUpdated",
        query: this.currentQuery,
        observer: this
      });
    }
    if (typeof this.options.enabled !== "undefined" && typeof this.options.enabled !== "boolean") {
      throw new Error("Expected enabled to be a boolean");
    }
    if (!this.options.queryKey) {
      this.options.queryKey = prevOptions.queryKey;
    }
    this.updateQuery();
    const mounted = this.hasListeners();
    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
      this.executeFetch();
    }
    this.updateResult(notifyOptions);
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
      this.updateStaleTimeout();
    }
    const nextRefetchInterval = this.computeRefetchInterval();
    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {
      this.updateRefetchInterval(nextRefetchInterval);
    }
  }
  getOptimisticResult(options) {
    const query = this.client.getQueryCache().build(this.client, options);
    const result = this.createResult(query, options);
    if (shouldAssignObserverCurrentProperties(this, result, options)) {
      this.currentResult = result;
      this.currentResultOptions = this.options;
      this.currentResultState = this.currentQuery.state;
    }
    return result;
  }
  getCurrentResult() {
    return this.currentResult;
  }
  trackResult(result) {
    const trackedResult = {};
    Object.keys(result).forEach((key) => {
      Object.defineProperty(trackedResult, key, {
        configurable: false,
        enumerable: true,
        get: () => {
          this.trackedProps.add(key);
          return result[key];
        }
      });
    });
    return trackedResult;
  }
  getCurrentQuery() {
    return this.currentQuery;
  }
  remove() {
    this.client.getQueryCache().remove(this.currentQuery);
  }
  refetch({
    refetchPage,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        refetchPage
      }
    });
  }
  fetchOptimistic(options) {
    const defaultedOptions = this.client.defaultQueryOptions(options);
    const query = this.client.getQueryCache().build(this.client, defaultedOptions);
    query.isFetchingOptimistic = true;
    return query.fetch().then(() => this.createResult(query, defaultedOptions));
  }
  fetch(fetchOptions) {
    var _fetchOptions$cancelR;
    return this.executeFetch({
      ...fetchOptions,
      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true
    }).then(() => {
      this.updateResult();
      return this.currentResult;
    });
  }
  executeFetch(fetchOptions) {
    this.updateQuery();
    let promise = this.currentQuery.fetch(this.options, fetchOptions);
    if (!(fetchOptions != null && fetchOptions.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  }
  updateStaleTimeout() {
    this.clearStaleTimeout();
    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {
      return;
    }
    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime);
    const timeout = time + 1;
    this.staleTimeoutId = setTimeout(() => {
      if (!this.currentResult.isStale) {
        this.updateResult();
      }
    }, timeout);
  }
  computeRefetchInterval() {
    var _this$options$refetch;
    return typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;
  }
  updateRefetchInterval(nextInterval) {
    this.clearRefetchInterval();
    this.currentRefetchInterval = nextInterval;
    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {
      return;
    }
    this.refetchIntervalId = setInterval(() => {
      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
        this.executeFetch();
      }
    }, this.currentRefetchInterval);
  }
  updateTimers() {
    this.updateStaleTimeout();
    this.updateRefetchInterval(this.computeRefetchInterval());
  }
  clearStaleTimeout() {
    if (this.staleTimeoutId) {
      clearTimeout(this.staleTimeoutId);
      this.staleTimeoutId = void 0;
    }
  }
  clearRefetchInterval() {
    if (this.refetchIntervalId) {
      clearInterval(this.refetchIntervalId);
      this.refetchIntervalId = void 0;
    }
  }
  createResult(query, options) {
    const prevQuery = this.currentQuery;
    const prevOptions = this.options;
    const prevResult = this.currentResult;
    const prevResultState = this.currentResultState;
    const prevResultOptions = this.currentResultOptions;
    const queryChange = query !== prevQuery;
    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
    const {
      state
    } = query;
    let {
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      fetchStatus,
      status
    } = state;
    let isPreviousData = false;
    let isPlaceholderData = false;
    let data;
    if (options._optimisticResults) {
      const mounted = this.hasListeners();
      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);
      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
      if (fetchOnMount || fetchOptionally) {
        fetchStatus = canFetch(query.options.networkMode) ? "fetching" : "paused";
        if (!dataUpdatedAt) {
          status = "loading";
        }
      }
      if (options._optimisticResults === "isRestoring") {
        fetchStatus = "idle";
      }
    }
    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== "error") {
      data = prevQueryResult.data;
      dataUpdatedAt = prevQueryResult.dataUpdatedAt;
      status = prevQueryResult.status;
      isPreviousData = true;
    } else if (options.select && typeof state.data !== "undefined") {
      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {
        data = this.selectResult;
      } else {
        try {
          this.selectFn = options.select;
          data = options.select(state.data);
          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);
          this.selectResult = data;
          this.selectError = null;
        } catch (selectError) {
          if (true) {
            this.client.getLogger().error(selectError);
          }
          this.selectError = selectError;
        }
      }
    } else {
      data = state.data;
    }
    if (typeof options.placeholderData !== "undefined" && typeof data === "undefined" && status === "loading") {
      let placeholderData;
      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
        placeholderData = prevResult.data;
      } else {
        placeholderData = typeof options.placeholderData === "function" ? options.placeholderData() : options.placeholderData;
        if (options.select && typeof placeholderData !== "undefined") {
          try {
            placeholderData = options.select(placeholderData);
            this.selectError = null;
          } catch (selectError) {
            if (true) {
              this.client.getLogger().error(selectError);
            }
            this.selectError = selectError;
          }
        }
      }
      if (typeof placeholderData !== "undefined") {
        status = "success";
        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);
        isPlaceholderData = true;
      }
    }
    if (this.selectError) {
      error = this.selectError;
      data = this.selectResult;
      errorUpdatedAt = Date.now();
      status = "error";
    }
    const isFetching = fetchStatus === "fetching";
    const isLoading = status === "loading";
    const isError2 = status === "error";
    const result = {
      status,
      fetchStatus,
      isLoading,
      isSuccess: status === "success",
      isError: isError2,
      isInitialLoading: isLoading && isFetching,
      data,
      dataUpdatedAt,
      error,
      errorUpdatedAt,
      failureCount: state.fetchFailureCount,
      failureReason: state.fetchFailureReason,
      errorUpdateCount: state.errorUpdateCount,
      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
      isFetching,
      isRefetching: isFetching && !isLoading,
      isLoadingError: isError2 && state.dataUpdatedAt === 0,
      isPaused: fetchStatus === "paused",
      isPlaceholderData,
      isPreviousData,
      isRefetchError: isError2 && state.dataUpdatedAt !== 0,
      isStale: isStale(query, options),
      refetch: this.refetch,
      remove: this.remove
    };
    return result;
  }
  updateResult(notifyOptions) {
    const prevResult = this.currentResult;
    const nextResult = this.createResult(this.currentQuery, this.options);
    this.currentResultState = this.currentQuery.state;
    this.currentResultOptions = this.options;
    if (shallowEqualObjects(nextResult, prevResult)) {
      return;
    }
    this.currentResult = nextResult;
    const defaultNotifyOptions = {
      cache: true
    };
    const shouldNotifyListeners = () => {
      if (!prevResult) {
        return true;
      }
      const {
        notifyOnChangeProps
      } = this.options;
      const notifyOnChangePropsValue = typeof notifyOnChangeProps === "function" ? notifyOnChangeProps() : notifyOnChangeProps;
      if (notifyOnChangePropsValue === "all" || !notifyOnChangePropsValue && !this.trackedProps.size) {
        return true;
      }
      const includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : this.trackedProps);
      if (this.options.useErrorBoundary) {
        includedProps.add("error");
      }
      return Object.keys(this.currentResult).some((key) => {
        const typedKey = key;
        const changed = this.currentResult[typedKey] !== prevResult[typedKey];
        return changed && includedProps.has(typedKey);
      });
    };
    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {
      defaultNotifyOptions.listeners = true;
    }
    this.notify({
      ...defaultNotifyOptions,
      ...notifyOptions
    });
  }
  updateQuery() {
    const query = this.client.getQueryCache().build(this.client, this.options);
    if (query === this.currentQuery) {
      return;
    }
    const prevQuery = this.currentQuery;
    this.currentQuery = query;
    this.currentQueryInitialState = query.state;
    this.previousQueryResult = this.currentResult;
    if (this.hasListeners()) {
      prevQuery == null ? void 0 : prevQuery.removeObserver(this);
      query.addObserver(this);
    }
  }
  onQueryUpdate(action) {
    const notifyOptions = {};
    if (action.type === "success") {
      notifyOptions.onSuccess = !action.manual;
    } else if (action.type === "error" && !isCancelledError(action.error)) {
      notifyOptions.onError = true;
    }
    this.updateResult(notifyOptions);
    if (this.hasListeners()) {
      this.updateTimers();
    }
  }
  notify(notifyOptions) {
    notifyManager.batch(() => {
      if (notifyOptions.onSuccess) {
        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;
        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);
        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);
      } else if (notifyOptions.onError) {
        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;
        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);
        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, void 0, this.currentResult.error);
      }
      if (notifyOptions.listeners) {
        this.listeners.forEach(({
          listener
        }) => {
          listener(this.currentResult);
        });
      }
      if (notifyOptions.cache) {
        this.client.getQueryCache().notify({
          query: this.currentQuery,
          type: "observerResultsUpdated"
        });
      }
    });
  }
};
function shouldLoadOnMount(query, options) {
  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === "error" && options.retryOnMount === false);
}
function shouldFetchOnMount(query, options) {
  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);
}
function shouldFetchOn(query, options, field) {
  if (options.enabled !== false) {
    const value = typeof field === "function" ? field(query) : field;
    return value === "always" || value !== false && isStale(query, options);
  }
  return false;
}
function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
}
function isStale(query, options) {
  return query.isStaleByTime(options.staleTime);
}
function shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {
  if (options.keepPreviousData) {
    return false;
  }
  if (options.placeholderData !== void 0) {
    return optimisticResult.isPlaceholderData;
  }
  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {
    return true;
  }
  return false;
}

// node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs
var InfiniteQueryObserver = class extends QueryObserver {
  // Type override
  // Type override
  // Type override
  // eslint-disable-next-line @typescript-eslint/no-useless-constructor
  constructor(client, options) {
    super(client, options);
  }
  bindMethods() {
    super.bindMethods();
    this.fetchNextPage = this.fetchNextPage.bind(this);
    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);
  }
  setOptions(options, notifyOptions) {
    super.setOptions({
      ...options,
      behavior: infiniteQueryBehavior()
    }, notifyOptions);
  }
  getOptimisticResult(options) {
    options.behavior = infiniteQueryBehavior();
    return super.getOptimisticResult(options);
  }
  fetchNextPage({
    pageParam,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        fetchMore: {
          direction: "forward",
          pageParam
        }
      }
    });
  }
  fetchPreviousPage({
    pageParam,
    ...options
  } = {}) {
    return this.fetch({
      ...options,
      meta: {
        fetchMore: {
          direction: "backward",
          pageParam
        }
      }
    });
  }
  createResult(query, options) {
    var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;
    const {
      state
    } = query;
    const result = super.createResult(query, options);
    const {
      isFetching,
      isRefetching
    } = result;
    const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === "forward";
    const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === "backward";
    return {
      ...result,
      fetchNextPage: this.fetchNextPage,
      fetchPreviousPage: this.fetchPreviousPage,
      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),
      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),
      isFetchingNextPage,
      isFetchingPreviousPage,
      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage
    };
  }
};

// node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs
var MutationObserver = class extends Subscribable {
  constructor(client, options) {
    super();
    this.client = client;
    this.setOptions(options);
    this.bindMethods();
    this.updateResult();
  }
  bindMethods() {
    this.mutate = this.mutate.bind(this);
    this.reset = this.reset.bind(this);
  }
  setOptions(options) {
    var _this$currentMutation;
    const prevOptions = this.options;
    this.options = this.client.defaultMutationOptions(options);
    if (!shallowEqualObjects(prevOptions, this.options)) {
      this.client.getMutationCache().notify({
        type: "observerOptionsUpdated",
        mutation: this.currentMutation,
        observer: this
      });
    }
    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$currentMutation2;
      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);
    }
  }
  onMutationUpdate(action) {
    this.updateResult();
    const notifyOptions = {
      listeners: true
    };
    if (action.type === "success") {
      notifyOptions.onSuccess = true;
    } else if (action.type === "error") {
      notifyOptions.onError = true;
    }
    this.notify(notifyOptions);
  }
  getCurrentResult() {
    return this.currentResult;
  }
  reset() {
    this.currentMutation = void 0;
    this.updateResult();
    this.notify({
      listeners: true
    });
  }
  mutate(variables, options) {
    this.mutateOptions = options;
    if (this.currentMutation) {
      this.currentMutation.removeObserver(this);
    }
    this.currentMutation = this.client.getMutationCache().build(this.client, {
      ...this.options,
      variables: typeof variables !== "undefined" ? variables : this.options.variables
    });
    this.currentMutation.addObserver(this);
    return this.currentMutation.execute();
  }
  updateResult() {
    const state = this.currentMutation ? this.currentMutation.state : getDefaultState2();
    const result = {
      ...state,
      isLoading: state.status === "loading",
      isSuccess: state.status === "success",
      isError: state.status === "error",
      isIdle: state.status === "idle",
      mutate: this.mutate,
      reset: this.reset
    };
    this.currentResult = result;
  }
  notify(options) {
    notifyManager.batch(() => {
      if (this.mutateOptions && this.hasListeners()) {
        if (options.onSuccess) {
          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;
          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);
          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);
        } else if (options.onError) {
          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;
          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);
          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, void 0, this.currentResult.error, this.currentResult.variables, this.currentResult.context);
        }
      }
      if (options.listeners) {
        this.listeners.forEach(({
          listener
        }) => {
          listener(this.currentResult);
        });
      }
    });
  }
};

// node_modules/@tanstack/react-query/build/lib/reactBatchedUpdates.mjs
var ReactDOM = __toESM(require_react_dom(), 1);
var unstable_batchedUpdates2 = ReactDOM.unstable_batchedUpdates;

// node_modules/@tanstack/react-query/build/lib/setBatchUpdatesFn.mjs
notifyManager.setBatchNotifyFunction(unstable_batchedUpdates2);

// node_modules/@tanstack/react-query/build/lib/useQueries.mjs
var React5 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs
var import_shim = __toESM(require_shim(), 1);
var useSyncExternalStore = import_shim.useSyncExternalStore;

// node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs
var React = __toESM(require_react(), 1);
var defaultContext = React.createContext(void 0);
var QueryClientSharingContext = React.createContext(false);
function getQueryClientContext(context, contextSharing) {
  if (context) {
    return context;
  }
  if (contextSharing && typeof window !== "undefined") {
    if (!window.ReactQueryClientContext) {
      window.ReactQueryClientContext = defaultContext;
    }
    return window.ReactQueryClientContext;
  }
  return defaultContext;
}
var useQueryClient = ({
  context
} = {}) => {
  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));
  if (!queryClient) {
    throw new Error("No QueryClient set, use QueryClientProvider to set one");
  }
  return queryClient;
};
var QueryClientProvider = ({
  client,
  children,
  context,
  contextSharing = false
}) => {
  React.useEffect(() => {
    client.mount();
    return () => {
      client.unmount();
    };
  }, [client]);
  if (contextSharing) {
    client.getLogger().error("The contextSharing option has been deprecated and will be removed in the next major version");
  }
  const Context = getQueryClientContext(context, contextSharing);
  return React.createElement(QueryClientSharingContext.Provider, {
    value: !context && contextSharing
  }, React.createElement(Context.Provider, {
    value: client
  }, children));
};

// node_modules/@tanstack/react-query/build/lib/isRestoring.mjs
var React2 = __toESM(require_react(), 1);
var IsRestoringContext = React2.createContext(false);
var useIsRestoring = () => React2.useContext(IsRestoringContext);
var IsRestoringProvider = IsRestoringContext.Provider;

// node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs
var React3 = __toESM(require_react(), 1);
function createValue() {
  let isReset = false;
  return {
    clearReset: () => {
      isReset = false;
    },
    reset: () => {
      isReset = true;
    },
    isReset: () => {
      return isReset;
    }
  };
}
var QueryErrorResetBoundaryContext = React3.createContext(createValue());
var useQueryErrorResetBoundary = () => React3.useContext(QueryErrorResetBoundaryContext);

// node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs
var React4 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/utils.mjs
function shouldThrowError(_useErrorBoundary, params) {
  if (typeof _useErrorBoundary === "function") {
    return _useErrorBoundary(...params);
  }
  return !!_useErrorBoundary;
}

// node_modules/@tanstack/react-query/build/lib/errorBoundaryUtils.mjs
var ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {
  if (options.suspense || options.useErrorBoundary) {
    if (!errorResetBoundary.isReset()) {
      options.retryOnMount = false;
    }
  }
};
var useClearResetErrorBoundary = (errorResetBoundary) => {
  React4.useEffect(() => {
    errorResetBoundary.clearReset();
  }, [errorResetBoundary]);
};
var getHasError = ({
  result,
  errorResetBoundary,
  useErrorBoundary,
  query
}) => {
  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(useErrorBoundary, [result.error, query]);
};

// node_modules/@tanstack/react-query/build/lib/suspense.mjs
var ensureStaleTime = (defaultedOptions) => {
  if (defaultedOptions.suspense) {
    if (typeof defaultedOptions.staleTime !== "number") {
      defaultedOptions.staleTime = 1e3;
    }
  }
};
var willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;
var shouldSuspend = (defaultedOptions, result, isRestoring) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && willFetch(result, isRestoring);
var fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).then(({
  data
}) => {
  defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);
  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);
}).catch((error) => {
  errorResetBoundary.clearReset();
  defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);
  defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(void 0, error);
});

// node_modules/@tanstack/react-query/build/lib/useBaseQuery.mjs
var React6 = __toESM(require_react(), 1);
function useBaseQuery(options, Observer) {
  const queryClient = useQueryClient({
    context: options.context
  });
  const isRestoring = useIsRestoring();
  const errorResetBoundary = useQueryErrorResetBoundary();
  const defaultedOptions = queryClient.defaultQueryOptions(options);
  defaultedOptions._optimisticResults = isRestoring ? "isRestoring" : "optimistic";
  if (defaultedOptions.onError) {
    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);
  }
  if (defaultedOptions.onSuccess) {
    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);
  }
  if (defaultedOptions.onSettled) {
    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);
  }
  ensureStaleTime(defaultedOptions);
  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);
  useClearResetErrorBoundary(errorResetBoundary);
  const [observer] = React6.useState(() => new Observer(queryClient, defaultedOptions));
  const result = observer.getOptimisticResult(defaultedOptions);
  useSyncExternalStore(React6.useCallback((onStoreChange) => {
    const unsubscribe = isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange));
    observer.updateResult();
    return unsubscribe;
  }, [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());
  React6.useEffect(() => {
    observer.setOptions(defaultedOptions, {
      listeners: false
    });
  }, [defaultedOptions, observer]);
  if (shouldSuspend(defaultedOptions, result, isRestoring)) {
    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);
  }
  if (getHasError({
    result,
    errorResetBoundary,
    useErrorBoundary: defaultedOptions.useErrorBoundary,
    query: observer.getCurrentQuery()
  })) {
    throw result.error;
  }
  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
}

// node_modules/@tanstack/react-query/build/lib/useQuery.mjs
function useQuery(arg1, arg2, arg3) {
  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);
  return useBaseQuery(parsedOptions, QueryObserver);
}

// node_modules/@tanstack/react-query/build/lib/Hydrate.mjs
var React7 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useIsFetching.mjs
var React8 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useIsMutating.mjs
var React9 = __toESM(require_react(), 1);

// node_modules/@tanstack/react-query/build/lib/useMutation.mjs
var React10 = __toESM(require_react(), 1);
function useMutation(arg1, arg2, arg3) {
  const options = parseMutationArgs(arg1, arg2, arg3);
  const queryClient = useQueryClient({
    context: options.context
  });
  const [observer] = React10.useState(() => new MutationObserver(queryClient, options));
  React10.useEffect(() => {
    observer.setOptions(options);
  }, [observer, options]);
  const result = useSyncExternalStore(React10.useCallback((onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());
  const mutate = React10.useCallback((variables, mutateOptions) => {
    observer.mutate(variables, mutateOptions).catch(noop2);
  }, [observer]);
  if (result.error && shouldThrowError(observer.options.useErrorBoundary, [result.error])) {
    throw result.error;
  }
  return {
    ...result,
    mutate,
    mutateAsync: result.mutate
  };
}
function noop2() {
}

// node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs
function useInfiniteQuery(arg1, arg2, arg3) {
  const options = parseQueryArgs(arg1, arg2, arg3);
  return useBaseQuery(options, InfiniteQueryObserver);
}

// node_modules/@refinedev/core/dist/index.mjs
var import_react3 = __toESM(require_react(), 1);
var import_qs = __toESM(require_lib(), 1);
var import_warn_once = __toESM(require_warn_once(), 1);
var import_pluralize = __toESM(require_pluralize(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_pluralize2 = __toESM(require_pluralize(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var import_react10 = __toESM(require_react(), 1);
var import_react11 = __toESM(require_react(), 1);
var import_react12 = __toESM(require_react(), 1);
var import_react13 = __toESM(require_react(), 1);
var import_qs2 = __toESM(require_lib(), 1);
var import_react14 = __toESM(require_react(), 1);
var import_qs3 = __toESM(require_lib(), 1);
var import_react15 = __toESM(require_react(), 1);
var import_react16 = __toESM(require_react(), 1);
var import_react17 = __toESM(require_react(), 1);
var import_react18 = __toESM(require_react(), 1);
var import_react19 = __toESM(require_react(), 1);
var import_react20 = __toESM(require_react(), 1);
var import_react21 = __toESM(require_react(), 1);
var import_react22 = __toESM(require_react(), 1);
var import_react23 = __toESM(require_react(), 1);
var import_react24 = __toESM(require_react(), 1);
var import_react25 = __toESM(require_react(), 1);
var import_react26 = __toESM(require_react(), 1);
var import_react27 = __toESM(require_react(), 1);
var import_react28 = __toESM(require_react(), 1);
var import_react29 = __toESM(require_react(), 1);
var import_react30 = __toESM(require_react(), 1);
var import_react31 = __toESM(require_react(), 1);
var import_react32 = __toESM(require_react(), 1);
var import_react33 = __toESM(require_react(), 1);
var import_react34 = __toESM(require_react(), 1);
var import_react35 = __toESM(require_react(), 1);
var import_react36 = __toESM(require_react(), 1);
var import_react37 = __toESM(require_react(), 1);
var import_react38 = __toESM(require_react(), 1);
var import_react39 = __toESM(require_react(), 1);
var import_react40 = __toESM(require_react(), 1);
var import_react41 = __toESM(require_react(), 1);
var import_react42 = __toESM(require_react(), 1);
var import_papaparse = __toESM(require_papaparse_min(), 1);
var import_warn_once2 = __toESM(require_warn_once(), 1);
var import_react43 = __toESM(require_react(), 1);
var import_warn_once3 = __toESM(require_warn_once(), 1);
var import_react44 = __toESM(require_react(), 1);
var import_react45 = __toESM(require_react(), 1);
var import_react46 = __toESM(require_react(), 1);
var import_react47 = __toESM(require_react(), 1);
var import_warn_once4 = __toESM(require_warn_once(), 1);
var import_react48 = __toESM(require_react(), 1);
var import_papaparse2 = __toESM(require_papaparse_min(), 1);
var import_react49 = __toESM(require_react(), 1);
var import_react50 = __toESM(require_react(), 1);
var import_react51 = __toESM(require_react(), 1);
var import_react52 = __toESM(require_react(), 1);
var import_react53 = __toESM(require_react(), 1);
var import_react54 = __toESM(require_react(), 1);
var import_react55 = __toESM(require_react(), 1);
var import_react56 = __toESM(require_react(), 1);
var import_react57 = __toESM(require_react(), 1);
var import_qs4 = __toESM(require_lib(), 1);
var import_warn_once5 = __toESM(require_warn_once(), 1);
var import_react58 = __toESM(require_react(), 1);
var import_react59 = __toESM(require_react(), 1);
var import_react60 = __toESM(require_react(), 1);
var import_react61 = __toESM(require_react(), 1);
var import_warn_once6 = __toESM(require_warn_once(), 1);
var import_react62 = __toESM(require_react(), 1);
var import_react63 = __toESM(require_react(), 1);
var import_react64 = __toESM(require_react(), 1);
var import_react65 = __toESM(require_react(), 1);
var import_react66 = __toESM(require_react(), 1);
var import_react67 = __toESM(require_react(), 1);
var import_react68 = __toESM(require_react(), 1);
var import_react69 = __toESM(require_react(), 1);
var import_react70 = __toESM(require_react(), 1);
var import_react71 = __toESM(require_react(), 1);
var import_react72 = __toESM(require_react(), 1);
var import_react73 = __toESM(require_react(), 1);
var import_react74 = __toESM(require_react(), 1);
var import_react75 = __toESM(require_react(), 1);
var import_react76 = __toESM(require_react(), 1);
var import_react77 = __toESM(require_react(), 1);
var import_react78 = __toESM(require_react(), 1);
var import_react79 = __toESM(require_react(), 1);
var import_react80 = __toESM(require_react(), 1);
var import_react81 = __toESM(require_react(), 1);
var import_react82 = __toESM(require_react(), 1);
var import_react83 = __toESM(require_react(), 1);
var import_react84 = __toESM(require_react(), 1);
var import_react85 = __toESM(require_react(), 1);
var import_react86 = __toESM(require_react(), 1);
var import_react87 = __toESM(require_react(), 1);
var Ks = Object.defineProperty;
var o = (e, t) => Ks(e, "name", { value: t, configurable: true });
var Eo = import_react3.default.createContext({});
var Mo = o(({ children: e, isProvided: t, ...r }) => {
  let { replace: n } = ce(), s = o(async (d3) => {
    var u;
    try {
      return await ((u = r.login) == null ? void 0 : u.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "loginFunc"), a = o(async (d3) => {
    var u;
    try {
      return await ((u = r.register) == null ? void 0 : u.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "registerFunc"), i2 = o(async (d3) => {
    var u;
    try {
      return await ((u = r.logout) == null ? void 0 : u.call(r, d3));
    } catch (p3) {
      return Promise.reject(p3);
    }
  }, "logoutFunc"), c = o(async (d3) => {
    var u;
    try {
      return await ((u = r.checkAuth) == null ? void 0 : u.call(r, d3)), Promise.resolve();
    } catch (p3) {
      return p3 != null && p3.redirectPath && n(p3.redirectPath), Promise.reject(p3);
    }
  }, "checkAuthFunc");
  return import_react3.default.createElement(Eo.Provider, { value: { ...r, login: s, logout: i2, checkAuth: c, register: a, isProvided: t } }, e);
}, "LegacyAuthContextProvider");
var wo = import_react3.default.createContext({});
var Io = o(({ children: e, isProvided: t, ...r }) => {
  let n = o(async (u) => {
    var p3;
    try {
      return await ((p3 = r.login) == null ? void 0 : p3.call(r, u));
    } catch (l2) {
      return console.warn("Unhandled Error in login: refine always expects a resolved promise.", l2), Promise.reject(l2);
    }
  }, "handleLogin"), s = o(async (u) => {
    var p3;
    try {
      return await ((p3 = r.register) == null ? void 0 : p3.call(r, u));
    } catch (l2) {
      return console.warn("Unhandled Error in register: refine always expects a resolved promise.", l2), Promise.reject(l2);
    }
  }, "handleRegister"), a = o(async (u) => {
    var p3;
    try {
      return await ((p3 = r.logout) == null ? void 0 : p3.call(r, u));
    } catch (l2) {
      return console.warn("Unhandled Error in logout: refine always expects a resolved promise.", l2), Promise.reject(l2);
    }
  }, "handleLogout"), i2 = o(async (u) => {
    var p3;
    try {
      let l2 = await ((p3 = r.check) == null ? void 0 : p3.call(r, u));
      return Promise.resolve(l2);
    } catch (l2) {
      return console.warn("Unhandled Error in check: refine always expects a resolved promise.", l2), Promise.reject(l2);
    }
  }, "handleCheck"), c = o(async (u) => {
    var p3;
    try {
      let l2 = await ((p3 = r.forgotPassword) == null ? void 0 : p3.call(r, u));
      return Promise.resolve(l2);
    } catch (l2) {
      return console.warn("Unhandled Error in forgotPassword: refine always expects a resolved promise.", l2), Promise.reject(l2);
    }
  }, "handleForgotPassword"), d3 = o(async (u) => {
    var p3;
    try {
      let l2 = await ((p3 = r.updatePassword) == null ? void 0 : p3.call(r, u));
      return Promise.resolve(l2);
    } catch (l2) {
      return console.warn("Unhandled Error in updatePassword: refine always expects a resolved promise.", l2), Promise.reject(l2);
    }
  }, "handleUpdatePassword");
  return import_react3.default.createElement(wo.Provider, { value: { ...r, login: n, logout: a, check: i2, register: s, forgotPassword: c, updatePassword: d3, isProvided: t } }, e);
}, "AuthBindingsContextProvider");
var ue = o(() => import_react3.default.useContext(Eo), "useLegacyAuthContext");
var fe = o(() => import_react3.default.useContext(wo), "useAuthBindingsContext");
var Mt = o((e) => e / 1e3, "userFriendlySecond");
var Ht = o((e, t = (r) => r) => {
  let [r, ...n] = e;
  return n.map((s) => fromPairs_default(zip_default(r, s))).map((s, a, i2) => t.call(void 0, s, a, i2));
}, "importCSVMapper");
var $t = o((e = "", t) => {
  let r = wt(e);
  return t === "singular" ? import_pluralize.default.singular(r) : import_pluralize.default.plural(r);
}, "userFriendlyResourceName");
var Fo = o((e = {}) => e != null && e.id ? { ...e, id: decodeURIComponent(e.id) } : e, "handleUseParams");
function Ze(e, t) {
  return e.findIndex((r, n) => n <= e.length - t.length && t.every((s, a) => e[n + a] === s));
}
o(Ze, "arrayFindIndex");
function $s(e) {
  if (e[0] === "data") {
    let t = e.slice(1);
    if (t[2] === "many")
      t[2] = "getMany";
    else if (t[2] === "infinite")
      t[2] = "list";
    else if (t[2] === "one")
      t[2] = "detail";
    else if (t[1] === "custom") {
      let r = { ...t[2] };
      return delete r.method, delete r.url, [t[0], t[1], t[2].method, t[2].url, r];
    }
    return t;
  }
  if (e[0] === "audit" && e[2] === "list")
    return ["logList", e[1], e[3]];
  if (e[0] === "access" && e.length === 4)
    return ["useCan", { resource: e[1], action: e[2], ...e[3] }];
  if (e[0] === "auth") {
    if (Ze(e, ["auth", "login"]) !== -1)
      return ["useLogin"];
    if (Ze(e, ["auth", "logout"]) !== -1)
      return ["useLogout"];
    if (Ze(e, ["auth", "identity"]) !== -1)
      return ["getUserIdentity"];
    if (Ze(e, ["auth", "register"]) !== -1)
      return ["useRegister"];
    if (Ze(e, ["auth", "forgotPassword"]) !== -1)
      return ["useForgotPassword"];
    if (Ze(e, ["auth", "check"]) !== -1)
      return ["useAuthenticated", e[2]];
    if (Ze(e, ["auth", "onError"]) !== -1)
      return ["useCheckError"];
    if (Ze(e, ["auth", "permissions"]) !== -1)
      return ["usePermissions"];
    if (Ze(e, ["auth", "updatePassword"]) !== -1)
      return ["useUpdatePassword"];
  }
  return e;
}
o($s, "convertToLegacy");
var Ue = class {
  constructor(t = []) {
    this.segments = [];
    this.segments = t;
  }
  key() {
    return this.segments;
  }
  legacy() {
    return $s(this.segments);
  }
  get(t) {
    return t ? this.legacy() : this.segments;
  }
};
o(Ue, "BaseKeyBuilder");
var $e = class extends Ue {
  params(t) {
    return new Ue([...this.segments, t]);
  }
};
o($e, "ParamsKeyBuilder");
var Wt = class extends Ue {
  id(t) {
    return new $e([...this.segments, t ? String(t) : void 0]);
  }
};
o(Wt, "DataIdRequiringKeyBuilder");
var Ot = class extends Ue {
  ids(...t) {
    return new $e([...this.segments, ...t.length ? [t.map((r) => String(r))] : []]);
  }
};
o(Ot, "DataIdsRequiringKeyBuilder");
var zt = class extends Ue {
  action(t) {
    if (t === "one")
      return new Wt([...this.segments, t]);
    if (t === "many")
      return new Ot([...this.segments, t]);
    if (["list", "infinite"].includes(t))
      return new $e([...this.segments, t]);
    throw new Error("Invalid action type");
  }
};
o(zt, "DataResourceKeyBuilder");
var _t = class extends Ue {
  resource(t) {
    return new zt([...this.segments, t]);
  }
  mutation(t) {
    return new $e([...t === "custom" ? this.segments : [this.segments[0]], t]);
  }
};
o(_t, "DataKeyBuilder");
var jt = class extends Ue {
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(jt, "AuthKeyBuilder");
var Xt = class extends Ue {
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(Xt, "AccessResourceKeyBuilder");
var Zt = class extends Ue {
  resource(t) {
    return new Xt([...this.segments, t]);
  }
};
o(Zt, "AccessKeyBuilder");
var Yt = class extends Ue {
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(Yt, "AuditActionKeyBuilder");
var Jt = class extends Ue {
  resource(t) {
    return new Yt([...this.segments, t]);
  }
  action(t) {
    return new $e([...this.segments, t]);
  }
};
o(Jt, "AuditKeyBuilder");
var Tt = class extends Ue {
  data(t) {
    return new _t(["data", t || "default"]);
  }
  auth() {
    return new jt(["auth"]);
  }
  access() {
    return new Zt(["access"]);
  }
  audit() {
    return new Jt(["audit"]);
  }
};
o(Tt, "KeyBuilder");
var We = o(() => new Tt([]), "keys");
var F = o((...e) => e.find((t) => typeof t < "u"), "pickNotDeprecated");
var Ao = o((e, t, r, n) => {
  let s = t || "default", a = { all: [s], resourceAll: [s, e || ""], list: (i2) => [...a.resourceAll, "list", { ...i2, ...F(r, n) || {} }], many: (i2) => [...a.resourceAll, "getMany", i2 == null ? void 0 : i2.map(String), { ...F(r, n) || {} }].filter((c) => c !== void 0), detail: (i2) => [...a.resourceAll, "detail", i2 == null ? void 0 : i2.toString(), { ...F(r, n) || {} }], logList: (i2) => ["logList", e, i2, n].filter((c) => c !== void 0) };
  return a;
}, "queryKeys");
var Ye = o((e) => (t, r, n, s) => {
  let a = r || "default";
  return { all: We().data(a).get(e), resourceAll: We().data(r).resource(t ?? "").get(e), list: (c) => We().data(r).resource(t ?? "").action("list").params({ ...c, ...F(n, s) || {} }).get(e), many: (c) => We().data(r).resource(t ?? "").action("many").ids(...c ?? []).params({ ...F(n, s) || {} }).get(e), detail: (c) => We().data(r).resource(t ?? "").action("one").id(c ?? "").params({ ...F(n, s) || {} }).get(e), logList: (c) => [...We().audit().resource(t).action("list").params(c).get(e), s].filter((d3) => d3 !== void 0) };
}, "queryKeysReplacement");
var Sr = o((e, t) => !e || !t ? false : !!e.find((r) => r === t), "hasPermission");
var xt = o((e) => e.startsWith(":"), "isParameter");
var ze = o((e) => e.split("/").filter((r) => r !== ""), "splitToSegments");
var ko = o((e, t) => {
  let r = ze(e), n = ze(t);
  return r.length === n.length;
}, "isSegmentCountsSame");
var be = o((e) => e.replace(/^\/|\/$/g, ""), "removeLeadingTrailingSlashes");
var Qo = o((e, t) => {
  let r = be(e), n = be(t);
  if (!ko(r, n))
    return false;
  let s = ze(r);
  return ze(n).every((i2, c) => xt(i2) || i2 === s[c]);
}, "checkBySegments");
var Vo = o((e, t, r) => {
  let n = be(r || ""), s = `${n}${n ? "/" : ""}${e}`;
  return t === "list" ? s = `${s}` : t === "create" ? s = `${s}/create` : t === "edit" ? s = `${s}/edit/:id` : t === "show" ? s = `${s}/show/:id` : t === "clone" && (s = `${s}/clone/:id`), `/${s.replace(/^\//, "")}`;
}, "getDefaultActionPath");
var Fe = o((e, t) => {
  var s, a;
  let r = F((s = e.meta) == null ? void 0 : s.parent, (a = e.options) == null ? void 0 : a.parent, e.parentName);
  return r ? t.find((i2) => (i2.identifier ?? i2.name) === r) ?? { name: r } : void 0;
}, "getParentResource");
var It = o((e, t, r) => {
  let n = [], s = Fe(e, t);
  for (; s; )
    n.push(s), s = Fe(s, t);
  if (n.length !== 0)
    return `/${n.reverse().map((a) => {
      var c;
      let i2 = r ? ((c = a.options) == null ? void 0 : c.route) ?? a.name : a.name;
      return be(i2);
    }).join("/")}`;
}, "getParentPrefixForResource");
var he = o((e, t, r) => {
  let n = [], s = ["list", "show", "edit", "create", "clone"], a = It(e, t, r);
  return s.forEach((i2) => {
    var u, p3;
    let c = r && i2 === "clone" ? e.create : e[i2], d3;
    typeof c == "function" || r ? d3 = Vo(r ? ((u = e.meta) == null ? void 0 : u.route) ?? ((p3 = e.options) == null ? void 0 : p3.route) ?? e.name : e.name, i2, r ? a : void 0) : typeof c == "string" ? d3 = c : typeof c == "object" && (d3 = c.path), d3 && n.push({ action: i2, resource: e, route: `/${d3.replace(/^\//, "")}` });
  }), n;
}, "getActionRoutesFromResource");
var Bo = o((e) => {
  var s;
  if (e.length === 0)
    return;
  if (e.length === 1)
    return e[0];
  let t = e.map((a) => ({ ...a, splitted: ze(be(a.route)) })), r = ((s = t[0]) == null ? void 0 : s.splitted.length) ?? 0, n = [...t];
  for (let a = 0; a < r; a++) {
    let i2 = n.filter((c) => !xt(c.splitted[a]));
    if (i2.length !== 0) {
      if (i2.length === 1) {
        n = i2;
        break;
      }
      n = i2;
    }
  }
  return n[0];
}, "pickMatchedRoute");
var No = o((e, t) => {
  let n = t.flatMap((a) => he(a, t)).filter((a) => Qo(e, a.route)), s = Bo(n);
  return { found: !!s, resource: s == null ? void 0 : s.resource, action: s == null ? void 0 : s.action, matchedRoute: s == null ? void 0 : s.route };
}, "matchResourceFromRoute");
var qt = o((e, t) => {
  var s;
  let r, n = It(e, t, true);
  if (n) {
    let a = F(e.meta, e.options);
    r = `${n}/${(a == null ? void 0 : a.route) ?? e.name}`;
  } else
    r = ((s = e.options) == null ? void 0 : s.route) ?? e.name;
  return `/${r.replace(/^\//, "")}`;
}, "routeGenerator");
var Ko = o((e) => {
  var i2;
  let t = [], r = {}, n = {}, s, a;
  for (let c = 0; c < e.length; c++) {
    s = e[c];
    let d3 = s.route ?? ((i2 = F(s == null ? void 0 : s.meta, s.options)) == null ? void 0 : i2.route) ?? "";
    r[d3] = s, r[d3].children = [], n[s.name] = s, n[s.name].children = [];
  }
  for (let c in r)
    Object.hasOwn(r, c) && (a = r[c], a.parentName && n[a.parentName] ? n[a.parentName].children.push(a) : t.push(a));
  return t;
}, "createTreeView");
var wt = o((e) => (e = e.replace(/([a-z]{1})([A-Z]{1})/g, "$1-$2"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, "$1-$2$3"), e = e.toLowerCase().replace(/[_-]+/g, " ").replace(/\s{2,}/g, " ").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e), "humanizeString");
var Fr = o(({ children: e }) => import_react5.default.createElement("div", null, e), "DefaultLayout");
var Ee = { mutationMode: "pessimistic", syncWithLocation: false, undoableTimeout: 5e3, warnWhenUnsavedChanges: false, liveMode: "off", redirect: { afterCreate: "list", afterClone: "list", afterEdit: "list" }, overtime: { interval: 1e3 }, textTransformers: { humanize: wt, plural: import_pluralize2.default.plural, singular: import_pluralize2.default.singular }, disableServerSideValidation: false };
var ve = import_react4.default.createContext({ hasDashboard: false, mutationMode: "pessimistic", warnWhenUnsavedChanges: false, syncWithLocation: false, undoableTimeout: 5e3, Title: void 0, Sider: void 0, Header: void 0, Footer: void 0, Layout: Fr, OffLayoutArea: void 0, liveMode: "off", onLiveEvent: void 0, options: Ee });
var $o = o(({ hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: n, undoableTimeout: s, children: a, DashboardPage: i2, Title: c, Layout: d3 = Fr, Header: u, Sider: p3, Footer: l2, OffLayoutArea: y2, LoginPage: f2 = Ar, catchAll: T2, liveMode: U = "off", onLiveEvent: D, options: g2 }) => import_react4.default.createElement(ve.Provider, { value: { __initialized: true, hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: n, Title: c, undoableTimeout: s, Layout: d3, Header: u, Sider: p3, Footer: l2, OffLayoutArea: y2, DashboardPage: i2, LoginPage: f2, catchAll: T2, liveMode: U, onLiveEvent: D, options: g2 } }, a), "RefineContextProvider");
var kr = o(({ options: e, disableTelemetry: t, liveMode: r, mutationMode: n, reactQueryClientConfig: s, reactQueryDevtoolConfig: a, syncWithLocation: i2, undoableTimeout: c, warnWhenUnsavedChanges: d3 } = {}) => {
  var y2, f2, T2, U, D, g2, R2, w;
  let u = { breadcrumb: e == null ? void 0 : e.breadcrumb, mutationMode: (e == null ? void 0 : e.mutationMode) ?? n ?? Ee.mutationMode, undoableTimeout: (e == null ? void 0 : e.undoableTimeout) ?? c ?? Ee.undoableTimeout, syncWithLocation: (e == null ? void 0 : e.syncWithLocation) ?? i2 ?? Ee.syncWithLocation, warnWhenUnsavedChanges: (e == null ? void 0 : e.warnWhenUnsavedChanges) ?? d3 ?? Ee.warnWhenUnsavedChanges, liveMode: (e == null ? void 0 : e.liveMode) ?? r ?? Ee.liveMode, redirect: { afterCreate: ((y2 = e == null ? void 0 : e.redirect) == null ? void 0 : y2.afterCreate) ?? Ee.redirect.afterCreate, afterClone: ((f2 = e == null ? void 0 : e.redirect) == null ? void 0 : f2.afterClone) ?? Ee.redirect.afterClone, afterEdit: ((T2 = e == null ? void 0 : e.redirect) == null ? void 0 : T2.afterEdit) ?? Ee.redirect.afterEdit }, overtime: (e == null ? void 0 : e.overtime) ?? Ee.overtime, textTransformers: { humanize: ((U = e == null ? void 0 : e.textTransformers) == null ? void 0 : U.humanize) ?? Ee.textTransformers.humanize, plural: ((D = e == null ? void 0 : e.textTransformers) == null ? void 0 : D.plural) ?? Ee.textTransformers.plural, singular: ((g2 = e == null ? void 0 : e.textTransformers) == null ? void 0 : g2.singular) ?? Ee.textTransformers.singular }, disableServerSideValidation: (e == null ? void 0 : e.disableServerSideValidation) ?? Ee.disableServerSideValidation, projectId: e == null ? void 0 : e.projectId, useNewQueryKeys: e == null ? void 0 : e.useNewQueryKeys }, p3 = (e == null ? void 0 : e.disableTelemetry) ?? t ?? false, l2 = { clientConfig: ((R2 = e == null ? void 0 : e.reactQuery) == null ? void 0 : R2.clientConfig) ?? s ?? {}, devtoolConfig: ((w = e == null ? void 0 : e.reactQuery) == null ? void 0 : w.devtoolConfig) ?? a ?? {} };
  return { optionsWithDefaults: u, disableTelemetryWithDefault: p3, reactQueryWithDefaults: l2 };
}, "handleRefineOptions");
var Qr = o(({ redirectFromProps: e, action: t, redirectOptions: r }) => {
  if (e || e === false)
    return e;
  switch (t) {
    case "clone":
      return r.afterClone;
    case "create":
      return r.afterCreate;
    case "edit":
      return r.afterEdit;
    default:
      return false;
  }
}, "redirectPage");
var er = o(async (e, t, r) => {
  let n = [];
  for (let [s, a] of e.entries())
    try {
      let i2 = await a();
      n.push(t(i2, s));
    } catch (i2) {
      n.push(r(i2, s));
    }
  return n;
}, "sequentialPromises");
var ye = o((e, t = [], r = false) => {
  if (!e)
    return;
  if (r) {
    let s = t.find((i2) => be(i2.route ?? "") === be(e));
    return s || t.find((i2) => i2.name === e);
  }
  let n = t.find((s) => s.identifier === e);
  return n || (n = t.find((s) => s.name === e)), n;
}, "pickResource");
var j = o((e, t, r) => {
  if (t)
    return t;
  let n = ye(e, r), s = F(n == null ? void 0 : n.meta, n == null ? void 0 : n.options);
  return s != null && s.dataProviderName ? s.dataProviderName : "default";
}, "pickDataProvider");
var Je = o(async (e) => ({ data: (await Promise.all(e)).map((t) => t.data) }), "handleMultiple");
var tr = o((e) => {
  let { pagination: t, cursor: r } = e;
  if (r != null && r.next)
    return r.next;
  let n = (t == null ? void 0 : t.current) || 1, s = (t == null ? void 0 : t.pageSize) || 10, a = Math.ceil((e.total || 0) / s);
  return n < a ? Number(n) + 1 : void 0;
}, "getNextPageParam");
var rr = o((e) => {
  let { pagination: t, cursor: r } = e;
  if (r != null && r.prev)
    return r.prev;
  let n = (t == null ? void 0 : t.current) || 1;
  return n === 1 ? void 0 : n - 1;
}, "getPreviousPageParam");
var or = o((e) => {
  let t = [];
  return e.forEach((r) => {
    var n, s;
    t.push({ ...r, label: ((n = r.meta) == null ? void 0 : n.label) ?? ((s = r.options) == null ? void 0 : s.label), route: qt(r, e), canCreate: !!r.create, canEdit: !!r.edit, canShow: !!r.show, canDelete: r.canDelete });
  }), t;
}, "legacyResourceTransform");
var Wo = o((e) => ze(be(e)).flatMap((r) => xt(r) ? [r.slice(1)] : []), "pickRouteParams");
var Oo = o((e, t = {}) => e.reduce((r, n) => {
  let s = t[n];
  return typeof s < "u" && (r[n] = s), r;
}, {}), "prepareRouteParams");
var Me = o((e, t = {}, r = {}, n = {}) => {
  let s = Wo(e), a = Oo(s, { ...t, ...typeof (r == null ? void 0 : r.id) < "u" ? { id: r.id } : {}, ...typeof (r == null ? void 0 : r.action) < "u" ? { action: r.action } : {}, ...typeof (r == null ? void 0 : r.resource) < "u" ? { resource: r.resource } : {}, ...r == null ? void 0 : r.params, ...n });
  return e.replace(/:([^\/]+)/g, (i2, c) => {
    let d3 = a[c];
    return typeof d3 < "u" ? `${d3}` : i2;
  });
}, "composeRoute");
var J = o(() => {
  let e = ue(), t = fe();
  return t.isProvided ? { isLegacy: false, ...t } : e.isProvided ? { isLegacy: true, ...e, check: e.checkAuth, onError: e.checkError, getIdentity: e.getUserIdentity } : null;
}, "useActiveAuthProvider");
var St = o(({ hasPagination: e, pagination: t, configPagination: r } = {}) => {
  let n = e === false ? "off" : "server", s = (t == null ? void 0 : t.mode) ?? n, a = F(t == null ? void 0 : t.current, r == null ? void 0 : r.current) ?? 1, i2 = F(t == null ? void 0 : t.pageSize, r == null ? void 0 : r.pageSize) ?? 10;
  return { current: a, pageSize: i2, mode: s };
}, "handlePaginationParams");
var nr = o((e) => {
  let [t, r] = (0, import_react6.useState)(false);
  return (0, import_react6.useEffect)(() => {
    let n = window.matchMedia(e);
    n.matches !== t && r(n.matches);
    let s = o(() => r(n.matches), "listener");
    return window.addEventListener("resize", s), () => window.removeEventListener("resize", s);
  }, [t, e]), t;
}, "useMediaQuery");
var sr = o((e, t, r, n) => {
  let s = n ? e(t, n, r) : e(t, r), a = r ?? t;
  return s === t || typeof s > "u" ? a : s;
}, "safeTranslate");
function zo(e, t, r, n, s) {
  var y2;
  let a = { create: "Create new ", clone: `#${n ?? ""} Clone `, edit: `#${n ?? ""} Edit `, show: `#${n ?? ""} Show `, list: "" }, i2 = (t == null ? void 0 : t.identifier) ?? (t == null ? void 0 : t.name), c = (t == null ? void 0 : t.label) ?? ((y2 = t == null ? void 0 : t.meta) == null ? void 0 : y2.label) ?? $t(i2, r === "list" ? "plural" : "singular"), d3 = s ?? c, u = sr(e, "documentTitle.default", "refine"), p3 = sr(e, "documentTitle.suffix", " | refine"), l2 = u;
  return r && i2 && (l2 = sr(e, `documentTitle.${i2}.${r}`, `${a[r] ?? ""}${d3}${p3}`, { id: n })), l2;
}
o(zo, "generateDefaultDocumentTitle");
var Ae = o((e, t) => {
  let { mutationMode: r, undoableTimeout: n } = (0, import_react7.useContext)(ve);
  return { mutationMode: e ?? r, undoableTimeout: t ?? n };
}, "useMutationMode");
var Vr = import_react9.default.createContext({});
var jo = o(({ children: e }) => {
  let [t, r] = (0, import_react9.useState)(false);
  return import_react9.default.createElement(Vr.Provider, { value: { warnWhen: t, setWarnWhen: r } }, e);
}, "UnsavedWarnContextProvider");
var dt = o(() => {
  let { warnWhenUnsavedChanges: e } = (0, import_react8.useContext)(ve), { warnWhen: t, setWarnWhen: r } = (0, import_react8.useContext)(Vr);
  return { warnWhenUnsavedChanges: e, warnWhen: !!t, setWarnWhen: r ?? (() => {
  }) };
}, "useWarnAboutChange");
var Br = o(() => {
  let { syncWithLocation: e } = (0, import_react10.useContext)(ve);
  return { syncWithLocation: e };
}, "useSyncWithLocation");
var Ys = o(() => {
  let { Title: e } = (0, import_react11.useContext)(ve);
  return e;
}, "useTitle");
var se = o(() => {
  let { Footer: e, Header: t, Layout: r, OffLayoutArea: n, Sider: s, Title: a, hasDashboard: i2, mutationMode: c, syncWithLocation: d3, undoableTimeout: u, warnWhenUnsavedChanges: p3, DashboardPage: l2, LoginPage: y2, catchAll: f2, options: T2, __initialized: U } = (0, import_react12.useContext)(ve);
  return { __initialized: U, Footer: e, Header: t, Layout: r, OffLayoutArea: n, Sider: s, Title: a, hasDashboard: i2, mutationMode: c, syncWithLocation: d3, undoableTimeout: u, warnWhenUnsavedChanges: p3, DashboardPage: l2, LoginPage: y2, catchAll: f2, options: T2 };
}, "useRefineContext");
var nt = o(() => {
  let { options: { textTransformers: e } } = se();
  return o((r = "", n) => {
    let s = e.humanize(r);
    return n === "singular" ? e.singular(s) : e.plural(s);
  }, "getFriendlyName");
}, "useUserFriendlyName");
var Zo = o((e) => typeof e == "object" && e !== null, "isNested");
var qs = o((e) => Array.isArray(e), "isArray");
var ar = o((e, t = "") => Zo(e) ? Object.keys(e).reduce((r, n) => {
  let s = t.length ? `${t}.` : "";
  return Zo(e[n]) && Object.keys(e[n]).length && (qs(e[n]) && e[n].length ? e[n].forEach((a, i2) => {
    Object.assign(r, ar(a, `${s + n}.${i2}`));
  }) : Object.assign(r, ar(e[n], s + n))), r[s + n] = e[n], r;
}, {}) : { [t]: e }, "flattenObjectKeys");
var Yo = o((e) => e.split(".").map((t) => Number.isNaN(Number(t)) ? t : Number(t)), "propertyPathToArray");
var Nr = o((e, t, r) => {
  if (typeof window > "u")
    return;
  let n = new Blob([t], { type: r }), s = document.createElement("a");
  s.setAttribute("visibility", "hidden"), s.download = e;
  let a = URL.createObjectURL(n);
  s.href = a, document.body.appendChild(s), s.click(), document.body.removeChild(s), setTimeout(() => {
    URL.revokeObjectURL(a);
  });
}, "downloadInBrowser");
var ir = o((e) => {
  setTimeout(e, 0);
}, "deferExecution");
var Kr = o((e, t = 1e3, r) => {
  let n = [], s = o(() => {
    n.forEach((c) => {
      var d3;
      return (d3 = c.reject) == null ? void 0 : d3.call(c, r);
    }), n = [];
  }, "cancelPrevious"), a = debounce_default((...c) => {
    let { resolve: d3, reject: u } = n.pop() || {};
    Promise.resolve(e(...c)).then(d3).catch(u);
  }, t), i2 = o((...c) => new Promise((d3, u) => {
    s(), n.push({ resolve: d3, reject: u }), a(...c);
  }), "runner");
  return i2.flush = () => a.flush(), i2.cancel = () => {
    a.cancel(), s();
  }, i2;
}, "asyncDebounce");
var ur = o((e) => {
  let { current: t, pageSize: r, sorter: n, sorters: s, filters: a } = import_qs.default.parse(e.substring(1));
  return { parsedCurrent: t && Number(t), parsedPageSize: r && Number(r), parsedSorter: F(s, n) ?? [], parsedFilters: a ?? [] };
}, "parseTableParams");
var ra = o((e) => {
  let t = import_qs.default.stringify(e);
  return ur(`/${t}`);
}, "parseTableParamsFromQuery");
var cr = o((e) => {
  let t = { skipNulls: true, arrayFormat: "indices", encode: false }, { pagination: r, sorter: n, sorters: s, filters: a, ...i2 } = e;
  return import_qs.default.stringify({ ...i2, ...r || {}, sorters: F(s, n), filters: a }, t);
}, "stringifyTableParams");
var en = o((e, t) => e.operator !== "and" && e.operator !== "or" && t.operator !== "and" && t.operator !== "or" ? ("field" in e ? e.field : void 0) === ("field" in t ? t.field : void 0) && e.operator === t.operator : ("key" in e ? e.key : void 0) === ("key" in t ? t.key : void 0) && e.operator === t.operator, "compareFilters");
var tn = o((e, t) => e.field === t.field, "compareSorters");
var Pt = o((e, t, r = []) => (t.filter((s) => (s.operator === "or" || s.operator === "and") && !s.key).length > 1 && (0, import_warn_once.default)(true, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. 
For more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), unionWith_default(e, t, r, en).filter((s) => s.value !== void 0 && s.value !== null && (s.operator !== "or" || s.operator === "or" && s.value.length !== 0) && (s.operator !== "and" || s.operator === "and" && s.value.length !== 0))), "unionFilters");
var dr = o((e, t) => unionWith_default(e, t, tn).filter((r) => r.order !== void 0 && r.order !== null), "unionSorters");
var pr = o((e, t) => [...differenceWith_default(t, e, en), ...e], "setInitialFilters");
var lr = o((e, t) => [...differenceWith_default(t, e, tn), ...e], "setInitialSorters");
var oa = o((e, t) => {
  if (!t)
    return;
  let r = t.find((n) => n.field === e);
  if (r)
    return r.order;
}, "getDefaultSortOrder");
var na = o((e, t, r = "eq") => {
  let n = t == null ? void 0 : t.find((s) => {
    if (s.operator !== "or" && s.operator !== "and" && "field" in s) {
      let { operator: a, field: i2 } = s;
      return i2 === e && a === r;
    }
  });
  if (n)
    return n.value || [];
}, "getDefaultFilter");
var sa = o((e) => new Promise((t, r) => {
  let n = new FileReader(), s = o(() => {
    n.result && (n.removeEventListener("load", s, false), t(n.result));
  }, "resultHandler");
  n.addEventListener("load", s, false), n.readAsDataURL(e.originFileObj), n.onerror = (a) => (n.removeEventListener("load", s, false), r(a));
}), "file2Base64");
var O2 = o(() => {
  let { options: { useNewQueryKeys: e } } = se();
  return { keys: We, preferLegacyKeys: !e };
}, "useKeys");
function aa({ v3LegacyAuthProviderCompatible: e = false, options: t, params: r } = {}) {
  let { getPermissions: n } = ue(), { getPermissions: s } = fe(), { keys: a, preferLegacyKeys: i2 } = O2(), c = useQuery({ queryKey: a().auth().action("permissions").get(i2), queryFn: s ? () => s(r) : () => Promise.resolve(void 0), enabled: !e && !!s, ...e ? {} : t, meta: { ...e ? {} : t == null ? void 0 : t.meta, ...P("usePermissions", i2) } }), d3 = useQuery({ queryKey: [...a().auth().action("permissions").get(i2), "v3LegacyAuthProviderCompatible"], queryFn: n ? () => n(r) : () => Promise.resolve(void 0), enabled: e && !!n, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("usePermissions", i2) } });
  return e ? d3 : c;
}
o(aa, "usePermissions");
function Hr({ v3LegacyAuthProviderCompatible: e = false, queryOptions: t } = {}) {
  let { getUserIdentity: r } = ue(), { getIdentity: n } = fe(), { keys: s, preferLegacyKeys: a } = O2(), i2 = useQuery({ queryKey: s().auth().action("identity").get(a), queryFn: n ?? (() => Promise.resolve({})), enabled: !e && !!n, retry: false, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useGetIdentity", a) } }), c = useQuery({ queryKey: [...s().auth().action("identity").get(a), "v3LegacyAuthProviderCompatible"], queryFn: r ?? (() => Promise.resolve({})), enabled: e && !!r, retry: false, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useGetIdentity", a) } });
  return e ? c : i2;
}
o(Hr, "useGetIdentity");
var Rt = o(() => {
  let e = useQueryClient(), { keys: t, preferLegacyKeys: r } = O2();
  return o(async () => {
    await Promise.all(["check", "identity", "permissions"].map((s) => e.invalidateQueries(t().auth().action(s).get(r))));
  }, "invalidate");
}, "useInvalidateAuthStore");
function mr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Rt(), n = Z(), s = ge(), { push: a } = ce(), { open: i2, close: c } = we(), { logout: d3 } = ue(), { logout: u } = fe(), { keys: p3, preferLegacyKeys: l2 } = O2(), y2 = useMutation({ mutationKey: p3().auth().action("logout").get(l2), mutationFn: u, onSuccess: async (T2, U) => {
    let { success: D, error: g2, redirectTo: R2, successNotification: w } = T2, { redirectPath: I2 } = U ?? {}, P2 = I2 ?? R2;
    D && (c == null || c("useLogout-error"), w && (i2 == null || i2(ua(w)))), (g2 || !D) && (i2 == null || i2($r(g2))), P2 !== false && (n === "legacy" ? a(P2 ?? "/login") : P2 && s({ to: P2 })), await r();
  }, onError: (T2) => {
    i2 == null || i2($r(T2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useLogout", l2) } }), f2 = useMutation({ mutationKey: [...p3().auth().action("logout").get(l2), "v3LegacyAuthProviderCompatible"], mutationFn: d3, onSuccess: async (T2, U) => {
    let D = (U == null ? void 0 : U.redirectPath) ?? T2;
    if (D !== false) {
      if (D) {
        n === "legacy" ? a(D) : s({ to: D });
        return;
      }
      n === "legacy" ? a("/login") : s({ to: "/login" }), await r();
    }
  }, onError: (T2) => {
    i2 == null || i2($r(T2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useLogout", l2) } });
  return e ? f2 : y2;
}
o(mr, "useLogout");
var $r = o((e) => ({ key: "useLogout-error", type: "error", message: (e == null ? void 0 : e.name) || "Logout Error", description: (e == null ? void 0 : e.message) || "Something went wrong during logout" }), "buildNotification");
var ua = o((e) => ({ message: e.message, description: e.description, key: "logout-success", type: "success" }), "buildSuccessNotification");
function Ft({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Rt(), n = Z(), s = ge(), { replace: a } = ce(), i2 = ae(), { useLocation: c } = re(), { search: d3 } = c(), { close: u, open: p3 } = we(), { login: l2 } = ue(), { login: y2 } = fe(), { keys: f2, preferLegacyKeys: T2 } = O2(), U = import_react13.default.useMemo(() => {
    var R2;
    return n === "legacy" ? import_qs2.default.parse(d3, { ignoreQueryPrefix: true }).to : (R2 = i2.params) == null ? void 0 : R2.to;
  }, [n, i2.params, d3]), D = useMutation({ mutationKey: f2().auth().action("login").get(T2), mutationFn: y2, onSuccess: async ({ success: R2, redirectTo: w, error: I2, successNotification: P2 }) => {
    R2 && (u == null || u("login-error"), P2 && (p3 == null || p3(pa(P2)))), (I2 || !R2) && (p3 == null || p3(Wr(I2))), U && R2 ? n === "legacy" ? a(U) : s({ to: U, type: "replace" }) : w ? n === "legacy" ? a(w) : s({ to: w, type: "replace" }) : n === "legacy" && a("/"), await r();
  }, onError: (R2) => {
    p3 == null || p3(Wr(R2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useLogin", T2) } }), g2 = useMutation({ mutationKey: [...f2().auth().action("login").get(T2), "v3LegacyAuthProviderCompatible"], mutationFn: l2, onSuccess: async (R2) => {
    U && a(U), R2 !== false && !U && (typeof R2 == "string" ? n === "legacy" ? a(R2) : s({ to: R2, type: "replace" }) : n === "legacy" ? a("/") : s({ to: "/", type: "replace" })), await r(), u == null || u("login-error");
  }, onError: (R2) => {
    p3 == null || p3(Wr(R2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useLogin", T2) } });
  return e ? g2 : D;
}
o(Ft, "useLogin");
var Wr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Login Error", description: (e == null ? void 0 : e.message) || "Invalid credentials", key: "login-error", type: "error" }), "buildNotification");
var pa = o((e) => ({ message: e.message, description: e.description, key: "login-success", type: "success" }), "buildSuccessNotification");
function zr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Rt(), n = Z(), s = ge(), { replace: a } = ce(), { register: i2 } = ue(), { register: c } = fe(), { close: d3, open: u } = we(), { keys: p3, preferLegacyKeys: l2 } = O2(), y2 = useMutation({ mutationKey: p3().auth().action("register").get(l2), mutationFn: c, onSuccess: async ({ success: T2, redirectTo: U, error: D, successNotification: g2 }) => {
    T2 && (d3 == null || d3("register-error"), g2 && (u == null || u(la(g2)))), (D || !T2) && (u == null || u(Or(D))), U ? n === "legacy" ? a(U) : s({ to: U, type: "replace" }) : n === "legacy" && a("/"), await r();
  }, onError: (T2) => {
    u == null || u(Or(T2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useRegister", l2) } }), f2 = useMutation({ mutationKey: [...p3().auth().action("register").get(l2), "v3LegacyAuthProviderCompatible"], mutationFn: i2, onSuccess: async (T2) => {
    T2 !== false && (T2 ? n === "legacy" ? a(T2) : s({ to: T2, type: "replace" }) : n === "legacy" ? a("/") : s({ to: "/", type: "replace" }), await r(), d3 == null || d3("register-error"));
  }, onError: (T2) => {
    u == null || u(Or(T2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useRegister", l2) } });
  return e ? f2 : y2;
}
o(zr, "useRegister");
var Or = o((e) => ({ message: (e == null ? void 0 : e.name) || "Register Error", description: (e == null ? void 0 : e.message) || "Error while registering", key: "register-error", type: "error" }), "buildNotification");
var la = o((e) => ({ message: e.message, description: e.description, key: "register-success", type: "success" }), "buildSuccessNotification");
function jr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Z(), n = ge(), { replace: s } = ce(), { forgotPassword: a } = ue(), { forgotPassword: i2 } = fe(), { close: c, open: d3 } = we(), { keys: u, preferLegacyKeys: p3 } = O2(), l2 = useMutation({ mutationKey: u().auth().action("forgotPassword").get(p3), mutationFn: i2, onSuccess: ({ success: f2, redirectTo: T2, error: U, successNotification: D }) => {
    f2 && (c == null || c("forgot-password-error"), D && (d3 == null || d3(ma(D)))), (U || !f2) && (d3 == null || d3(_r(U))), T2 && (r === "legacy" ? s(T2) : n({ to: T2, type: "replace" }));
  }, onError: (f2) => {
    d3 == null || d3(_r(f2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useForgotPassword", p3) } }), y2 = useMutation({ mutationKey: [...u().auth().action("forgotPassword").get(p3), "v3LegacyAuthProviderCompatible"], mutationFn: a, onSuccess: (f2) => {
    f2 !== false && f2 && (r === "legacy" ? s(f2) : n({ to: f2, type: "replace" })), c == null || c("forgot-password-error");
  }, onError: (f2) => {
    d3 == null || d3(_r(f2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useForgotPassword", p3) } });
  return e ? y2 : l2;
}
o(jr, "useForgotPassword");
var _r = o((e) => ({ message: (e == null ? void 0 : e.name) || "Forgot Password Error", description: (e == null ? void 0 : e.message) || "Error while resetting password", key: "forgot-password-error", type: "error" }), "buildNotification");
var ma = o((e) => ({ message: e.message, description: e.description, key: "forgot-password-success", type: "success" }), "buildSuccessNotification");
function Zr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {
  let r = Z(), n = ge(), { replace: s } = ce(), { updatePassword: a } = ue(), { updatePassword: i2 } = fe(), { close: c, open: d3 } = we(), { keys: u, preferLegacyKeys: p3 } = O2(), l2 = ae(), { useLocation: y2 } = re(), { search: f2 } = y2(), T2 = import_react14.default.useMemo(() => r === "legacy" ? import_qs3.default.parse(f2, { ignoreQueryPrefix: true }) ?? {} : l2.params ?? {}, [f2, l2, r]), U = useMutation({ mutationKey: u().auth().action("updatePassword").get(p3), mutationFn: async (g2) => i2 == null ? void 0 : i2({ ...T2, ...g2 }), onSuccess: ({ success: g2, redirectTo: R2, error: w, successNotification: I2 }) => {
    g2 && (c == null || c("update-password-error"), I2 && (d3 == null || d3(ga(I2)))), (w || !g2) && (d3 == null || d3(Xr(w))), R2 && (r === "legacy" ? s(R2) : n({ to: R2, type: "replace" }));
  }, onError: (g2) => {
    d3 == null || d3(Xr(g2));
  }, ...e === true ? {} : t, meta: { ...e === true ? {} : t == null ? void 0 : t.meta, ...P("useUpdatePassword", p3) } }), D = useMutation({ mutationKey: [...u().auth().action("updatePassword").get(p3), "v3LegacyAuthProviderCompatible"], mutationFn: async (g2) => a == null ? void 0 : a({ ...T2, ...g2 }), onSuccess: (g2) => {
    g2 !== false && g2 && (r === "legacy" ? s(g2) : n({ to: g2, type: "replace" })), c == null || c("update-password-error");
  }, onError: (g2) => {
    d3 == null || d3(Xr(g2));
  }, ...e ? t : {}, meta: { ...e ? t == null ? void 0 : t.meta : {}, ...P("useUpdatePassword", p3) } });
  return e ? D : U;
}
o(Zr, "useUpdatePassword");
var Xr = o((e) => ({ message: (e == null ? void 0 : e.name) || "Update Password Error", description: (e == null ? void 0 : e.message) || "Error while updating password", key: "update-password-error", type: "error" }), "buildNotification");
var ga = o((e) => ({ message: e.message, description: e.description, key: "update-password-success", type: "success" }), "buildSuccessNotification");
function fr({ v3LegacyAuthProviderCompatible: e = false, params: t } = {}) {
  let { checkAuth: r } = ue(), { check: n } = fe(), { keys: s, preferLegacyKeys: a } = O2(), i2 = useQuery({ queryKey: s().auth().action("check").params(t).get(a), queryFn: async () => await (n == null ? void 0 : n(t)) ?? {}, retry: false, enabled: !e, meta: { ...P("useIsAuthenticated", a) } }), c = useQuery({ queryKey: [...s().auth().action("check").params(t).get(a), "v3LegacyAuthProviderCompatible"], queryFn: async () => await (r == null ? void 0 : r(t)) ?? {}, retry: false, enabled: e, meta: { ...P("useIsAuthenticated", a) } });
  return e ? c : i2;
}
o(fr, "useIsAuthenticated");
var Ta = fr;
function de({ v3LegacyAuthProviderCompatible: e = false } = {}) {
  let t = Z(), r = ge(), { replace: n } = ce(), { checkError: s } = ue(), { onError: a } = fe(), { keys: i2, preferLegacyKeys: c } = O2(), { mutate: d3 } = mr({ v3LegacyAuthProviderCompatible: !!e }), { mutate: u } = mr({ v3LegacyAuthProviderCompatible: !!e }), p3 = useMutation({ mutationKey: i2().auth().action("onError").get(c), mutationFn: a, onSuccess: ({ logout: y2, redirectTo: f2 }) => {
    if (y2) {
      u({ redirectPath: f2 });
      return;
    }
    if (f2) {
      t === "legacy" ? n(f2) : r({ to: f2, type: "replace" });
      return;
    }
  }, meta: { ...P("useOnError", c) } }), l2 = useMutation({ mutationKey: [...i2().auth().action("onError").get(c), "v3LegacyAuthProviderCompatible"], mutationFn: s, onError: (y2) => {
    d3({ redirectPath: y2 });
  }, meta: { ...P("useOnError", c) } });
  return e ? l2 : p3;
}
o(de, "useOnError");
var xa = de;
var Yr = o(() => {
  let { isProvided: e } = ue(), { isProvided: t } = fe();
  return !!(t || e);
}, "useIsExistAuthentication");
var ee = o(({ isLoading: e, interval: t, onInterval: r }) => {
  let [n, s] = (0, import_react15.useState)(void 0), { options: a } = se(), { overtime: i2 } = a, c = t ?? i2.interval, d3 = r ?? (i2 == null ? void 0 : i2.onInterval);
  return (0, import_react15.useEffect)(() => {
    let u;
    return e && (u = setInterval(() => {
      s((p3) => p3 === void 0 ? c : p3 + c);
    }, c)), () => {
      clearInterval(u), s(void 0);
    };
  }, [e, c]), (0, import_react15.useEffect)(() => {
    d3 && n && d3(n);
  }, [n]), { elapsedTime: n };
}, "useLoadingOvertime");
var At = o(({ resource: e, config: t, filters: r, hasPagination: n, pagination: s, sorters: a, queryOptions: i2, successNotification: c, errorNotification: d3, meta: u, metaData: p3, liveMode: l2, onLiveEvent: y2, liveParams: f2, dataProviderName: T2, overtimeOptions: U } = {}) => {
  let { resources: D, resource: g2, identifier: R2 } = z(e), w = ne(), I2 = H(), P2 = J(), { mutate: x2 } = de({ v3LegacyAuthProviderCompatible: !!(P2 != null && P2.isLegacy) }), m2 = pe(), v2 = q(), { keys: b, preferLegacyKeys: C2 } = O2(), E2 = j(R2, T2, D), h = F(u, p3), L = F(r, t == null ? void 0 : t.filters), A = F(a, t == null ? void 0 : t.sort), M = F(n, t == null ? void 0 : t.hasPagination), Q = St({ pagination: s, configPagination: t == null ? void 0 : t.pagination, hasPagination: M }), S = Q.mode === "server", G = v2({ resource: g2, meta: h }), $ = { meta: G, metaData: G, filters: L, hasPagination: S, pagination: Q, sorters: A, config: { ...t, sort: A } }, K = (i2 == null ? void 0 : i2.enabled) === void 0 || (i2 == null ? void 0 : i2.enabled) === true, { getList: X } = w(E2);
  st({ resource: R2, types: ["*"], params: { meta: G, metaData: G, pagination: Q, hasPagination: S, sort: A, sorters: A, filters: L, subscriptionType: "useList", ...f2 }, channel: `resources/${g2 == null ? void 0 : g2.name}`, enabled: K, liveMode: l2, onLiveEvent: y2, dataProviderName: E2, meta: { ...u, dataProviderName: T2 } });
  let N = useQuery({ queryKey: b().data(E2).resource(R2 ?? "").action("list").params({ ...h || {}, filters: L, hasPagination: S, ...S && { pagination: Q }, ...a && { sorters: a }, ...(t == null ? void 0 : t.sort) && { sort: t == null ? void 0 : t.sort } }).get(C2), queryFn: ({ queryKey: V, pageParam: B, signal: _ }) => X({ resource: (g2 == null ? void 0 : g2.name) ?? "", pagination: Q, hasPagination: S, filters: L, sort: A, sorters: A, meta: { ...G, queryContext: { queryKey: V, pageParam: B, signal: _ } }, metaData: { ...G, queryContext: { queryKey: V, pageParam: B, signal: _ } } }), ...i2, enabled: typeof (i2 == null ? void 0 : i2.enabled) < "u" ? i2 == null ? void 0 : i2.enabled : !!(g2 != null && g2.name), select: (V) => {
    var De;
    let B = V, { current: _, mode: te, pageSize: ie } = Q;
    return te === "client" && (B = { ...B, data: B.data.slice((_ - 1) * ie, _ * ie), total: B.total }), i2 != null && i2.select ? (De = i2 == null ? void 0 : i2.select) == null ? void 0 : De.call(i2, B) : B;
  }, onSuccess: (V) => {
    var _;
    (_ = i2 == null ? void 0 : i2.onSuccess) == null || _.call(i2, V);
    let B = typeof c == "function" ? c(V, $, R2) : c;
    m2(B);
  }, onError: (V) => {
    var _;
    x2(V), (_ = i2 == null ? void 0 : i2.onError) == null || _.call(i2, V);
    let B = typeof d3 == "function" ? d3(V, $, R2) : d3;
    m2(B, { key: `${R2}-useList-notification`, message: I2("notifications.error", { statusCode: V.statusCode }, `Error (status code: ${V.statusCode})`), description: V.message, type: "error" });
  }, meta: { ...i2 == null ? void 0 : i2.meta, ...P("useList", C2) } }), { elapsedTime: W } = ee({ isLoading: N.isFetching, interval: U == null ? void 0 : U.interval, onInterval: U == null ? void 0 : U.onInterval });
  return { ...N, overtime: { elapsedTime: W } };
}, "useList");
var kt = o(({ resource: e, id: t, queryOptions: r, successNotification: n, errorNotification: s, meta: a, metaData: i2, liveMode: c, onLiveEvent: d3, liveParams: u, dataProviderName: p3, overtimeOptions: l2 }) => {
  let { resources: y2, resource: f2, identifier: T2 } = z(e), U = ne(), D = H(), g2 = J(), { mutate: R2 } = de({ v3LegacyAuthProviderCompatible: !!(g2 != null && g2.isLegacy) }), w = pe(), I2 = q(), { keys: P2, preferLegacyKeys: x2 } = O2(), m2 = F(a, i2), v2 = j(T2, p3, y2), { getOne: b } = U(v2), C2 = I2({ resource: f2, meta: m2 });
  st({ resource: T2, types: ["*"], channel: `resources/${f2 == null ? void 0 : f2.name}`, params: { ids: t ? [t] : [], id: t, meta: C2, metaData: C2, subscriptionType: "useOne", ...u }, enabled: typeof (r == null ? void 0 : r.enabled) < "u" ? r == null ? void 0 : r.enabled : typeof (f2 == null ? void 0 : f2.name) < "u" && typeof t < "u", liveMode: c, onLiveEvent: d3, dataProviderName: v2, meta: { ...a, dataProviderName: p3 } });
  let E2 = useQuery({ queryKey: P2().data(v2).resource(T2 ?? "").action("one").id(t ?? "").params({ ...m2 || {} }).get(x2), queryFn: ({ queryKey: L, pageParam: A, signal: M }) => b({ resource: (f2 == null ? void 0 : f2.name) ?? "", id: t, meta: { ...C2, queryContext: { queryKey: L, pageParam: A, signal: M } }, metaData: { ...C2, queryContext: { queryKey: L, pageParam: A, signal: M } } }), ...r, enabled: typeof (r == null ? void 0 : r.enabled) < "u" ? r == null ? void 0 : r.enabled : typeof t < "u", onSuccess: (L) => {
    var M;
    (M = r == null ? void 0 : r.onSuccess) == null || M.call(r, L);
    let A = typeof n == "function" ? n(L, { id: t, ...C2 }, T2) : n;
    w(A);
  }, onError: (L) => {
    var M;
    R2(L), (M = r == null ? void 0 : r.onError) == null || M.call(r, L);
    let A = typeof s == "function" ? s(L, { id: t, ...C2 }, T2) : s;
    w(A, { key: `${t}-${T2}-getOne-notification`, message: D("notifications.error", { statusCode: L.statusCode }, `Error (status code: ${L.statusCode})`), description: L.message, type: "error" });
  }, meta: { ...r == null ? void 0 : r.meta, ...P("useOne", x2) } }), { elapsedTime: h } = ee({ isLoading: E2.isFetching, interval: l2 == null ? void 0 : l2.interval, onInterval: l2 == null ? void 0 : l2.onInterval });
  return { ...E2, overtime: { elapsedTime: h } };
}, "useOne");
var Jr = o(({ resource: e, ids: t, queryOptions: r, successNotification: n, errorNotification: s, meta: a, metaData: i2, liveMode: c, onLiveEvent: d3, liveParams: u, dataProviderName: p3, overtimeOptions: l2 }) => {
  let { resources: y2, resource: f2, identifier: T2 } = z(e), U = ne(), D = H(), g2 = J(), { mutate: R2 } = de({ v3LegacyAuthProviderCompatible: !!(g2 != null && g2.isLegacy) }), w = pe(), I2 = q(), { keys: P2, preferLegacyKeys: x2 } = O2(), m2 = F(a, i2), v2 = j(T2, p3, y2), b = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === true, { getMany: C2, getOne: E2 } = U(v2), h = I2({ resource: f2, meta: m2 });
  st({ resource: T2, types: ["*"], params: { ids: t, meta: h, metaData: h, subscriptionType: "useMany", ...u }, channel: `resources/${f2.name}`, enabled: b, liveMode: c, onLiveEvent: d3, dataProviderName: v2, meta: { ...a, dataProviderName: p3 } });
  let L = useQuery({ queryKey: P2().data(v2).resource(T2).action("many").ids(...t).params({ ...m2 || {} }).get(x2), queryFn: ({ queryKey: M, pageParam: Q, signal: S }) => C2 ? C2({ resource: f2 == null ? void 0 : f2.name, ids: t, meta: { ...h, queryContext: { queryKey: M, pageParam: Q, signal: S } }, metaData: { ...h, queryContext: { queryKey: M, pageParam: Q, signal: S } } }) : Je(t.map((G) => E2({ resource: f2 == null ? void 0 : f2.name, id: G, meta: { ...h, queryContext: { queryKey: M, pageParam: Q, signal: S } }, metaData: { ...h, queryContext: { queryKey: M, pageParam: Q, signal: S } } }))), ...r, onSuccess: (M) => {
    var S;
    (S = r == null ? void 0 : r.onSuccess) == null || S.call(r, M);
    let Q = typeof n == "function" ? n(M, t, T2) : n;
    w(Q);
  }, onError: (M) => {
    var S;
    R2(M), (S = r == null ? void 0 : r.onError) == null || S.call(r, M);
    let Q = typeof s == "function" ? s(M, t, T2) : s;
    w(Q, { key: `${t[0]}-${T2}-getMany-notification`, message: D("notifications.error", { statusCode: M.statusCode }, `Error (status code: ${M.statusCode})`), description: M.message, type: "error" });
  }, meta: { ...r == null ? void 0 : r.meta, ...P("useMany", x2) } }), { elapsedTime: A } = ee({ isLoading: L.isFetching, interval: l2 == null ? void 0 : l2.interval, onInterval: l2 == null ? void 0 : l2.onInterval });
  return { ...L, overtime: { elapsedTime: A } };
}, "useMany");
var qr = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let { resources: r, select: n } = z(), s = useQueryClient(), a = ne(), { mutationMode: i2, undoableTimeout: c } = Ae(), d3 = H(), u = J(), { mutate: p3 } = de({ v3LegacyAuthProviderCompatible: !!(u != null && u.isLegacy) }), l2 = Ve(), { log: y2 } = Be(), { notificationDispatch: f2 } = _e(), T2 = pe(), U = Ce(), D = q(), { options: { textTransformers: g2 } } = se(), { keys: R2, preferLegacyKeys: w } = O2(), I2 = useMutation({ mutationFn: ({ id: x2, values: m2, resource: v2, mutationMode: b, undoableTimeout: C2, onCancel: E2, meta: h, metaData: L, dataProviderName: A }) => {
    let { resource: M, identifier: Q } = n(v2), S = D({ resource: M, meta: F(h, L) }), G = b ?? i2, $ = C2 ?? c;
    return G !== "undoable" ? a(j(Q, A, r)).update({ resource: M.name, id: x2, variables: m2, meta: S, metaData: S }) : new Promise((X, N) => {
      let W = o(() => {
        a(j(Q, A, r)).update({ resource: M.name, id: x2, variables: m2, meta: S, metaData: S }).then((B) => X(B)).catch((B) => N(B));
      }, "doMutation"), V = o(() => {
        N({ message: "mutationCancelled" });
      }, "cancelMutation");
      E2 && E2(V), f2({ type: "ADD", payload: { id: x2, resource: Q, cancelMutation: V, doMutation: W, seconds: $, isSilent: !!E2 } });
    });
  }, onMutate: async ({ resource: x2, id: m2, mutationMode: v2, values: b, dataProviderName: C2, meta: E2, metaData: h, optimisticUpdateMap: L = { list: true, many: true, detail: true } }) => {
    let { identifier: A } = n(x2), { gqlMutation: M, gqlQuery: Q, ...S } = F(E2, h) ?? {}, G = Ye(w)(A, j(A, C2, r), S), $ = R2().data(j(A, C2, r)).resource(A), K = s.getQueriesData($.get(w)), X = v2 ?? i2;
    return await s.cancelQueries($.get(w), void 0, { silent: true }), X !== "pessimistic" && (L.list && s.setQueriesData($.action("list").params(S ?? {}).get(w), (N) => {
      if (typeof L.list == "function")
        return L.list(N, b, m2);
      if (!N)
        return null;
      let W = N.data.map((V) => {
        var B;
        return ((B = V.id) == null ? void 0 : B.toString()) === (m2 == null ? void 0 : m2.toString()) ? { id: m2, ...V, ...b } : V;
      });
      return { ...N, data: W };
    }), L.many && s.setQueriesData($.action("many").get(w), (N) => {
      if (typeof L.many == "function")
        return L.many(N, b, m2);
      if (!N)
        return null;
      let W = N.data.map((V) => {
        var B;
        return ((B = V.id) == null ? void 0 : B.toString()) === (m2 == null ? void 0 : m2.toString()) && (V = { id: m2, ...V, ...b }), V;
      });
      return { ...N, data: W };
    }), L.detail && s.setQueriesData($.action("one").id(m2).params(S ?? {}).get(w), (N) => typeof L.detail == "function" ? L.detail(N, b, m2) : N ? { ...N, data: { ...N.data, ...b } } : null)), { previousQueries: K, queryKey: G };
  }, onSettled: (x2, m2, { id: v2, resource: b, dataProviderName: C2, invalidates: E2 = ["list", "many", "detail"] }) => {
    let { identifier: h } = n(b);
    U({ resource: h, dataProviderName: j(h, C2, r), invalidates: E2, id: v2 }), f2({ type: "REMOVE", payload: { id: v2, resource: h } });
  }, onSuccess: (x2, { id: m2, resource: v2, successNotification: b, dataProviderName: C2, values: E2, meta: h, metaData: L }, A) => {
    var _;
    let { resource: M, identifier: Q } = n(v2), S = g2.singular(Q), G = j(Q, C2, r), $ = D({ resource: M, meta: F(h, L) }), K = typeof b == "function" ? b(x2, { id: m2, values: E2 }, Q) : b;
    T2(K, { key: `${m2}-${Q}-notification`, description: d3("notifications.success", "Successful"), message: d3("notifications.editSuccess", { resource: d3(`${Q}.${Q}`, S) }, `Successfully updated ${S}`), type: "success" }), l2 == null || l2({ channel: `resources/${M.name}`, type: "updated", payload: { ids: (_ = x2.data) != null && _.id ? [x2.data.id] : void 0 }, date: /* @__PURE__ */ new Date(), meta: { ...$, dataProviderName: G } });
    let X;
    if (A) {
      let te = s.getQueryData(A.queryKey.detail(m2));
      X = Object.keys(E2 || {}).reduce((ie, De) => {
        var Y;
        return ie[De] = (Y = te == null ? void 0 : te.data) == null ? void 0 : Y[De], ie;
      }, {});
    }
    let { fields: N, operation: W, variables: V, ...B } = $ || {};
    y2 == null || y2.mutate({ action: "update", resource: M.name, data: E2, previousData: X, meta: { id: m2, dataProviderName: G, ...B } });
  }, onError: (x2, { id: m2, resource: v2, errorNotification: b, values: C2 }, E2) => {
    let { identifier: h } = n(v2);
    if (E2)
      for (let L of E2.previousQueries)
        s.setQueryData(L[0], L[1]);
    if (x2.message !== "mutationCancelled") {
      p3 == null || p3(x2);
      let L = g2.singular(h), A = typeof b == "function" ? b(x2, { id: m2, values: C2 }, h) : b;
      T2(A, { key: `${m2}-${h}-notification`, message: d3("notifications.editError", { resource: d3(`${h}.${h}`, L), statusCode: x2.statusCode }, `Error when updating ${L} (status code: ${x2.statusCode})`), description: x2.message, type: "error" });
    }
  }, mutationKey: R2().data().mutation("update").get(w), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useUpdate", w) } }), { elapsedTime: P2 } = ee({ isLoading: I2.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...I2, overtime: { elapsedTime: P2 } };
}, "useUpdate");
var Qt = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = J(), { mutate: n } = de({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), s = ne(), a = Ce(), { resources: i2, select: c } = z(), d3 = H(), u = Ve(), { log: p3 } = Be(), l2 = pe(), y2 = q(), { options: { textTransformers: f2 } } = se(), { keys: T2, preferLegacyKeys: U } = O2(), D = useMutation({ mutationFn: ({ resource: R2, values: w, meta: I2, metaData: P2, dataProviderName: x2 }) => {
    let { resource: m2, identifier: v2 } = c(R2), b = y2({ resource: m2, meta: F(I2, P2) });
    return s(j(v2, x2, i2)).create({ resource: m2.name, variables: w, meta: b, metaData: b });
  }, onSuccess: (R2, { resource: w, successNotification: I2, dataProviderName: P2, invalidates: x2 = ["list", "many"], values: m2, meta: v2, metaData: b }) => {
    var K, X;
    let { resource: C2, identifier: E2 } = c(w), h = f2.singular(E2), L = j(E2, P2, i2), A = y2({ resource: C2, meta: F(v2, b) }), M = typeof I2 == "function" ? I2(R2, m2, E2) : I2;
    l2(M, { key: `create-${E2}-notification`, message: d3("notifications.createSuccess", { resource: d3(`${E2}.${E2}`, h) }, `Successfully created ${h}`), description: d3("notifications.success", "Success"), type: "success" }), a({ resource: E2, dataProviderName: L, invalidates: x2 }), u == null || u({ channel: `resources/${C2.name}`, type: "created", payload: { ids: (K = R2 == null ? void 0 : R2.data) != null && K.id ? [R2.data.id] : void 0 }, date: /* @__PURE__ */ new Date(), meta: { ...A, dataProviderName: L } });
    let { fields: Q, operation: S, variables: G, ...$ } = A || {};
    p3 == null || p3.mutate({ action: "create", resource: C2.name, data: m2, meta: { dataProviderName: L, id: ((X = R2 == null ? void 0 : R2.data) == null ? void 0 : X.id) ?? void 0, ...$ } });
  }, onError: (R2, { resource: w, errorNotification: I2, values: P2 }) => {
    n(R2);
    let { identifier: x2 } = c(w), m2 = f2.singular(x2), v2 = typeof I2 == "function" ? I2(R2, P2, x2) : I2;
    l2(v2, { key: `create-${x2}-notification`, description: R2.message, message: d3("notifications.createError", { resource: d3(`${x2}.${x2}`, m2), statusCode: R2.statusCode }, `There was an error creating ${m2} (status code: ${R2.statusCode})`), type: "error" });
  }, mutationKey: T2().data().mutation("create").get(U), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCreate", U) } }), { elapsedTime: g2 } = ee({ isLoading: D.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...D, overtime: { elapsedTime: g2 } };
}, "useCreate");
var eo = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = J(), { mutate: n } = de({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), s = ne(), { resources: a, select: i2 } = z(), c = useQueryClient(), { mutationMode: d3, undoableTimeout: u } = Ae(), { notificationDispatch: p3 } = _e(), l2 = H(), y2 = Ve(), { log: f2 } = Be(), T2 = pe(), U = Ce(), D = q(), { options: { textTransformers: g2 } } = se(), { keys: R2, preferLegacyKeys: w } = O2(), I2 = useMutation({ mutationFn: ({ id: x2, mutationMode: m2, undoableTimeout: v2, resource: b, onCancel: C2, meta: E2, metaData: h, dataProviderName: L, values: A }) => {
    let { resource: M, identifier: Q } = i2(b), S = D({ resource: M, meta: F(E2, h) }), G = m2 ?? d3, $ = v2 ?? u;
    return G !== "undoable" ? s(j(Q, L, a)).deleteOne({ resource: M.name, id: x2, meta: S, metaData: S, variables: A }) : new Promise((X, N) => {
      let W = o(() => {
        s(j(Q, L, a)).deleteOne({ resource: M.name, id: x2, meta: S, metaData: S, variables: A }).then((B) => X(B)).catch((B) => N(B));
      }, "doMutation"), V = o(() => {
        N({ message: "mutationCancelled" });
      }, "cancelMutation");
      C2 && C2(V), p3({ type: "ADD", payload: { id: x2, resource: Q, cancelMutation: V, doMutation: W, seconds: $, isSilent: !!C2 } });
    });
  }, onMutate: async ({ id: x2, resource: m2, mutationMode: v2, dataProviderName: b, meta: C2, metaData: E2 }) => {
    let { identifier: h } = i2(m2), { gqlMutation: L, gqlQuery: A, ...M } = F(C2, E2) ?? {}, Q = Ye(w)(h, j(h, b, a), M), S = R2().data(j(h, b, a)).resource(h), G = v2 ?? d3;
    await c.cancelQueries(S.get(w), void 0, { silent: true });
    let $ = c.getQueriesData(S.get(w));
    return G !== "pessimistic" && (c.setQueriesData(S.action("list").params(M ?? {}).get(w), (K) => K ? { data: K.data.filter((N) => {
      var W;
      return ((W = N.id) == null ? void 0 : W.toString()) !== x2.toString();
    }), total: K.total - 1 } : null), c.setQueriesData(S.action("many").get(w), (K) => {
      if (!K)
        return null;
      let X = K.data.filter((N) => {
        var W;
        return ((W = N.id) == null ? void 0 : W.toString()) !== (x2 == null ? void 0 : x2.toString());
      });
      return { ...K, data: X };
    })), { previousQueries: $, queryKey: Q };
  }, onSettled: (x2, m2, { id: v2, resource: b, dataProviderName: C2, invalidates: E2 = ["list", "many"] }) => {
    let { identifier: h } = i2(b);
    U({ resource: h, dataProviderName: j(h, C2, a), invalidates: E2 }), p3({ type: "REMOVE", payload: { id: v2, resource: h } });
  }, onSuccess: (x2, { id: m2, resource: v2, successNotification: b, dataProviderName: C2, meta: E2, metaData: h }, L) => {
    let { resource: A, identifier: M } = i2(v2), Q = g2.singular(M), S = j(M, C2, a), G = D({ resource: A, meta: F(E2, h) });
    c.removeQueries(L == null ? void 0 : L.queryKey.detail(m2));
    let $ = typeof b == "function" ? b(x2, m2, M) : b;
    T2($, { key: `${m2}-${M}-notification`, description: l2("notifications.success", "Success"), message: l2("notifications.deleteSuccess", { resource: l2(`${M}.${M}`, Q) }, `Successfully deleted a ${Q}`), type: "success" }), y2 == null || y2({ channel: `resources/${A.name}`, type: "deleted", payload: { ids: [m2] }, date: /* @__PURE__ */ new Date(), meta: { ...G, dataProviderName: S } });
    let { fields: K, operation: X, variables: N, ...W } = G || {};
    f2 == null || f2.mutate({ action: "delete", resource: A.name, meta: { id: m2, dataProviderName: S, ...W } }), c.removeQueries(L == null ? void 0 : L.queryKey.detail(m2));
  }, onError: (x2, { id: m2, resource: v2, errorNotification: b }, C2) => {
    let { identifier: E2 } = i2(v2);
    if (C2)
      for (let h of C2.previousQueries)
        c.setQueryData(h[0], h[1]);
    if (x2.message !== "mutationCancelled") {
      n(x2);
      let h = g2.singular(E2), L = typeof b == "function" ? b(x2, m2, E2) : b;
      T2(L, { key: `${m2}-${E2}-notification`, message: l2("notifications.deleteError", { resource: h, statusCode: x2.statusCode }, `Error (status code: ${x2.statusCode})`), description: x2.message, type: "error" });
    }
  }, mutationKey: R2().data().mutation("delete").get(w), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useDelete", w) } }), { elapsedTime: P2 } = ee({ isLoading: I2.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...I2, overtime: { elapsedTime: P2 } };
}, "useDelete");
var to = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = ne(), { resources: n, select: s } = z(), a = H(), i2 = Ve(), c = pe(), d3 = Ce(), { log: u } = Be(), p3 = q(), { options: { textTransformers: l2 } } = se(), { keys: y2, preferLegacyKeys: f2 } = O2(), T2 = useMutation({ mutationFn: ({ resource: D, values: g2, meta: R2, metaData: w, dataProviderName: I2 }) => {
    let { resource: P2, identifier: x2 } = s(D), m2 = p3({ resource: P2, meta: F(R2, w) }), v2 = r(j(x2, I2, n));
    return v2.createMany ? v2.createMany({ resource: P2.name, variables: g2, meta: m2, metaData: m2 }) : Je(g2.map((b) => v2.create({ resource: P2.name, variables: b, meta: m2, metaData: m2 })));
  }, onSuccess: (D, { resource: g2, successNotification: R2, dataProviderName: w, invalidates: I2 = ["list", "many"], values: P2, meta: x2, metaData: m2 }) => {
    let { resource: v2, identifier: b } = s(g2), C2 = l2.plural(b), E2 = j(b, w, n), h = p3({ resource: v2, meta: F(x2, m2) }), L = typeof R2 == "function" ? R2(D, P2, b) : R2;
    c(L, { key: `createMany-${b}-notification`, message: a("notifications.createSuccess", { resource: a(`${b}.${b}`, b) }, `Successfully created ${C2}`), description: a("notifications.success", "Success"), type: "success" }), d3({ resource: b, dataProviderName: E2, invalidates: I2 });
    let A = D == null ? void 0 : D.data.filter(($) => ($ == null ? void 0 : $.id) !== void 0).map(($) => $.id);
    i2 == null || i2({ channel: `resources/${v2.name}`, type: "created", payload: { ids: A }, date: /* @__PURE__ */ new Date(), meta: { ...h, dataProviderName: E2 } });
    let { fields: M, operation: Q, variables: S, ...G } = h || {};
    u == null || u.mutate({ action: "createMany", resource: v2.name, data: P2, meta: { dataProviderName: E2, ids: A, ...G } });
  }, onError: (D, { resource: g2, errorNotification: R2, values: w }) => {
    let { identifier: I2 } = s(g2), P2 = typeof R2 == "function" ? R2(D, w, I2) : R2;
    c(P2, { key: `createMany-${I2}-notification`, description: D.message, message: a("notifications.createError", { resource: a(`${I2}.${I2}`, I2), statusCode: D.statusCode }, `There was an error creating ${I2} (status code: ${D.statusCode}`), type: "error" });
  }, mutationKey: y2().data().mutation("createMany").get(f2), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCreateMany", f2) } }), { elapsedTime: U } = ee({ isLoading: T2.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...T2, overtime: { elapsedTime: U } };
}, "useCreateMany");
var Na = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let { resources: r, select: n } = z(), s = useQueryClient(), a = ne(), i2 = H(), { mutationMode: c, undoableTimeout: d3 } = Ae(), u = J(), { mutate: p3 } = de({ v3LegacyAuthProviderCompatible: !!(u != null && u.isLegacy) }), { notificationDispatch: l2 } = _e(), y2 = Ve(), f2 = pe(), T2 = Ce(), { log: U } = Be(), D = q(), { options: { textTransformers: g2 } } = se(), { keys: R2, preferLegacyKeys: w } = O2(), I2 = useMutation({ mutationFn: ({ ids: x2, values: m2, resource: v2, onCancel: b, mutationMode: C2, undoableTimeout: E2, meta: h, metaData: L, dataProviderName: A }) => {
    let { resource: M, identifier: Q } = n(v2), S = D({ resource: M, meta: F(h, L) }), G = C2 ?? c, $ = E2 ?? d3, K = a(j(Q, A, r)), X = o(() => K.updateMany ? K.updateMany({ resource: M.name, ids: x2, variables: m2, meta: S, metaData: S }) : Je(x2.map((W) => K.update({ resource: M.name, id: W, variables: m2, meta: S, metaData: S }))), "mutationFn");
    return G !== "undoable" ? X() : new Promise((W, V) => {
      let B = o(() => {
        X().then((te) => W(te)).catch((te) => V(te));
      }, "doMutation"), _ = o(() => {
        V({ message: "mutationCancelled" });
      }, "cancelMutation");
      b && b(_), l2({ type: "ADD", payload: { id: x2, resource: Q, cancelMutation: _, doMutation: B, seconds: $, isSilent: !!b } });
    });
  }, onMutate: async ({ resource: x2, ids: m2, values: v2, mutationMode: b, dataProviderName: C2, meta: E2, metaData: h, optimisticUpdateMap: L = { list: true, many: true, detail: true } }) => {
    let { identifier: A } = n(x2), { gqlMutation: M, gqlQuery: Q, ...S } = F(E2, h) ?? {}, G = Ye(w)(A, j(A, C2, r), S), $ = R2().data(j(A, C2, r)).resource(A), K = b ?? c;
    await s.cancelQueries($.get(w), void 0, { silent: true });
    let X = s.getQueriesData($.get(w));
    if (K !== "pessimistic" && (L.list && s.setQueriesData($.action("list").params(S ?? {}).get(w), (N) => {
      if (typeof L.list == "function")
        return L.list(N, v2, m2);
      if (!N)
        return null;
      let W = N.data.map((V) => V.id !== void 0 && m2.filter((B) => B !== void 0).map(String).includes(V.id.toString()) ? { ...V, ...v2 } : V);
      return { ...N, data: W };
    }), L.many && s.setQueriesData($.action("many").get(w), (N) => {
      if (typeof L.many == "function")
        return L.many(N, v2, m2);
      if (!N)
        return null;
      let W = N.data.map((V) => V.id !== void 0 && m2.filter((B) => B !== void 0).map(String).includes(V.id.toString()) ? { ...V, ...v2 } : V);
      return { ...N, data: W };
    }), L.detail))
      for (let N of m2)
        s.setQueriesData($.action("one").id(N).params(S ?? {}).get(w), (W) => {
          if (typeof L.detail == "function")
            return L.detail(W, v2, N);
          if (!W)
            return null;
          let V = { ...W.data, ...v2 };
          return { ...W, data: V };
        });
    return { previousQueries: X, queryKey: G };
  }, onSettled: (x2, m2, { ids: v2, resource: b, dataProviderName: C2 }) => {
    let { identifier: E2 } = n(b);
    T2({ resource: E2, invalidates: ["list", "many"], dataProviderName: j(E2, C2, r) }), v2.forEach((h) => T2({ resource: E2, invalidates: ["detail"], dataProviderName: j(E2, C2, r), id: h })), l2({ type: "REMOVE", payload: { id: v2, resource: E2 } });
  }, onSuccess: (x2, { ids: m2, resource: v2, meta: b, metaData: C2, dataProviderName: E2, successNotification: h, values: L }, A) => {
    let { resource: M, identifier: Q } = n(v2), S = g2.singular(Q), G = j(Q, E2, r), $ = D({ resource: M, meta: F(b, C2) }), K = typeof h == "function" ? h(x2, { ids: m2, values: L }, Q) : h;
    f2(K, { key: `${m2}-${Q}-notification`, description: i2("notifications.success", "Successful"), message: i2("notifications.editSuccess", { resource: i2(`${Q}.${Q}`, Q) }, `Successfully updated ${S}`), type: "success" }), y2 == null || y2({ channel: `resources/${M.name}`, type: "updated", payload: { ids: m2.map(String) }, date: /* @__PURE__ */ new Date(), meta: { ...$, dataProviderName: G } });
    let X = [];
    A && m2.forEach((_) => {
      let te = s.getQueryData(A.queryKey.detail(_));
      X.push(Object.keys(L || {}).reduce((ie, De) => {
        var Y;
        return ie[De] = (Y = te == null ? void 0 : te.data) == null ? void 0 : Y[De], ie;
      }, {}));
    });
    let { fields: N, operation: W, variables: V, ...B } = $ || {};
    U == null || U.mutate({ action: "updateMany", resource: M.name, data: L, previousData: X, meta: { ids: m2, dataProviderName: G, ...B } });
  }, onError: (x2, { ids: m2, resource: v2, errorNotification: b, values: C2 }, E2) => {
    let { identifier: h } = n(v2);
    if (E2)
      for (let L of E2.previousQueries)
        s.setQueryData(L[0], L[1]);
    if (x2.message !== "mutationCancelled") {
      p3 == null || p3(x2);
      let L = g2.singular(h), A = typeof b == "function" ? b(x2, { ids: m2, values: C2 }, h) : b;
      f2(A, { key: `${m2}-${h}-updateMany-error-notification`, message: i2("notifications.editError", { resource: L, statusCode: x2.statusCode }, `Error when updating ${L} (status code: ${x2.statusCode})`), description: x2.message, type: "error" });
    }
  }, mutationKey: R2().data().mutation("updateMany").get(w), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useUpdateMany", w) } }), { elapsedTime: P2 } = ee({ isLoading: I2.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...I2, overtime: { elapsedTime: P2 } };
}, "useUpdateMany");
var $a = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = J(), { mutate: n } = de({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), { mutationMode: s, undoableTimeout: a } = Ae(), i2 = ne(), { notificationDispatch: c } = _e(), d3 = H(), u = Ve(), p3 = pe(), l2 = Ce(), { log: y2 } = Be(), { resources: f2, select: T2 } = z(), U = useQueryClient(), D = q(), { options: { textTransformers: g2 } } = se(), { keys: R2, preferLegacyKeys: w } = O2(), I2 = useMutation({ mutationFn: ({ resource: x2, ids: m2, mutationMode: v2, undoableTimeout: b, onCancel: C2, meta: E2, metaData: h, dataProviderName: L, values: A }) => {
    let { resource: M, identifier: Q } = T2(x2), S = D({ resource: M, meta: F(E2, h) }), G = v2 ?? s, $ = b ?? a, K = i2(j(Q, L, f2)), X = o(() => K.deleteMany ? K.deleteMany({ resource: M.name, ids: m2, meta: S, metaData: S, variables: A }) : Je(m2.map((W) => K.deleteOne({ resource: M.name, id: W, meta: S, metaData: S, variables: A }))), "mutationFn");
    return G !== "undoable" ? X() : new Promise((W, V) => {
      let B = o(() => {
        X().then((te) => W(te)).catch((te) => V(te));
      }, "doMutation"), _ = o(() => {
        V({ message: "mutationCancelled" });
      }, "cancelMutation");
      C2 && C2(_), c({ type: "ADD", payload: { id: m2, resource: Q, cancelMutation: _, doMutation: B, seconds: $, isSilent: !!C2 } });
    });
  }, onMutate: async ({ ids: x2, resource: m2, mutationMode: v2, dataProviderName: b, meta: C2, metaData: E2 }) => {
    let { identifier: h } = T2(m2), { gqlMutation: L, gqlQuery: A, ...M } = F(C2, E2) ?? {}, Q = Ye(w)(h, j(h, b, f2), M), S = R2().data(j(h, b, f2)).resource(h), G = v2 ?? s;
    await U.cancelQueries(S.get(w), void 0, { silent: true });
    let $ = U.getQueriesData(S.get(w));
    if (G !== "pessimistic") {
      U.setQueriesData(S.action("list").params(M ?? {}).get(w), (K) => K ? { data: K.data.filter((N) => N.id && !x2.map(String).includes(N.id.toString())), total: K.total - 1 } : null), U.setQueriesData(S.action("many").get(w), (K) => {
        if (!K)
          return null;
        let X = K.data.filter((N) => N.id ? !x2.map(String).includes(N.id.toString()) : false);
        return { ...K, data: X };
      });
      for (let K of x2)
        U.setQueriesData(S.action("one").id(K).params(M).get(w), (X) => !X || X.data.id === K ? null : { ...X });
    }
    return { previousQueries: $, queryKey: Q };
  }, onSettled: (x2, m2, { resource: v2, ids: b, dataProviderName: C2, invalidates: E2 = ["list", "many"] }) => {
    let { identifier: h } = T2(v2);
    l2({ resource: h, dataProviderName: j(h, C2, f2), invalidates: E2 }), c({ type: "REMOVE", payload: { id: b, resource: h } });
  }, onSuccess: (x2, { ids: m2, resource: v2, meta: b, metaData: C2, dataProviderName: E2, successNotification: h }, L) => {
    let { resource: A, identifier: M } = T2(v2), Q = j(M, E2, f2), S = D({ resource: A, meta: F(b, C2) });
    m2.forEach((W) => U.removeQueries(L == null ? void 0 : L.queryKey.detail(W)));
    let G = typeof h == "function" ? h(x2, m2, M) : h;
    p3(G, { key: `${m2}-${M}-notification`, description: d3("notifications.success", "Success"), message: d3("notifications.deleteSuccess", { resource: d3(`${M}.${M}`, M) }, `Successfully deleted ${M}`), type: "success" }), u == null || u({ channel: `resources/${A.name}`, type: "deleted", payload: { ids: m2 }, date: /* @__PURE__ */ new Date(), meta: { ...S, dataProviderName: Q } });
    let { fields: $, operation: K, variables: X, ...N } = S || {};
    y2 == null || y2.mutate({ action: "deleteMany", resource: A.name, meta: { ids: m2, dataProviderName: Q, ...N } }), m2.forEach((W) => U.removeQueries(L == null ? void 0 : L.queryKey.detail(W)));
  }, onError: (x2, { ids: m2, resource: v2, errorNotification: b }, C2) => {
    let { identifier: E2 } = T2(v2);
    if (C2)
      for (let h of C2.previousQueries)
        U.setQueryData(h[0], h[1]);
    if (x2.message !== "mutationCancelled") {
      n(x2);
      let h = g2.singular(E2), L = typeof b == "function" ? b(x2, m2, E2) : b;
      p3(L, { key: `${m2}-${E2}-notification`, message: d3("notifications.deleteError", { resource: h, statusCode: x2.statusCode }, `Error (status code: ${x2.statusCode})`), description: x2.message, type: "error" });
    }
  }, mutationKey: R2().data().mutation("deleteMany").get(w), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useDeleteMany", w) } }), { elapsedTime: P2 } = ee({ isLoading: I2.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...I2, overtime: { elapsedTime: P2 } };
}, "useDeleteMany");
var Wa = o((e) => {
  var s;
  let t = ne(), { resource: r } = z(), { getApiUrl: n } = t(e ?? ((s = F(r == null ? void 0 : r.meta, r == null ? void 0 : r.options)) == null ? void 0 : s.dataProviderName));
  return n();
}, "useApiUrl");
var _a = o(({ url: e, method: t, config: r, queryOptions: n, successNotification: s, errorNotification: a, meta: i2, metaData: c, dataProviderName: d3, overtimeOptions: u }) => {
  let p3 = ne(), l2 = J(), { mutate: y2 } = de({ v3LegacyAuthProviderCompatible: !!(l2 != null && l2.isLegacy) }), f2 = H(), T2 = pe(), U = q(), { keys: D, preferLegacyKeys: g2 } = O2(), R2 = F(i2, c), { custom: w } = p3(d3), I2 = U({ meta: R2 });
  if (w) {
    let P2 = useQuery({ queryKey: D().data(d3).mutation("custom").params({ method: t, url: e, ...r, ...R2 || {} }).get(g2), queryFn: ({ queryKey: m2, pageParam: v2, signal: b }) => w({ url: e, method: t, ...r, meta: { ...I2, queryContext: { queryKey: m2, pageParam: v2, signal: b } }, metaData: { ...I2, queryContext: { queryKey: m2, pageParam: v2, signal: b } } }), ...n, onSuccess: (m2) => {
      var b;
      (b = n == null ? void 0 : n.onSuccess) == null || b.call(n, m2);
      let v2 = typeof s == "function" ? s(m2, { ...r, ...I2 }) : s;
      T2(v2);
    }, onError: (m2) => {
      var b;
      y2(m2), (b = n == null ? void 0 : n.onError) == null || b.call(n, m2);
      let v2 = typeof a == "function" ? a(m2, { ...r, ...I2 }) : a;
      T2(v2, { key: `${t}-notification`, message: f2("notifications.error", { statusCode: m2.statusCode }, `Error (status code: ${m2.statusCode})`), description: m2.message, type: "error" });
    }, meta: { ...n == null ? void 0 : n.meta, ...P("useCustom", g2) } }), { elapsedTime: x2 } = ee({ isLoading: P2.isFetching, interval: u == null ? void 0 : u.interval, onInterval: u == null ? void 0 : u.onInterval });
    return { ...P2, overtime: { elapsedTime: x2 } };
  }
  throw Error("Not implemented custom on data provider.");
}, "useCustom");
var Za = o(({ mutationOptions: e, overtimeOptions: t } = {}) => {
  let r = J(), { mutate: n } = de({ v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy) }), s = pe(), a = ne(), i2 = H(), c = q(), { keys: d3, preferLegacyKeys: u } = O2(), p3 = useMutation(({ url: y2, method: f2, values: T2, meta: U, metaData: D, dataProviderName: g2, config: R2 }) => {
    let w = c({ meta: F(U, D) }), { custom: I2 } = a(g2);
    if (I2)
      return I2({ url: y2, method: f2, payload: T2, meta: w, metaData: w, headers: { ...R2 == null ? void 0 : R2.headers } });
    throw Error("Not implemented custom on data provider.");
  }, { onSuccess: (y2, { successNotification: f2, config: T2, meta: U, metaData: D }) => {
    let g2 = typeof f2 == "function" ? f2(y2, { ...T2, ...F(U, D) || {} }) : f2;
    s(g2);
  }, onError: (y2, { errorNotification: f2, method: T2, config: U, meta: D, metaData: g2 }) => {
    n(y2);
    let R2 = typeof f2 == "function" ? f2(y2, { ...U, ...F(D, g2) || {} }) : f2;
    s(R2, { key: `${T2}-notification`, message: i2("notifications.error", { statusCode: y2.statusCode }, `Error (status code: ${y2.statusCode})`), description: y2.message, type: "error" });
  }, mutationKey: d3().data().mutation("customMutation").get(u), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useCustomMutation", u) } }), { elapsedTime: l2 } = ee({ isLoading: p3.isLoading, interval: t == null ? void 0 : t.interval, onInterval: t == null ? void 0 : t.onInterval });
  return { ...p3, overtime: { elapsedTime: l2 } };
}, "useCustomMutation");
var bn = { default: {} };
var Vt = import_react17.default.createContext(bn);
var vn = o(({ children: e, dataProvider: t }) => {
  let r = bn;
  return t && (!("default" in t) && ("getList" in t || "getOne" in t) ? r = { default: t } : r = t), import_react17.default.createElement(Vt.Provider, { value: r }, e);
}, "DataContextProvider");
var ne = o(() => {
  let e = (0, import_react16.useContext)(Vt);
  return (0, import_react16.useCallback)((r) => {
    if (r) {
      let n = e == null ? void 0 : e[r];
      if (!n)
        throw new Error(`"${r}" Data provider not found`);
      if (n && !(e != null && e.default))
        throw new Error("If you have multiple data providers, you must provide default data provider property");
      return e[r];
    }
    if (e.default)
      return e.default;
    throw new Error('There is no "default" data provider. Please pass dataProviderName.');
  }, [e]);
}, "useDataProvider");
var ti = o(({ resource: e, config: t, filters: r, hasPagination: n, pagination: s, sorters: a, queryOptions: i2, successNotification: c, errorNotification: d3, meta: u, metaData: p3, liveMode: l2, onLiveEvent: y2, liveParams: f2, dataProviderName: T2, overtimeOptions: U }) => {
  let { resources: D, resource: g2, identifier: R2 } = z(e), w = ne(), I2 = H(), P2 = J(), { mutate: x2 } = de({ v3LegacyAuthProviderCompatible: !!(P2 != null && P2.isLegacy) }), m2 = pe(), v2 = q(), { keys: b, preferLegacyKeys: C2 } = O2(), E2 = j(R2, T2, D), h = F(u, p3), L = F(r, t == null ? void 0 : t.filters), A = F(a, t == null ? void 0 : t.sort), M = F(n, t == null ? void 0 : t.hasPagination), Q = St({ pagination: s, configPagination: t == null ? void 0 : t.pagination, hasPagination: M }), S = Q.mode === "server", G = { meta: h, metaData: h, filters: L, hasPagination: S, pagination: Q, sorters: A, config: { ...t, sort: A } }, $ = (i2 == null ? void 0 : i2.enabled) === void 0 || (i2 == null ? void 0 : i2.enabled) === true, K = v2({ resource: g2, meta: h }), { getList: X } = w(E2);
  st({ resource: R2, types: ["*"], params: { meta: K, metaData: K, pagination: Q, hasPagination: S, sort: A, sorters: A, filters: L, subscriptionType: "useList", ...f2 }, channel: `resources/${g2.name}`, enabled: $, liveMode: l2, onLiveEvent: y2, dataProviderName: E2, meta: { ...K, dataProviderName: T2 } });
  let N = useInfiniteQuery({ queryKey: b().data(E2).resource(R2).action("infinite").params({ ...h || {}, filters: L, hasPagination: S, ...S && { pagination: Q }, ...a && { sorters: a }, ...(t == null ? void 0 : t.sort) && { sort: t == null ? void 0 : t.sort } }).get(C2), queryFn: ({ queryKey: V, pageParam: B, signal: _ }) => {
    let te = { ...Q, current: B };
    return X({ resource: g2.name, pagination: te, hasPagination: S, filters: L, sort: A, sorters: A, meta: { ...K, queryContext: { queryKey: V, pageParam: B, signal: _ } }, metaData: { ...K, queryContext: { queryKey: V, pageParam: B, signal: _ } } }).then(({ data: ie, total: De, ...Y }) => ({ data: ie, total: De, pagination: te, ...Y }));
  }, getNextPageParam: (V) => tr(V), getPreviousPageParam: (V) => rr(V), ...i2, onSuccess: (V) => {
    var _;
    (_ = i2 == null ? void 0 : i2.onSuccess) == null || _.call(i2, V);
    let B = typeof c == "function" ? c(V, G, R2) : c;
    m2(B);
  }, onError: (V) => {
    var _;
    x2(V), (_ = i2 == null ? void 0 : i2.onError) == null || _.call(i2, V);
    let B = typeof d3 == "function" ? d3(V, G, R2) : d3;
    m2(B, { key: `${R2}-useInfiniteList-notification`, message: I2("notifications.error", { statusCode: V.statusCode }, `Error (status code: ${V.statusCode})`), description: V.message, type: "error" });
  }, meta: { ...i2 == null ? void 0 : i2.meta, ...P("useInfiniteList", C2) } }), { elapsedTime: W } = ee({ isLoading: N.isFetching, interval: U == null ? void 0 : U.interval, onInterval: U == null ? void 0 : U.onInterval });
  return { ...N, overtime: { elapsedTime: W } };
}, "useInfiniteList");
var qe = import_react19.default.createContext({});
var Ln = o(({ liveProvider: e, children: t }) => import_react19.default.createElement(qe.Provider, { value: { liveProvider: e } }, t), "LiveContextProvider");
var Ce = o(() => {
  let { resources: e } = z(), t = useQueryClient(), { keys: r, preferLegacyKeys: n } = O2();
  return (0, import_react20.useCallback)(async ({ resource: a, dataProviderName: i2, invalidates: c, id: d3, invalidationFilters: u = { type: "all", refetchType: "active" }, invalidationOptions: p3 = { cancelRefetch: false } }) => {
    if (c === false)
      return;
    let l2 = j(a, i2, e), y2 = r().data(l2).resource(a ?? "");
    await Promise.all(c.map((f2) => {
      switch (f2) {
        case "all":
          return t.invalidateQueries(r().data(l2).get(n), u, p3);
        case "list":
          return t.invalidateQueries(y2.action("list").get(n), u, p3);
        case "many":
          return t.invalidateQueries(y2.action("many").get(n), u, p3);
        case "resourceAll":
          return t.invalidateQueries(y2.get(n), u, p3);
        case "detail":
          return t.invalidateQueries(y2.action("one").id(d3 || "").get(n), u, p3);
        default:
          return;
      }
    }));
  }, []);
}, "useInvalidate");
var Un = o((e) => {
  let t = (0, import_react24.useRef)(e);
  return isEqual_default(t.current, e) || (t.current = e), t.current;
}, "useMemoized");
var yr = o((e, t) => {
  let r = Un(t);
  return (0, import_react23.useMemo)(e, r);
}, "useDeepMemo");
var at = import_react22.default.createContext({ resources: [] });
var Mn = o(({ resources: e, children: t }) => {
  let r = yr(() => or(e ?? []), [e]);
  return import_react22.default.createElement(at.Provider, { value: { resources: r } }, t);
}, "ResourceContextProvider");
var In = import_react25.default.createContext("new");
var Sn = In.Provider;
var Z = o(() => import_react25.default.useContext(In), "useRouterType");
var Fn = {};
var et = (0, import_react27.createContext)(Fn);
var An = o(({ children: e, router: t }) => import_react27.default.createElement(et.Provider, { value: t ?? Fn }, e), "RouterContextProvider");
var ro = o(() => {
  let e = (0, import_react28.useContext)(et);
  return import_react28.default.useMemo(() => (e == null ? void 0 : e.parse) ?? (() => () => ({})), [e == null ? void 0 : e.parse])();
}, "useParse");
var ae = o(() => {
  let e = ro();
  return import_react26.default.useMemo(() => e(), [e]);
}, "useParsed");
function z(e) {
  let { resources: t } = (0, import_react21.useContext)(at), r = Z(), n = ae(), s = { resourceName: e && typeof e != "string" ? e.resourceName : e, resourceNameOrRouteName: e && typeof e != "string" ? e.resourceNameOrRouteName : e, recordItemId: e && typeof e != "string" ? e.recordItemId : void 0 }, a = o((l2, y2 = true) => {
    let T2 = ye(l2, t, r === "legacy");
    if (T2)
      return { resource: T2, identifier: T2.identifier ?? T2.name };
    if (y2) {
      let U = { name: l2, identifier: l2 }, D = U.identifier ?? U.name;
      return { resource: U, identifier: D };
    }
  }, "select"), i2 = kn(), { useParams: c } = re(), d3 = c();
  if (r === "legacy") {
    let l2 = s.resourceNameOrRouteName ? s.resourceNameOrRouteName : d3.resource, y2 = l2 ? i2(l2) : void 0, f2 = (s == null ? void 0 : s.recordItemId) ?? d3.id, T2 = d3.action, U = (s == null ? void 0 : s.resourceName) ?? (y2 == null ? void 0 : y2.name), D = (y2 == null ? void 0 : y2.identifier) ?? (y2 == null ? void 0 : y2.name);
    return { resources: t, resource: y2, resourceName: U, id: f2, action: T2, select: a, identifier: D };
  }
  let u, p3 = typeof e == "string" ? e : s == null ? void 0 : s.resourceNameOrRouteName;
  if (p3) {
    let l2 = ye(p3, t);
    l2 ? u = l2 : u = { name: p3 };
  } else
    n != null && n.resource && (u = n.resource);
  return { resources: t, resource: u, resourceName: u == null ? void 0 : u.name, id: n.id, action: n.action, select: a, identifier: (u == null ? void 0 : u.identifier) ?? (u == null ? void 0 : u.name) };
}
o(z, "useResource");
var kn = o(() => {
  let { resources: e } = (0, import_react29.useContext)(at);
  return (0, import_react29.useCallback)((r) => {
    let n = ye(r, e, true);
    return n || { name: r, route: r };
  }, [e]);
}, "useResourceWithRoute");
var st = o(({ resource: e, params: t, channel: r, types: n, enabled: s = true, liveMode: a, onLiveEvent: i2, dataProviderName: c, meta: d3 }) => {
  var g2;
  let { resource: u, identifier: p3 } = z(e), { liveProvider: l2 } = (0, import_react18.useContext)(qe), { liveMode: y2, onLiveEvent: f2 } = (0, import_react18.useContext)(ve), T2 = a ?? y2, U = Ce(), D = c ?? (d3 == null ? void 0 : d3.dataProviderName) ?? ((g2 = u == null ? void 0 : u.meta) == null ? void 0 : g2.dataProviderName);
  (0, import_react18.useEffect)(() => {
    let R2, w = o((I2) => {
      T2 === "auto" && U({ resource: p3, dataProviderName: D, invalidates: ["resourceAll"], invalidationFilters: { type: "active", refetchType: "active" }, invalidationOptions: { cancelRefetch: false } }), i2 == null || i2(I2), f2 == null || f2(I2);
    }, "callback");
    return T2 && T2 !== "off" && s && (R2 = l2 == null ? void 0 : l2.subscribe({ channel: r, params: { resource: u == null ? void 0 : u.name, ...t }, types: n, callback: w, dataProviderName: D, meta: { ...d3, dataProviderName: D } })), () => {
      R2 && (l2 == null || l2.unsubscribe(R2));
    };
  }, [s]);
}, "useResourceSubscription");
var Vn = o((e) => {
  let { liveMode: t } = (0, import_react30.useContext)(ve);
  return e ?? t;
}, "useLiveMode");
var IP = o(({ params: e, channel: t, types: r = ["*"], enabled: n = true, onLiveEvent: s, dataProviderName: a = "default", meta: i2 }) => {
  let { liveProvider: c } = (0, import_react31.useContext)(qe);
  (0, import_react31.useEffect)(() => {
    let d3;
    return n && (d3 = c == null ? void 0 : c.subscribe({ channel: t, params: e, types: r, callback: s, dataProviderName: a, meta: { ...i2, dataProviderName: a } })), () => {
      d3 && (c == null || c.unsubscribe(d3));
    };
  }, [n]);
}, "useSubscription");
var Ve = o(() => {
  let { liveProvider: e } = (0, import_react32.useContext)(qe);
  return e == null ? void 0 : e.publish;
}, "usePublish");
var no = (0, import_react34.createContext)({ notifications: [], notificationDispatch: () => false });
var Ci = [];
var bi = o((e, t) => {
  switch (t.type) {
    case "ADD":
      return [...e.filter((n) => !(isEqual_default(n.id, t.payload.id) && n.resource === t.payload.resource)), { ...t.payload, isRunning: true }];
    case "REMOVE":
      return e.filter((r) => !(isEqual_default(r.id, t.payload.id) && r.resource === t.payload.resource));
    case "DECREASE_NOTIFICATION_SECOND":
      return e.map((r) => isEqual_default(r.id, t.payload.id) && r.resource === t.payload.resource ? { ...r, seconds: t.payload.seconds - 1e3 } : r);
    default:
      return e;
  }
}, "undoableQueueReducer");
var Nn = o(({ children: e }) => {
  let [t, r] = (0, import_react34.useReducer)(bi, Ci), n = { notifications: t, notificationDispatch: r };
  return import_react34.default.createElement(no.Provider, { value: n }, e, typeof window < "u" ? t.map((s) => import_react34.default.createElement(Kn, { key: `${s.id}-${s.resource}-queue`, notification: s })) : null);
}, "UndoableQueueContextProvider");
var _e = o(() => {
  let { notifications: e, notificationDispatch: t } = (0, import_react33.useContext)(no);
  return { notifications: e, notificationDispatch: t };
}, "useCancelNotification");
var Bt = (0, import_react36.createContext)({});
var Gn = o(({ open: e, close: t, children: r }) => import_react36.default.createElement(Bt.Provider, { value: { open: e, close: t } }, r), "NotificationContextProvider");
var we = o(() => {
  let { open: e, close: t } = (0, import_react35.useContext)(Bt);
  return { open: e, close: t };
}, "useNotification");
var pe = o(() => {
  let { open: e } = we();
  return (0, import_react37.useCallback)((r, n) => {
    r !== false && (r ? e == null || e(r) : n && (e == null || e(n)));
  }, []);
}, "useHandleNotification");
var ke = import_react39.default.createContext({});
var $n = o(({ children: e, i18nProvider: t }) => import_react39.default.createElement(ke.Provider, { value: { i18nProvider: t } }, e), "I18nContextProvider");
var so = o(() => {
  let { i18nProvider: e } = (0, import_react38.useContext)(ke);
  return (0, import_react38.useCallback)((t) => e == null ? void 0 : e.changeLocale(t), []);
}, "useSetLocale");
var H = o(() => {
  let { i18nProvider: e } = (0, import_react40.useContext)(ke);
  return (0, import_react40.useMemo)(() => {
    function r(n, s, a) {
      return (e == null ? void 0 : e.translate(n, s, a)) ?? a ?? (typeof s == "string" && typeof a > "u" ? s : n);
    }
    return o(r, "translate"), r;
  }, [e]);
}, "useTranslate");
var ao = o(() => {
  let { i18nProvider: e } = (0, import_react41.useContext)(ke);
  return (0, import_react41.useCallback)(() => e == null ? void 0 : e.getLocale(), []);
}, "useGetLocale");
var DR = o(() => {
  let e = H(), t = so(), r = ao();
  return { translate: e, changeLocale: t, getLocale: r };
}, "useTranslation");
var BR = o(({ resourceName: e, resource: t, sorter: r, sorters: n, filters: s, maxItemCount: a, pageSize: i2 = 20, mapData: c = o((U) => U, "mapData"), exportOptions: d3, unparseConfig: u, meta: p3, metaData: l2, dataProviderName: y2, onError: f2, download: T2 } = {}) => {
  let [U, D] = (0, import_react42.useState)(false), g2 = ne(), R2 = q(), { resource: w, resources: I2, identifier: P2 } = z(F(t, e)), m2 = `${nt()(P2, "plural")}-${(/* @__PURE__ */ new Date()).toLocaleString()}`, { getList: v2 } = g2(j(P2, y2, I2)), b = R2({ resource: w, meta: F(p3, l2) });
  return { isLoading: U, triggerExport: o(async () => {
    D(true);
    let E2 = [], h = 1, L = true;
    for (; L; )
      try {
        let { data: S, total: G } = await v2({ resource: (w == null ? void 0 : w.name) ?? "", filters: s, sort: F(n, r), sorters: F(n, r), pagination: { current: h, pageSize: i2, mode: "server" }, meta: b, metaData: b });
        h++, E2.push(...S), a && E2.length >= a && (E2 = E2.slice(0, a), L = false), G === E2.length && (L = false);
      } catch (S) {
        D(false), L = false, f2 == null || f2(S);
        return;
      }
    let A = typeof u < "u" && u !== null;
    (0, import_warn_once2.default)(A && typeof d3 < "u" && d3 !== null, `[useExport]: resource: "${P2}" 

Both \`unparseConfig\` and \`exportOptions\` are set, \`unparseConfig\` will take precedence`);
    let M = { filename: m2, useKeysAsHeaders: true, useBom: true, title: "My Generated Report", quoteStrings: '"', ...d3 };
    (0, import_warn_once2.default)((d3 == null ? void 0 : d3.decimalSeparator) !== void 0, `[useExport]: resource: "${P2}" 

Use of \`decimalSeparator\` no longer supported, please use \`mapData\` instead.

See https://refine.dev/docs/api-reference/core/hooks/import-export/useExport/`), A ? u = { quotes: true, ...u } : u = { columns: M.useKeysAsHeaders ? void 0 : M.headers, delimiter: M.fieldSeparator, header: M.showLabels || M.useKeysAsHeaders, quoteChar: M.quoteStrings, quotes: true };
    let Q = import_papaparse.default.unparse(E2.map(c), u);
    if (M.showTitle && (Q = `${M.title}\r

${Q}`), typeof window < "u" && Q.length > 0 && (T2 ?? true)) {
      let S = M.useTextFile ? ".txt" : ".csv", G = `text/${M.useTextFile ? "plain" : "csv"};charset=utf8;`, $ = `${(M.filename ?? "download").replace(/ /g, "_")}${S}`;
      Nr($, `${M != null && M.useBom ? "\uFEFF" : ""}${Q}`, G);
    }
    return D(false), Q;
  }, "triggerExport") };
}, "useExport");
var OR = o((e = {}) => {
  var K, X, N, W, V;
  let t = q(), r = Ce(), { redirect: n } = ht(), { mutationMode: s } = Ae(), { setWarnWhen: a } = dt(), i2 = zn(), c = F(e.meta, e.metaData), d3 = e.mutationMode ?? s, { id: u, setId: p3, resource: l2, identifier: y2, formAction: f2 } = Ne({ resource: e.resource, id: e.id, action: e.action }), [T2, U] = import_react43.default.useState(false), D = f2 === "edit", g2 = f2 === "clone", R2 = f2 === "create", w = t({ resource: l2, meta: c }), I2 = (D || g2) && !!e.resource, P2 = typeof e.id < "u", x2 = ((K = e.queryOptions) == null ? void 0 : K.enabled) === false;
  (0, import_warn_once3.default)(I2 && !P2 && !x2, Hi(f2, y2, u));
  let m2 = Qr({ redirectFromProps: e.redirect, action: f2, redirectOptions: n }), v2 = o((B = D ? "list" : "edit", _ = u, te = {}) => {
    i2({ redirect: B, resource: l2, id: _, meta: { ...c, ...te } });
  }, "redirect"), b = kt({ resource: y2, id: u, queryOptions: { enabled: !R2 && u !== void 0, ...e.queryOptions }, liveMode: e.liveMode, onLiveEvent: e.onLiveEvent, liveParams: e.liveParams, meta: { ...w, ...e.queryMeta }, dataProviderName: e.dataProviderName }), C2 = Qt({ mutationOptions: e.createMutationOptions }), E2 = qr({ mutationOptions: e.updateMutationOptions }), h = D ? E2 : C2, A = h.isLoading || b.isFetching, { elapsedTime: M } = ee({ isLoading: A, interval: (X = e.overtimeOptions) == null ? void 0 : X.interval, onInterval: (N = e.overtimeOptions) == null ? void 0 : N.onInterval });
  import_react43.default.useEffect(() => () => {
    var B;
    (B = e.autoSave) != null && B.invalidateOnUnmount && T2 && y2 && typeof u < "u" && r({ id: u, invalidates: e.invalidates || ["list", "many", "detail"], dataProviderName: e.dataProviderName, resource: y2 });
  }, [(W = e.autoSave) == null ? void 0 : W.invalidateOnUnmount, T2]);
  let Q = o(async (B, { isAutosave: _ = false } = {}) => {
    let te = d3 === "pessimistic";
    a(false);
    let ie = o((Y) => v2(m2, Y), "onSuccessRedirect");
    return new Promise((Y, Pe) => {
      if (!l2)
        return Pe(Bi);
      if (g2 && !u)
        return Pe(Ni);
      if (!B)
        return Pe(Ki);
      if (_ && !D)
        return Pe(Gi);
      !te && !_ && (ir(() => ie()), Y());
      let ft = { values: B, resource: y2 ?? l2.name, meta: { ...w, ...e.mutationMeta }, metaData: { ...w, ...e.mutationMeta }, dataProviderName: e.dataProviderName, invalidates: _ ? [] : e.invalidates, successNotification: _ ? false : e.successNotification, errorNotification: _ ? false : e.errorNotification, ...D ? { id: u ?? "", mutationMode: d3, undoableTimeout: e.undoableTimeout, optimisticUpdateMap: e.optimisticUpdateMap } : {} }, { mutateAsync: yt } = D ? E2 : C2;
      yt(ft, { onSuccess: e.onMutationSuccess ? (Se, Xe, it) => {
        var ot;
        (ot = e.onMutationSuccess) == null || ot.call(e, Se, B, it, _);
      } : void 0, onError: e.onMutationError ? (Se, Xe, it) => {
        var ot;
        (ot = e.onMutationError) == null || ot.call(e, Se, B, it, _);
      } : void 0 }).then((Se) => {
        te && !_ && ir(() => {
          var Xe;
          return ie((Xe = Se == null ? void 0 : Se.data) == null ? void 0 : Xe.id);
        }), _ && U(true), Y(Se);
      }).catch(Pe);
    });
  }, "onFinish"), S = Kr((B) => Q(B, { isAutosave: true }), ((V = e.autoSave) == null ? void 0 : V.debounce) || 1e3, "Cancelled by debounce"), G = { elapsedTime: M }, $ = { status: E2.status, data: E2.data, error: E2.error };
  return { onFinish: Q, onFinishAutoSave: S, formLoading: A, mutationResult: h, queryResult: b, autoSaveProps: $, id: u, setId: p3, redirect: v2, overtime: G };
}, "useForm");
var Bi = new Error("[useForm]: `resource` is not defined or not matched but is required");
var Ni = new Error("[useForm]: `id` is not defined but is required in edit and clone actions");
var Ki = new Error("[useForm]: `values` is not provided but is required");
var Gi = new Error("[useForm]: `autoSave` is only allowed in edit action");
var Hi = o((e, t, r) => `[useForm]: action: "${e}", resource: "${t}", id: ${r}

If you don't use the \`setId\` method to set the \`id\`, you should pass the \`id\` prop to \`useForm\`. Otherwise, \`useForm\` will not be able to infer the \`id\` from the current URL with custom resource provided.

See https://refine.dev/docs/data/hooks/use-form/#id-`, "idWarningMessage");
var zn = o(() => {
  let { show: e, edit: t, list: r, create: n } = ce();
  return (0, import_react44.useCallback)(({ redirect: a, resource: i2, id: c, meta: d3 = {} }) => {
    if (a && i2)
      return i2.show && a === "show" && c ? e(i2, c, void 0, d3) : i2.edit && a === "edit" && c ? t(i2, c, void 0, d3) : i2.create && a === "create" ? n(i2, void 0, d3) : r(i2, "push", d3);
  }, []);
}, "useRedirectionAfterSubmission");
var io = o(() => {
  let e = (0, import_react45.useContext)(et);
  return import_react45.default.useMemo(() => (e == null ? void 0 : e.back) ?? (() => () => {
  }), [e == null ? void 0 : e.back])();
}, "useBack");
var pt = o(() => {
  let e = Z(), { resource: t, resources: r } = z(), n = ae();
  return import_react47.default.useCallback(({ resource: a, action: i2, meta: c }) => {
    var y2;
    let d3 = a || t;
    if (!d3)
      return;
    let p3 = (y2 = he(d3, r, e === "legacy").find((f2) => f2.action === i2)) == null ? void 0 : y2.route;
    return p3 ? Me(p3, d3 == null ? void 0 : d3.meta, n, c) : void 0;
  }, [r, t, n]);
}, "useGetToPath");
var ge = o(() => {
  let e = (0, import_react46.useContext)(et), { select: t } = z(), r = pt(), s = import_react46.default.useMemo(() => (e == null ? void 0 : e.go) ?? (() => () => {
  }), [e == null ? void 0 : e.go])();
  return (0, import_react46.useCallback)((i2) => {
    if (typeof i2.to != "object")
      return s({ ...i2, to: i2.to });
    let { resource: c } = t(i2.to.resource);
    Zi(i2.to, c);
    let d3 = r({ resource: c, action: i2.to.action, meta: { id: i2.to.id, ...i2.to.meta } });
    return s({ ...i2, to: d3 });
  }, [t, s]);
}, "useGo");
var Zi = o((e, t) => {
  if (!(e != null && e.action) || !(e != null && e.resource))
    throw new Error('[useGo]: "action" or "resource" is required.');
  if (["edit", "show", "clone"].includes(e == null ? void 0 : e.action) && !e.id)
    throw new Error(`[useGo]: [action: ${e.action}] requires an "id" for resource [resource: ${e.resource}]`);
  if (!t[e.action])
    throw new Error(`[useGo]: [action: ${e.action}] is not defined for [resource: ${e.resource}]`);
}, "handleResourceErrors");
var ce = o(() => {
  let { resources: e } = z(), t = Z(), { useHistory: r } = re(), n = r(), s = ae(), a = ge(), i2 = io(), c = o((P2, x2 = "push") => {
    t === "legacy" ? n[x2](P2) : a({ to: P2, type: x2 });
  }, "handleUrl"), d3 = o((P2, x2 = {}) => {
    var b;
    if (t === "legacy") {
      let C2 = typeof P2 == "string" ? ye(P2, e, true) ?? { name: P2, route: P2 } : P2, E2 = he(C2, e, true).find((h) => h.action === "create");
      return E2 ? Me(E2.route, C2 == null ? void 0 : C2.meta, s, x2) : "";
    }
    let m2 = typeof P2 == "string" ? ye(P2, e) ?? { name: P2 } : P2, v2 = (b = he(m2, e).find((C2) => C2.action === "create")) == null ? void 0 : b.route;
    return v2 ? a({ to: Me(v2, m2 == null ? void 0 : m2.meta, s, x2), type: "path" }) : "";
  }, "createUrl"), u = o((P2, x2, m2 = {}) => {
    var E2;
    let v2 = encodeURIComponent(x2);
    if (t === "legacy") {
      let h = typeof P2 == "string" ? ye(P2, e, true) ?? { name: P2, route: P2 } : P2, L = he(h, e, true).find((A) => A.action === "edit");
      return L ? Me(L.route, h == null ? void 0 : h.meta, s, { ...m2, id: v2 }) : "";
    }
    let b = typeof P2 == "string" ? ye(P2, e) ?? { name: P2 } : P2, C2 = (E2 = he(b, e).find((h) => h.action === "edit")) == null ? void 0 : E2.route;
    return C2 ? a({ to: Me(C2, b == null ? void 0 : b.meta, s, { ...m2, id: v2 }), type: "path" }) : "";
  }, "editUrl"), p3 = o((P2, x2, m2 = {}) => {
    var E2;
    let v2 = encodeURIComponent(x2);
    if (t === "legacy") {
      let h = typeof P2 == "string" ? ye(P2, e, true) ?? { name: P2, route: P2 } : P2, L = he(h, e, true).find((A) => A.action === "clone");
      return L ? Me(L.route, h == null ? void 0 : h.meta, s, { ...m2, id: v2 }) : "";
    }
    let b = typeof P2 == "string" ? ye(P2, e) ?? { name: P2 } : P2, C2 = (E2 = he(b, e).find((h) => h.action === "clone")) == null ? void 0 : E2.route;
    return C2 ? a({ to: Me(C2, b == null ? void 0 : b.meta, s, { ...m2, id: v2 }), type: "path" }) : "";
  }, "cloneUrl"), l2 = o((P2, x2, m2 = {}) => {
    var E2;
    let v2 = encodeURIComponent(x2);
    if (t === "legacy") {
      let h = typeof P2 == "string" ? ye(P2, e, true) ?? { name: P2, route: P2 } : P2, L = he(h, e, true).find((A) => A.action === "show");
      return L ? Me(L.route, h == null ? void 0 : h.meta, s, { ...m2, id: v2 }) : "";
    }
    let b = typeof P2 == "string" ? ye(P2, e) ?? { name: P2 } : P2, C2 = (E2 = he(b, e).find((h) => h.action === "show")) == null ? void 0 : E2.route;
    return C2 ? a({ to: Me(C2, b == null ? void 0 : b.meta, s, { ...m2, id: v2 }), type: "path" }) : "";
  }, "showUrl"), y2 = o((P2, x2 = {}) => {
    var b;
    if (t === "legacy") {
      let C2 = typeof P2 == "string" ? ye(P2, e, true) ?? { name: P2, route: P2 } : P2, E2 = he(C2, e, true).find((h) => h.action === "list");
      return E2 ? Me(E2.route, C2 == null ? void 0 : C2.meta, s, x2) : "";
    }
    let m2 = typeof P2 == "string" ? ye(P2, e) ?? { name: P2 } : P2, v2 = (b = he(m2, e).find((C2) => C2.action === "list")) == null ? void 0 : b.route;
    return v2 ? a({ to: Me(v2, m2 == null ? void 0 : m2.meta, s, x2), type: "path" }) : "";
  }, "listUrl");
  return { create: o((P2, x2 = "push", m2 = {}) => {
    c(d3(P2, m2), x2);
  }, "create"), createUrl: d3, edit: o((P2, x2, m2 = "push", v2 = {}) => {
    c(u(P2, x2, v2), m2);
  }, "edit"), editUrl: u, clone: o((P2, x2, m2 = "push", v2 = {}) => {
    c(p3(P2, x2, v2), m2);
  }, "clone"), cloneUrl: p3, show: o((P2, x2, m2 = "push", v2 = {}) => {
    c(l2(P2, x2, v2), m2);
  }, "show"), showUrl: l2, list: o((P2, x2 = "push", m2 = {}) => {
    c(y2(P2, m2), x2);
  }, "list"), listUrl: y2, push: o((P2, ...x2) => {
    t === "legacy" ? n.push(P2, ...x2) : a({ to: P2, type: "push" });
  }, "push"), replace: o((P2, ...x2) => {
    t === "legacy" ? n.replace(P2, ...x2) : a({ to: P2, type: "replace" });
  }, "replace"), goBack: o(() => {
    t === "legacy" ? n.goBack() : i2();
  }, "goBack") };
}, "useNavigation");
var Mh = o(({ resource: e, id: t, meta: r, metaData: n, queryOptions: s, overtimeOptions: a, ...i2 } = {}) => {
  let { resource: c, identifier: d3, id: u, setId: p3 } = Ne({ id: t, resource: e }), y2 = q()({ resource: c, meta: F(r, n) });
  (0, import_warn_once4.default)(!!e && !u, Ji(d3, u));
  let f2 = kt({ resource: d3, id: u ?? "", queryOptions: { enabled: u !== void 0, ...s }, meta: y2, metaData: y2, ...i2 }), { elapsedTime: T2 } = ee({ isLoading: f2.isFetching, interval: a == null ? void 0 : a.interval, onInterval: a == null ? void 0 : a.onInterval });
  return { queryResult: f2, showId: u, setShowId: p3, overtime: { elapsedTime: T2 } };
}, "useShow");
var Ji = o((e, t) => `[useShow]: resource: "${e}", id: ${t} 

If you don't use the \`setShowId\` method to set the \`showId\`, you should pass the \`id\` prop to \`useShow\`. Otherwise, \`useShow\` will not be able to infer the \`id\` from the current URL. 

See https://refine.dev/docs/data/hooks/use-show/#resource`, "idWarningMessage");
var Vh = o(({ resourceName: e, resource: t, mapData: r = o((p3) => p3, "mapData"), paparseOptions: n, batchSize: s = Number.MAX_SAFE_INTEGER, onFinish: a, meta: i2, metaData: c, onProgress: d3, dataProviderName: u } = {}) => {
  let [p3, l2] = (0, import_react48.useState)(0), [y2, f2] = (0, import_react48.useState)(0), [T2, U] = (0, import_react48.useState)(false), { resource: D, identifier: g2 } = z(t ?? e), R2 = q(), w = to(), I2 = Qt(), P2 = R2({ resource: D, meta: F(i2, c) }), x2;
  s === 1 ? x2 = I2 : x2 = w;
  let m2 = o(() => {
    f2(0), l2(0), U(false);
  }, "handleCleanup"), v2 = o((C2) => {
    let E2 = { succeeded: C2.filter((h) => h.type === "success"), errored: C2.filter((h) => h.type === "error") };
    a == null || a(E2), U(false);
  }, "handleFinish");
  (0, import_react48.useEffect)(() => {
    d3 == null || d3({ totalAmount: y2, processedAmount: p3 });
  }, [y2, p3]);
  let b = o(({ file: C2 }) => (m2(), new Promise((E2) => {
    U(true), import_papaparse2.default.parse(C2, { complete: async ({ data: h }) => {
      let L = Ht(h, r);
      if (f2(L.length), s === 1) {
        let A = L.map((Q) => o(async () => ({ response: await I2.mutateAsync({ resource: g2 ?? "", values: Q, successNotification: false, errorNotification: false, dataProviderName: u, meta: P2, metaData: P2 }), value: Q }), "fn")), M = await er(A, ({ response: Q, value: S }) => (l2((G) => G + 1), { response: [Q.data], type: "success", request: [S] }), (Q, S) => ({ response: [Q], type: "error", request: [L[S]] }));
        E2(M);
      } else {
        let A = chunk_default(L, s), M = A.map((S) => o(async () => ({ response: await w.mutateAsync({ resource: g2 ?? "", values: S, successNotification: false, errorNotification: false, dataProviderName: u, meta: P2, metaData: P2 }), value: S, currentBatchLength: S.length }), "fn")), Q = await er(M, ({ response: S, currentBatchLength: G, value: $ }) => (l2((K) => K + G), { response: S.data, type: "success", request: $ }), (S, G) => ({ response: [S], type: "error", request: A[G] }));
        E2(Q);
      }
    }, ...n });
  }).then((E2) => (v2(E2), E2))), "handleChange");
  return { inputProps: { type: "file", accept: ".csv", onChange: (C2) => {
    C2.target.files && C2.target.files.length > 0 && b({ file: C2.target.files[0] });
  } }, mutationResult: x2, isLoading: T2, handleChange: b };
}, "useImport");
var Gh = o(({ defaultVisible: e = false } = {}) => {
  let [t, r] = (0, import_react49.useState)(e), n = (0, import_react49.useCallback)(() => r(true), [t]), s = (0, import_react49.useCallback)(() => r(false), [t]);
  return { visible: t, show: n, close: s };
}, "useModal");
var ou = o(({ resource: e, action: t, meta: r, legacy: n }) => pt()({ resource: e, action: t, meta: r, legacy: n }), "useToPath");
var tt = o(() => {
  let e = (0, import_react50.useContext)(et);
  return e != null && e.Link ? e.Link : o(({ to: r, ...n }) => import_react50.default.createElement("a", { href: r, ...n }), "FallbackLink");
}, "useLink");
var rt = { useHistory: () => false, useLocation: () => false, useParams: () => ({}), Prompt: () => null, Link: () => null };
var Nt = import_react52.default.createContext(rt);
var Xn = o(({ children: e, useHistory: t, useLocation: r, useParams: n, Prompt: s, Link: a, routes: i2 }) => import_react52.default.createElement(Nt.Provider, { value: { useHistory: t ?? rt.useHistory, useLocation: r ?? rt.useLocation, useParams: n ?? rt.useParams, Prompt: s ?? rt.Prompt, Link: a ?? rt.Link, routes: i2 ?? rt.routes } }, e), "LegacyRouterContextProvider");
var re = o(() => {
  let e = (0, import_react51.useContext)(Nt), { useHistory: t, useLocation: r, useParams: n, Prompt: s, Link: a, routes: i2 } = e ?? rt;
  return { useHistory: t, useLocation: r, useParams: n, Prompt: s, Link: a, routes: i2 };
}, "useRouterContext");
var je = import_react54.default.createContext({ options: { buttons: { enableAccessControl: true, hideIfUnauthorized: false } } });
var Yn = o(({ can: e, children: t, options: r }) => import_react54.default.createElement(je.Provider, { value: { can: e, options: r ? { ...r, buttons: { enableAccessControl: true, hideIfUnauthorized: false, ...r.buttons } } : { buttons: { enableAccessControl: true, hideIfUnauthorized: false }, queryOptions: void 0 } } }, t), "AccessControlContextProvider");
var Ct = o((e) => {
  if (!e)
    return;
  let { icon: t, list: r, edit: n, create: s, show: a, clone: i2, children: c, meta: d3, options: u, ...p3 } = e, { icon: l2, ...y2 } = d3 ?? {}, { icon: f2, ...T2 } = u ?? {};
  return { ...p3, ...d3 ? { meta: y2 } : {}, ...u ? { options: T2 } : {} };
}, "sanitizeResource");
var gr = o(({ action: e, resource: t, params: r, queryOptions: n }) => {
  let { can: s, options: a } = (0, import_react53.useContext)(je), { keys: i2, preferLegacyKeys: c } = O2(), { queryOptions: d3 } = a || {}, u = { ...d3, ...n }, { resource: p3, ...l2 } = r ?? {}, y2 = Ct(p3), f2 = useQuery({ queryKey: i2().access().resource(t).action(e).params({ params: { ...l2, resource: y2 }, enabled: u == null ? void 0 : u.enabled }).get(c), queryFn: () => (s == null ? void 0 : s({ action: e, resource: t, params: { ...l2, resource: y2 } })) ?? Promise.resolve({ can: true }), enabled: typeof s < "u", ...u, meta: { ...u == null ? void 0 : u.meta, ...P("useCan", c) }, retry: false });
  return typeof s > "u" ? { data: { can: true } } : f2;
}, "useCan");
var SC = o(() => {
  let { can: e } = import_react55.default.useContext(je);
  return { can: import_react55.default.useMemo(() => e ? o(async ({ params: n, ...s }) => {
    let a = n != null && n.resource ? Ct(n.resource) : void 0;
    return e({ ...s, ...n ? { params: { ...n, resource: a } } : {} });
  }, "canWithSanitizedResource") : void 0, [e]) };
}, "useCanWithoutCache");
var OC = o((e) => {
  let [t, r] = (0, import_react56.useState)([]), [n, s] = (0, import_react56.useState)([]), [a, i2] = (0, import_react56.useState)([]), { resource: c, sort: d3, sorters: u, filters: p3 = [], optionLabel: l2 = "title", optionValue: y2 = "id", searchField: f2 = typeof l2 == "string" ? l2 : "title", debounce: T2 = 300, successNotification: U, errorNotification: D, defaultValueQueryOptions: g2, queryOptions: R2, fetchSize: w, pagination: I2, hasPagination: P2 = false, liveMode: x2, defaultValue: m2 = [], onLiveEvent: v2, onSearch: b, liveParams: C2, meta: E2, metaData: h, dataProviderName: L, overtimeOptions: A } = e, M = (0, import_react56.useCallback)((Y) => typeof l2 == "string" ? get_default(Y, l2) : l2(Y), [l2]), Q = (0, import_react56.useCallback)((Y) => typeof y2 == "string" ? get_default(Y, y2) : y2(Y), [y2]), { resource: S, identifier: G } = z(c), K = q()({ resource: S, meta: F(E2, h) }), X = Array.isArray(m2) ? m2 : [m2], N = (0, import_react56.useCallback)((Y) => {
    i2(Y.data.map((Pe) => ({ label: M(Pe), value: Q(Pe) })));
  }, [l2, y2]), W = g2 ?? R2, V = Jr({ resource: G, ids: X, queryOptions: { ...W, enabled: X.length > 0 && ((W == null ? void 0 : W.enabled) ?? true), onSuccess: (Y) => {
    var Pe;
    N(Y), (Pe = W == null ? void 0 : W.onSuccess) == null || Pe.call(W, Y);
  } }, meta: K, metaData: K, liveMode: "off", dataProviderName: L }), B = (0, import_react56.useCallback)((Y) => {
    s(Y.data.map((Pe) => ({ label: M(Pe), value: Q(Pe) })));
  }, [l2, y2]), _ = At({ resource: G, sorters: F(u, d3), filters: p3.concat(t), pagination: { current: I2 == null ? void 0 : I2.current, pageSize: (I2 == null ? void 0 : I2.pageSize) ?? w, mode: I2 == null ? void 0 : I2.mode }, hasPagination: P2, queryOptions: { ...R2, onSuccess: (Y) => {
    var Pe;
    B(Y), (Pe = R2 == null ? void 0 : R2.onSuccess) == null || Pe.call(R2, Y);
  } }, successNotification: U, errorNotification: D, meta: K, metaData: K, liveMode: x2, liveParams: C2, onLiveEvent: v2, dataProviderName: L }), te = o((Y) => {
    if (b) {
      r(b(Y));
      return;
    }
    if (!Y) {
      r([]);
      return;
    }
    r([{ field: f2, operator: "contains", value: Y }]);
  }, "onSearch"), { elapsedTime: ie } = ee({ isLoading: _.isFetching || V.isFetching, interval: A == null ? void 0 : A.interval, onInterval: A == null ? void 0 : A.onInterval }), De = (0, import_react56.useMemo)(() => uniqBy_default([...n, ...a], "value"), [n, a]);
  return { queryResult: _, defaultValueQueryResult: V, options: De, onSearch: debounce_default(te, T2), overtime: { elapsedTime: ie } };
}, "useSelect");
var rs = [];
var os = [];
function sb({ initialCurrent: e, initialPageSize: t, hasPagination: r = true, pagination: n, initialSorter: s, permanentSorter: a = os, defaultSetFilterBehavior: i2, initialFilter: c, permanentFilter: d3 = rs, filters: u, sorters: p3, syncWithLocation: l2, resource: y2, successNotification: f2, errorNotification: T2, queryOptions: U, liveMode: D, onLiveEvent: g2, liveParams: R2, meta: w, metaData: I2, dataProviderName: P2, overtimeOptions: x2 } = {}) {
  var Co, bo, vo, Do, Lo;
  let { syncWithLocation: m2 } = Br(), v2 = l2 ?? m2, b = Vn(D), C2 = Z(), { useLocation: E2 } = re(), { search: h, pathname: L } = E2(), A = q(), M = ae(), Q = ((u == null ? void 0 : u.mode) || "server") === "server", S = ((p3 == null ? void 0 : p3.mode) || "server") === "server", G = r === false ? "off" : "server", $ = ((n == null ? void 0 : n.mode) ?? G) !== "off", K = F(n == null ? void 0 : n.current, e), X = F(n == null ? void 0 : n.pageSize, t), N = F(w, I2), { parsedCurrent: W, parsedPageSize: V, parsedSorter: B, parsedFilters: _ } = ur(h ?? "?"), te = F(u == null ? void 0 : u.initial, c), ie = F(u == null ? void 0 : u.permanent, d3) ?? rs, De = F(p3 == null ? void 0 : p3.initial, s), Y = F(p3 == null ? void 0 : p3.permanent, a) ?? os, Pe = F(u == null ? void 0 : u.defaultBehavior, i2) ?? "merge", ft, yt, Se, Xe;
  v2 ? (ft = ((Co = M == null ? void 0 : M.params) == null ? void 0 : Co.current) || W || K || 1, yt = ((bo = M == null ? void 0 : M.params) == null ? void 0 : bo.pageSize) || V || X || 10, Se = ((vo = M == null ? void 0 : M.params) == null ? void 0 : vo.sorters) || (B.length ? B : De), Xe = ((Do = M == null ? void 0 : M.params) == null ? void 0 : Do.filters) || (_.length ? _ : te)) : (ft = K || 1, yt = X || 10, Se = De, Xe = te);
  let { replace: it } = ce(), ot = ge(), { resource: Ss, identifier: Ur } = z(y2), go = A({ resource: Ss, meta: N });
  import_react57.default.useEffect(() => {
    (0, import_warn_once5.default)(typeof Ur > "u", "useTable: `resource` is not defined.");
  }, [Ur]);
  let [ut, To] = (0, import_react57.useState)(lr(Y, Se ?? [])), [Ut, Gt] = (0, import_react57.useState)(pr(ie, Xe ?? [])), [Et, xo] = (0, import_react57.useState)(ft), [ct, Po] = (0, import_react57.useState)(yt), Ro = o(() => {
    if (C2 === "new") {
      let { sorters: Uo, filters: cc, pageSize: dc, current: pc, ...Ns } = (M == null ? void 0 : M.params) ?? {};
      return Ns;
    }
    let { sorter: Re, filters: He, pageSize: Mr, current: wr, ...Ir } = import_qs4.default.parse(h, { ignoreQueryPrefix: true });
    return Ir;
  }, "getCurrentQueryParams"), Fs = o(({ pagination: { current: Re, pageSize: He }, sorter: Mr, filters: wr }) => {
    if (C2 === "new")
      return ot({ type: "path", options: { keepHash: true, keepQuery: true }, query: { ...$ ? { current: Re, pageSize: He } : {}, sorters: Mr, filters: wr, ...Ro() } }) ?? "";
    let Ir = import_qs4.default.parse(h == null ? void 0 : h.substring(1)), Uo = cr({ pagination: { pageSize: He, current: Re }, sorters: ut ?? Mr, filters: wr, ...Ir });
    return `${L ?? ""}?${Uo ?? ""}`;
  }, "createLinkForSyncWithLocation");
  (0, import_react57.useEffect)(() => {
    h === "" && (xo(ft), Po(yt), To(lr(Y, Se ?? [])), Gt(pr(ie, Xe ?? [])));
  }, [h]), (0, import_react57.useEffect)(() => {
    if (v2) {
      let Re = Ro();
      if (C2 === "new")
        ot({ type: "replace", options: { keepQuery: true }, query: { ...$ ? { pageSize: ct, current: Et } : {}, sorters: differenceWith_default(ut, Y, isEqual_default), filters: differenceWith_default(Ut, ie, isEqual_default) } });
      else {
        let He = cr({ ...$ ? { pagination: { pageSize: ct, current: Et } } : {}, sorters: differenceWith_default(ut, Y, isEqual_default), filters: differenceWith_default(Ut, ie, isEqual_default), ...Re });
        return it == null ? void 0 : it(`${L}?${He}`, void 0, { shallow: true });
      }
    }
  }, [v2, Et, ct, ut, Ut]);
  let Er = At({ resource: Ur, hasPagination: r, pagination: { current: Et, pageSize: ct, mode: n == null ? void 0 : n.mode }, filters: Q ? Pt(ie, Ut) : void 0, sorters: S ? dr(Y, ut) : void 0, queryOptions: U, successNotification: f2, errorNotification: T2, meta: go, metaData: go, liveMode: b, liveParams: R2, onLiveEvent: g2, dataProviderName: P2 }), As = o((Re) => {
    Gt((He) => Pt(ie, Re, He));
  }, "setFiltersAsMerge"), ks = o((Re) => {
    Gt(Pt(ie, Re));
  }, "setFiltersAsReplace"), Qs = o((Re) => {
    Gt((He) => Pt(ie, Re(He)));
  }, "setFiltersWithSetter"), Vs = o((Re, He = Pe) => {
    typeof Re == "function" ? Qs(Re) : He === "replace" ? ks(Re) : As(Re);
  }, "setFiltersFn"), ho = o((Re) => {
    To(() => dr(Y, Re));
  }, "setSortWithUnion"), { elapsedTime: Bs } = ee({ isLoading: Er.isFetching, interval: x2 == null ? void 0 : x2.interval, onInterval: x2 == null ? void 0 : x2.onInterval });
  return { tableQueryResult: Er, sorters: ut, setSorters: ho, sorter: ut, setSorter: ho, filters: Ut, setFilters: Vs, current: Et, setCurrent: xo, pageSize: ct, setPageSize: Po, pageCount: ct ? Math.ceil((((Lo = Er.data) == null ? void 0 : Lo.total) ?? 0) / ct) : 1, createLinkForSyncWithLocation: Fs, overtime: { elapsedTime: Bs } };
}
o(sb, "useTable");
var lt = import_react59.default.createContext({});
var ss = o(({ create: e, get: t, update: r, children: n }) => import_react59.default.createElement(lt.Provider, { value: { create: e, get: t, update: r } }, n), "AuditLogContextProvider");
var Be = o(({ logMutationOptions: e, renameMutationOptions: t } = {}) => {
  let r = useQueryClient(), n = (0, import_react58.useContext)(lt), { keys: s, preferLegacyKeys: a } = O2(), i2 = J(), { resources: c } = (0, import_react58.useContext)(at), { data: d3, refetch: u, isLoading: p3 } = Hr({ v3LegacyAuthProviderCompatible: !!(i2 != null && i2.isLegacy), queryOptions: { enabled: !!(n != null && n.create) } }), l2 = useMutation(async (f2) => {
    var g2, R2, w, I2, P2;
    let T2 = ye(f2.resource, c), U = F((g2 = T2 == null ? void 0 : T2.meta) == null ? void 0 : g2.audit, (R2 = T2 == null ? void 0 : T2.options) == null ? void 0 : R2.audit, (I2 = (w = T2 == null ? void 0 : T2.options) == null ? void 0 : w.auditLog) == null ? void 0 : I2.permissions);
    if (U && !Sr(U, f2.action))
      return;
    let D;
    return p3 && (n != null && n.create) && (D = await u()), await ((P2 = n.create) == null ? void 0 : P2.call(n, { ...f2, author: d3 ?? (D == null ? void 0 : D.data) }));
  }, { mutationKey: s().audit().action("log").get(), ...e, meta: { ...e == null ? void 0 : e.meta, ...P("useLog", a) } }), y2 = useMutation(async (f2) => {
    var T2;
    return await ((T2 = n.update) == null ? void 0 : T2.call(n, f2));
  }, { onSuccess: (f2) => {
    f2 != null && f2.resource && r.invalidateQueries(s().audit().resource((f2 == null ? void 0 : f2.resource) ?? "").action("list").get(a));
  }, mutationKey: s().audit().action("rename").get(), ...t, meta: { ...t == null ? void 0 : t.meta, ...P("useLog", a) } });
  return { log: l2, rename: y2 };
}, "useLog");
var Fb = o(({ resource: e, action: t, meta: r, author: n, metaData: s, queryOptions: a }) => {
  let { get: i2 } = (0, import_react60.useContext)(lt), { keys: c, preferLegacyKeys: d3 } = O2();
  return useQuery({ queryKey: c().audit().resource(e).action("list").params(r).get(d3), queryFn: () => (i2 == null ? void 0 : i2({ resource: e, action: t, author: n, meta: r, metaData: s })) ?? Promise.resolve([]), enabled: typeof i2 < "u", ...a, retry: false, meta: { ...a == null ? void 0 : a.meta, ...P("useLogList", d3) } });
}, "useLogList");
var _b = o(({ meta: e = {} } = {}) => {
  let t = Z(), { i18nProvider: r } = (0, import_react61.useContext)(ke), n = ae(), s = H(), { resources: a, resource: i2, action: c } = z(), { options: { textTransformers: d3 } } = se(), u = [];
  if (!(i2 != null && i2.name))
    return { breadcrumbs: u };
  let p3 = o((l2) => {
    var f2, T2, U, D, g2, R2;
    let y2 = typeof l2 == "string" ? ye(l2, a, t === "legacy") ?? { name: l2 } : l2;
    if (y2) {
      let w = F((f2 = y2 == null ? void 0 : y2.meta) == null ? void 0 : f2.parent, y2 == null ? void 0 : y2.parentName);
      w && p3(w);
      let I2 = he(y2, a, t === "legacy").find((m2) => m2.action === "list"), P2 = (T2 = I2 == null ? void 0 : I2.resource) != null && T2.list ? I2 == null ? void 0 : I2.route : void 0, x2 = P2 ? t === "legacy" ? P2 : Me(P2, y2 == null ? void 0 : y2.meta, n, e) : void 0;
      u.push({ label: F((U = y2.meta) == null ? void 0 : U.label, (D = y2.options) == null ? void 0 : D.label) ?? s(`${y2.name}.${y2.name}`, d3.humanize(y2.name)), href: x2, icon: F((g2 = y2.meta) == null ? void 0 : g2.icon, (R2 = y2.options) == null ? void 0 : R2.icon, y2.icon) });
    }
  }, "addBreadcrumb");
  if (p3(i2), c && c !== "list") {
    let l2 = `actions.${c}`, y2 = s(l2);
    typeof r < "u" && y2 === l2 ? ((0, import_warn_once6.default)(true, `[useBreadcrumb]: Breadcrumb missing translate key for the "${c}" action. Please add "actions.${c}" key to your translation file.
For more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`), u.push({ label: s(`buttons.${c}`, d3.humanize(c)) })) : u.push({ label: s(l2, d3.humanize(c)) });
  }
  return { breadcrumbs: u };
}, "useBreadcrumb");
var bt = o((e, t, r = false) => {
  let n = [], s = Fe(e, t);
  for (; s; )
    n.push(s), s = Fe(s, t);
  return n.reverse(), `/${[...n, e].map((i2) => be((r ? i2.route : void 0) ?? i2.identifier ?? i2.name)).join("/").replace(/^\//, "")}`;
}, "createResourceKey");
var cs = o((e, t = false) => {
  let r = { item: { name: "__root__" }, children: {} };
  e.forEach((s) => {
    let a = [], i2 = Fe(s, e);
    for (; i2; )
      a.push(i2), i2 = Fe(i2, e);
    a.reverse();
    let c = r;
    a.forEach((u) => {
      let p3 = (t ? u.route : void 0) ?? u.identifier ?? u.name;
      c.children[p3] || (c.children[p3] = { item: u, children: {} }), c = c.children[p3];
    });
    let d3 = (t ? s.route : void 0) ?? s.identifier ?? s.name;
    c.children[d3] || (c.children[d3] = { item: s, children: {} });
  });
  let n = o((s) => {
    let a = [];
    return Object.keys(s.children).forEach((i2) => {
      let c = bt(s.children[i2].item, e, t), d3 = { ...s.children[i2].item, key: c, children: n(s.children[i2]) };
      a.push(d3);
    }), a;
  }, "flatten");
  return n(r);
}, "createTree");
var ds = o((e) => e.split("?")[0].split("#")[0].replace(/(.+)(\/$)/, "$1"), "getCleanPath");
var hu = o(({ meta: e, hideOnMissingParameter: t } = { hideOnMissingParameter: true }) => {
  let r = H(), n = pt(), s = Z(), { resource: a, resources: i2 } = z(), { pathname: c } = ae(), { useLocation: d3 } = re(), { pathname: u } = d3(), p3 = nt(), y2 = `/${((s === "legacy" ? ds(u) : c ? ds(c) : void 0) ?? "").replace(/^\//, "")}`, f2 = a ? bt(a, i2, s === "legacy") : y2 ?? "", T2 = import_react62.default.useMemo(() => {
    if (!a)
      return [];
    let g2 = Fe(a, i2), R2 = [bt(a, i2)];
    for (; g2; )
      R2.push(bt(g2, i2)), g2 = Fe(g2, i2);
    return R2;
  }, []), U = import_react62.default.useCallback((g2) => {
    var w, I2, P2, x2, m2, v2;
    if ((((w = g2 == null ? void 0 : g2.meta) == null ? void 0 : w.hide) ?? ((I2 = g2 == null ? void 0 : g2.options) == null ? void 0 : I2.hide)) || !(g2 != null && g2.list) && g2.children.length === 0)
      return;
    let R2 = g2.list ? n({ resource: g2, action: "list", legacy: s === "legacy", meta: e }) : void 0;
    if (!(t && R2 && R2.match(/(\/|^):(.+?)(\/|$){1}/)))
      return { ...g2, route: R2, icon: F((P2 = g2.meta) == null ? void 0 : P2.icon, (x2 = g2.options) == null ? void 0 : x2.icon, g2.icon), label: F((m2 = g2 == null ? void 0 : g2.meta) == null ? void 0 : m2.label, (v2 = g2 == null ? void 0 : g2.options) == null ? void 0 : v2.label) ?? r(`${g2.name}.${g2.name}`, p3(g2.name, "plural")) };
  }, [s, e, n, r, t]), D = import_react62.default.useMemo(() => {
    let g2 = cs(i2, s === "legacy"), R2 = o((w) => w.flatMap((I2) => {
      let P2 = R2(I2.children), x2 = U({ ...I2, children: P2 });
      return x2 ? [x2] : [];
    }), "prepare");
    return R2(g2);
  }, [i2, s, U]);
  return { defaultOpenKeys: T2, selectedKey: f2, menuItems: D };
}, "useMenu");
var q = o(() => {
  let { params: e } = ae();
  return o(({ resource: r, meta: n } = {}) => {
    let { meta: s } = Ct(r) ?? { meta: {} }, { filters: a, sorters: i2, current: c, pageSize: d3, ...u } = e ?? {};
    return { ...s, ...u, ...n };
  }, "getMetaFn");
}, "useMeta");
var ht = o(() => {
  let { options: e } = import_react63.default.useContext(ve);
  return e;
}, "useRefineOptions");
var ps = o((e) => {
  let t = Z(), { useParams: r } = re(), n = ae(), s = r(), a = t === "legacy" ? s.id : n.id;
  return e ?? a;
}, "useId");
var ls = o((e) => {
  let t = Z(), { useParams: r } = re(), n = ae(), s = r(), a = t === "legacy" ? s.action : n.action;
  return e ?? a;
}, "useAction");
function Ne(e) {
  let { select: t, identifier: r } = z(), n = (e == null ? void 0 : e.resource) ?? r, { identifier: s = void 0, resource: a = void 0 } = n ? t(n, true) : {}, i2 = r === s, c = ps(), d3 = ls(e == null ? void 0 : e.action), u = import_react64.default.useMemo(() => i2 ? (e == null ? void 0 : e.id) ?? c : e == null ? void 0 : e.id, [i2, e == null ? void 0 : e.id, c]), [p3, l2] = import_react64.default.useState(u);
  import_react64.default.useEffect(() => l2(u), [u]);
  let y2 = import_react64.default.useMemo(() => !i2 && !(e != null && e.action) ? "create" : d3 === "edit" || d3 === "clone" ? d3 : "create", [d3, i2, e == null ? void 0 : e.action]);
  return { id: p3, setId: l2, resource: a, action: d3, identifier: s, formAction: y2 };
}
o(Ne, "useResourceParams");
function Cr({ type: e }) {
  let t = H(), { textTransformers: { humanize: r } } = ht(), n = `buttons.${e}`, s = r(e);
  return { label: t(n, s) };
}
o(Cr, "useActionableButton");
var br = o((e) => {
  var u, p3, l2;
  let t = H(), r = import_react66.default.useContext(je), n = ((u = e.accessControl) == null ? void 0 : u.enabled) ?? r.options.buttons.enableAccessControl, s = ((p3 = e.accessControl) == null ? void 0 : p3.hideIfUnauthorized) ?? r.options.buttons.hideIfUnauthorized, { data: a } = gr({ resource: (l2 = e.resource) == null ? void 0 : l2.name, action: e.action === "clone" ? "create" : e.action, params: { id: e.id, resource: e.resource }, queryOptions: { enabled: n } }), i2 = import_react66.default.useMemo(() => a != null && a.can ? "" : a != null && a.reason ? a.reason : t("buttons.notAccessTitle", "You don't have permission to access"), [a == null ? void 0 : a.can, a == null ? void 0 : a.reason, t]), c = n && s && !(a != null && a.can), d3 = (a == null ? void 0 : a.can) === false;
  return { title: i2, hidden: c, disabled: d3, canAccess: a };
}, "useButtonCanAccess");
function vt(e) {
  var R2;
  let t = ce(), r = Z(), n = tt(), { Link: s } = re(), a = H(), i2 = nt(), { textTransformers: { humanize: c } } = ht(), { id: d3, resource: u, identifier: p3 } = Ne({ resource: e.resource, id: e.action === "create" ? void 0 : e.id }), { canAccess: l2, title: y2, hidden: f2, disabled: T2 } = br({ action: e.action, accessControl: e.accessControl, id: d3, resource: u }), U = r === "legacy" ? s : n, D = import_react65.default.useMemo(() => {
    if (!u)
      return "";
    switch (e.action) {
      case "create":
      case "list":
        return t[`${e.action}Url`](u, e.meta);
      default:
        return d3 ? t[`${e.action}Url`](u, d3, e.meta) : "";
    }
  }, [u, d3, e.meta, t[`${e.action}Url`]]), g2 = e.action === "list" ? a(`${p3 ?? e.resource}.titles.list`, i2(((R2 = u == null ? void 0 : u.meta) == null ? void 0 : R2.label) ?? (u == null ? void 0 : u.label) ?? p3 ?? e.resource, "plural")) : a(`buttons.${e.action}`, c(e.action));
  return { to: D, label: g2, title: y2, disabled: T2, hidden: f2, canAccess: l2, LinkComponent: U };
}
o(vt, "useNavigationButton");
function vu(e) {
  let t = H(), { mutate: r, isLoading: n, variables: s } = eo(), { setWarnWhen: a } = dt(), { mutationMode: i2 } = Ae(e.mutationMode), { id: c, resource: d3, identifier: u } = Ne({ resource: e.resource, id: e.id }), { title: p3, disabled: l2, hidden: y2, canAccess: f2 } = br({ action: "delete", accessControl: e.accessControl, id: c, resource: d3 }), T2 = t("buttons.delete", "Delete"), U = t("buttons.delete", "Delete"), D = t("buttons.confirm", "Are you sure?"), g2 = t("buttons.cancel", "Cancel"), R2 = c === (s == null ? void 0 : s.id) && n;
  return { label: T2, title: p3, hidden: y2, disabled: l2, canAccess: f2, loading: R2, confirmOkLabel: U, cancelLabel: g2, confirmTitle: D, onConfirm: o(() => {
    c && u && (a(false), r({ id: c, resource: u, mutationMode: i2, successNotification: e.successNotification, errorNotification: e.errorNotification, meta: e.meta, metaData: e.meta, dataProviderName: e.dataProviderName, invalidates: e.invalidates }, { onSuccess: e.onSuccess }));
  }, "onConfirm") };
}
o(vu, "useDeleteButton");
function Lu(e) {
  let t = H(), { keys: r, preferLegacyKeys: n } = O2(), s = useQueryClient(), a = Ce(), { identifier: i2, id: c } = Ne({ resource: e.resource, id: e.id }), { resources: d3 } = z(), u = !!s.isFetching({ queryKey: r().data(j(i2, e.dataProviderName, d3)).resource(i2).action("one").get(n) }), p3 = o(() => {
    a({ id: c, invalidates: ["detail"], dataProviderName: e.dataProviderName, resource: i2 });
  }, "onClick"), l2 = t("buttons.refresh", "Refresh");
  return { onClick: p3, label: l2, loading: u };
}
o(Lu, "useRefreshButton");
var LD = o((e) => vt({ ...e, action: "show" }), "useShowButton");
var UD = o((e) => vt({ ...e, action: "edit" }), "useEditButton");
var ED = o((e) => vt({ ...e, action: "clone" }), "useCloneButton");
var MD = o((e) => vt({ ...e, action: "create" }), "useCreateButton");
var wD = o((e) => vt({ ...e, action: "list" }), "useListButton");
var ID = o(() => Cr({ type: "save" }), "useSaveButton");
var SD = o(() => Cr({ type: "export" }), "useExportButton");
var FD = o(() => Cr({ type: "import" }), "useImportButton");
var Mu = o(() => {
  let [e, t] = (0, import_react2.useState)(), r = H(), { push: n } = ce(), s = ge(), a = Z(), { resource: i2, action: c } = z();
  return (0, import_react2.useEffect)(() => {
    i2 && c && t(r("pages.error.info", { action: c, resource: i2.name }, `You may have forgotten to add the "${c}" component to "${i2.name}" resource.`));
  }, [i2, c]), import_react2.default.createElement(import_react2.default.Fragment, null, import_react2.default.createElement("h1", null, r("pages.error.404", void 0, "Sorry, the page you visited does not exist.")), e && import_react2.default.createElement("p", null, e), import_react2.default.createElement("button", { onClick: () => {
    a === "legacy" ? n("/") : s({ to: "/" });
  } }, r("pages.error.backHome", void 0, "Back Home")));
}, "ErrorComponent");
var Ar = o(() => {
  let [e, t] = (0, import_react67.useState)(""), [r, n] = (0, import_react67.useState)(""), s = H(), a = J(), { mutate: i2 } = Ft({ v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy) });
  return import_react67.default.createElement(import_react67.default.Fragment, null, import_react67.default.createElement("h1", null, s("pages.login.title", "Sign in your account")), import_react67.default.createElement("form", { onSubmit: (c) => {
    c.preventDefault(), i2({ username: e, password: r });
  } }, import_react67.default.createElement("table", null, import_react67.default.createElement("tbody", null, import_react67.default.createElement("tr", null, import_react67.default.createElement("td", null, s("pages.login.username", void 0, "username"), ":"), import_react67.default.createElement("td", null, import_react67.default.createElement("input", { type: "text", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", autoFocus: true, required: true, value: e, onChange: (c) => t(c.target.value) }))), import_react67.default.createElement("tr", null, import_react67.default.createElement("td", null, s("pages.login.password", void 0, "password"), ":"), import_react67.default.createElement("td", null, import_react67.default.createElement("input", { type: "password", required: true, size: 20, value: r, onChange: (c) => n(c.target.value) }))))), import_react67.default.createElement("br", null), import_react67.default.createElement("input", { type: "submit", value: "login" })));
}, "LoginPage");
var ys = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: n, contentProps: s, wrapperProps: a, renderContent: i2, formProps: c, title: d3 = void 0, hideForm: u }) => {
  let p3 = Z(), l2 = tt(), { Link: y2 } = re(), f2 = p3 === "legacy" ? y2 : l2, [T2, U] = (0, import_react69.useState)(""), [D, g2] = (0, import_react69.useState)(""), [R2, w] = (0, import_react69.useState)(false), I2 = H(), P2 = J(), { mutate: x2 } = Ft({ v3LegacyAuthProviderCompatible: !!(P2 != null && P2.isLegacy) }), m2 = o((C2, E2) => import_react69.default.createElement(f2, { to: C2 }, E2), "renderLink"), v2 = o(() => e ? e.map((C2) => import_react69.default.createElement("div", { key: C2.name, style: { display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "1rem" } }, import_react69.default.createElement("button", { onClick: () => x2({ providerName: C2.name }), style: { display: "flex", alignItems: "center" } }, C2 == null ? void 0 : C2.icon, C2.label ?? import_react69.default.createElement("label", null, C2.label)))) : null, "renderProviders"), b = import_react69.default.createElement("div", { ...s }, import_react69.default.createElement("h1", { style: { textAlign: "center" } }, I2("pages.login.title", "Sign in to your account")), v2(), !u && import_react69.default.createElement(import_react69.default.Fragment, null, import_react69.default.createElement("hr", null), import_react69.default.createElement("form", { onSubmit: (C2) => {
    C2.preventDefault(), x2({ email: T2, password: D, remember: R2 });
  }, ...c }, import_react69.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react69.default.createElement("label", { htmlFor: "email-input" }, I2("pages.login.fields.email", "Email")), import_react69.default.createElement("input", { id: "email-input", name: "email", type: "text", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: T2, onChange: (C2) => U(C2.target.value) }), import_react69.default.createElement("label", { htmlFor: "password-input" }, I2("pages.login.fields.password", "Password")), import_react69.default.createElement("input", { id: "password-input", type: "password", name: "password", required: true, size: 20, value: D, onChange: (C2) => g2(C2.target.value) }), n ?? import_react69.default.createElement(import_react69.default.Fragment, null, import_react69.default.createElement("label", { htmlFor: "remember-me-input" }, I2("pages.login.buttons.rememberMe", "Remember me"), import_react69.default.createElement("input", { id: "remember-me-input", name: "remember", type: "checkbox", size: 20, checked: R2, value: R2.toString(), onChange: () => {
    w(!R2);
  } }))), import_react69.default.createElement("br", null), r ?? m2("/forgot-password", I2("pages.login.buttons.forgotPassword", "Forgot password?")), import_react69.default.createElement("input", { type: "submit", value: I2("pages.login.signin", "Sign in") }), t ?? import_react69.default.createElement("span", null, I2("pages.login.buttons.noAccount", "Don’t have an account?"), " ", m2("/register", I2("pages.login.register", "Sign up")))))), t !== false && u && import_react69.default.createElement("div", { style: { textAlign: "center" } }, I2("pages.login.buttons.noAccount", "Don’t have an account?"), " ", m2("/register", I2("pages.login.register", "Sign up"))));
  return import_react69.default.createElement("div", { ...a }, i2 ? i2(b, d3) : b);
}, "LoginPage");
var Ts = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: n, renderContent: s, formProps: a, title: i2 = void 0, hideForm: c }) => {
  let d3 = Z(), u = tt(), { Link: p3 } = re(), l2 = d3 === "legacy" ? p3 : u, [y2, f2] = (0, import_react70.useState)(""), [T2, U] = (0, import_react70.useState)(""), D = H(), g2 = J(), { mutate: R2, isLoading: w } = zr({ v3LegacyAuthProviderCompatible: !!(g2 != null && g2.isLegacy) }), I2 = o((m2, v2) => import_react70.default.createElement(l2, { to: m2 }, v2), "renderLink"), P2 = o(() => e ? e.map((m2) => import_react70.default.createElement("div", { key: m2.name, style: { display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "1rem" } }, import_react70.default.createElement("button", { onClick: () => R2({ providerName: m2.name }), style: { display: "flex", alignItems: "center" } }, m2 == null ? void 0 : m2.icon, m2.label ?? import_react70.default.createElement("label", null, m2.label)))) : null, "renderProviders"), x2 = import_react70.default.createElement("div", { ...n }, import_react70.default.createElement("h1", { style: { textAlign: "center" } }, D("pages.register.title", "Sign up for your account")), P2(), !c && import_react70.default.createElement(import_react70.default.Fragment, null, import_react70.default.createElement("hr", null), import_react70.default.createElement("form", { onSubmit: (m2) => {
    m2.preventDefault(), R2({ email: y2, password: T2 });
  }, ...a }, import_react70.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react70.default.createElement("label", { htmlFor: "email-input" }, D("pages.register.fields.email", "Email")), import_react70.default.createElement("input", { id: "email-input", name: "email", type: "email", size: 20, autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: y2, onChange: (m2) => f2(m2.target.value) }), import_react70.default.createElement("label", { htmlFor: "password-input" }, D("pages.register.fields.password", "Password")), import_react70.default.createElement("input", { id: "password-input", name: "password", type: "password", required: true, size: 20, value: T2, onChange: (m2) => U(m2.target.value) }), import_react70.default.createElement("input", { type: "submit", value: D("pages.register.buttons.submit", "Sign up"), disabled: w }), t ?? import_react70.default.createElement(import_react70.default.Fragment, null, import_react70.default.createElement("span", null, D("pages.login.buttons.haveAccount", "Have an account?"), " ", I2("/login", D("pages.login.signin", "Sign in"))))))), t !== false && c && import_react70.default.createElement("div", { style: { textAlign: "center" } }, D("pages.login.buttons.haveAccount", "Have an account?"), " ", I2("/login", D("pages.login.signin", "Sign in"))));
  return import_react70.default.createElement("div", { ...r }, s ? s(x2, i2) : x2);
}, "RegisterPage");
var xs = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: n, formProps: s, title: a = void 0 }) => {
  let i2 = H(), c = Z(), d3 = tt(), { Link: u } = re(), p3 = c === "legacy" ? u : d3, [l2, y2] = (0, import_react71.useState)(""), { mutate: f2, isLoading: T2 } = jr(), U = o((g2, R2) => import_react71.default.createElement(p3, { to: g2 }, R2), "renderLink"), D = import_react71.default.createElement("div", { ...r }, import_react71.default.createElement("h1", { style: { textAlign: "center" } }, i2("pages.forgotPassword.title", "Forgot your password?")), import_react71.default.createElement("hr", null), import_react71.default.createElement("form", { onSubmit: (g2) => {
    g2.preventDefault(), f2({ email: l2 });
  }, ...s }, import_react71.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react71.default.createElement("label", { htmlFor: "email-input" }, i2("pages.forgotPassword.fields.email", "Email")), import_react71.default.createElement("input", { id: "email-input", name: "email", type: "mail", autoCorrect: "off", spellCheck: false, autoCapitalize: "off", required: true, value: l2, onChange: (g2) => y2(g2.target.value) }), import_react71.default.createElement("input", { type: "submit", disabled: T2, value: i2("pages.forgotPassword.buttons.submit", "Send reset instructions") }), import_react71.default.createElement("br", null), e ?? import_react71.default.createElement("span", null, i2("pages.register.buttons.haveAccount", "Have an account? "), " ", U("/login", i2("pages.login.signin", "Sign in"))))));
  return import_react71.default.createElement("div", { ...t }, n ? n(D, a) : D);
}, "ForgotPasswordPage");
var Rs = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: n, title: s = void 0 }) => {
  let a = H(), i2 = J(), { mutate: c, isLoading: d3 } = Zr({ v3LegacyAuthProviderCompatible: !!(i2 != null && i2.isLegacy) }), [u, p3] = (0, import_react72.useState)(""), [l2, y2] = (0, import_react72.useState)(""), f2 = import_react72.default.createElement("div", { ...t }, import_react72.default.createElement("h1", { style: { textAlign: "center" } }, a("pages.updatePassword.title", "Update Password")), import_react72.default.createElement("hr", null), import_react72.default.createElement("form", { onSubmit: (T2) => {
    T2.preventDefault(), c({ password: u, confirmPassword: l2 });
  }, ...n }, import_react72.default.createElement("div", { style: { display: "flex", flexDirection: "column", padding: 25 } }, import_react72.default.createElement("label", { htmlFor: "password-input" }, a("pages.updatePassword.fields.password", "New Password")), import_react72.default.createElement("input", { id: "password-input", name: "password", type: "password", required: true, size: 20, value: u, onChange: (T2) => p3(T2.target.value) }), import_react72.default.createElement("label", { htmlFor: "confirm-password-input" }, a("pages.updatePassword.fields.confirmPassword", "Confirm New Password")), import_react72.default.createElement("input", { id: "confirm-password-input", name: "confirmPassword", type: "password", required: true, size: 20, value: l2, onChange: (T2) => y2(T2.target.value) }), import_react72.default.createElement("input", { type: "submit", disabled: d3, value: a("pages.updatePassword.buttons.submit", "Update") }))));
  return import_react72.default.createElement("div", { ...e }, r ? r(f2, s) : f2);
}, "UpdatePasswordPage");
var Iu = o((e) => {
  let { type: t } = e;
  return import_react68.default.createElement(import_react68.default.Fragment, null, o(() => {
    switch (t) {
      case "register":
        return import_react68.default.createElement(Ts, { ...e });
      case "forgotPassword":
        return import_react68.default.createElement(xs, { ...e });
      case "updatePassword":
        return import_react68.default.createElement(Rs, { ...e });
      default:
        return import_react68.default.createElement(ys, { ...e });
    }
  }, "renderView")());
}, "AuthPage");
var mo = o(() => import_react73.default.createElement(import_react73.default.Fragment, null, import_react73.default.createElement("h1", null, "Welcome on board"), import_react73.default.createElement("p", null, "Your configuration is completed."), import_react73.default.createElement("p", null, "Now you can get started by adding your resources to the", " ", import_react73.default.createElement("code", null, "`resources`"), " property of ", import_react73.default.createElement("code", null, "`<Refine>`")), import_react73.default.createElement("div", { style: { display: "flex", gap: 8 } }, import_react73.default.createElement("a", { href: "https://refine.dev", target: "_blank", rel: "noreferrer" }, import_react73.default.createElement("button", null, "Documentation")), import_react73.default.createElement("a", { href: "https://refine.dev/examples", target: "_blank", rel: "noreferrer" }, import_react73.default.createElement("button", null, "Examples")), import_react73.default.createElement("a", { href: "https://discord.gg/refine", target: "_blank", rel: "noreferrer" }, import_react73.default.createElement("button", null, "Community")))), "ReadyPage");
var Fu = [{ title: "Documentation", description: "Learn about the technical details of using Refine in your projects.", link: "https://refine.dev/docs", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg" }, { title: "Tutorial", description: "Learn how to use Refine by building a fully-functioning CRUD app, from scratch to full launch.", link: "https://refine.dev/tutorial", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg" }, { title: "Templates", description: "Explore a range of pre-built templates, perfect everything from admin panels to dashboards and CRMs.", link: "https://refine.dev/templates", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg" }, { title: "Community", description: "Join our Discord community and keep up with the latest news.", link: "https://discord.gg/refine", iconUrl: "https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg" }];
var hs = o(() => {
  let e = nr("(max-width: 1010px)"), t = nr("(max-width: 650px)"), r = o(() => t ? "1, 280px" : e ? "2, 280px" : "4, 1fr", "getGridTemplateColumns"), n = o(() => t ? "32px" : e ? "40px" : "48px", "getHeaderFontSize"), s = o(() => t ? "16px" : e ? "20px" : "24px", "getSubHeaderFontSize");
  return import_react75.default.createElement("div", { style: { position: "fixed", zIndex: 10, inset: 0, overflow: "auto", width: "100dvw", height: "100dvh" } }, import_react75.default.createElement("div", { style: { overflow: "hidden", position: "relative", backgroundSize: "cover", backgroundRepeat: "no-repeat", background: t ? "url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30" : e ? "url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30" : "url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30", minHeight: "100%", minWidth: "100%", fontFamily: "Arial", color: "#FFFFFF" } }, import_react75.default.createElement("div", { style: { zIndex: 2, position: "absolute", width: t ? "400px" : "800px", height: "552px", opacity: "0.5", background: "url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)", backgroundRepeat: "no-repeat", backgroundSize: "contain", top: "0", left: "50%", transform: "translateX(-50%)" } }), import_react75.default.createElement("div", { style: { height: t ? "40px" : "80px" } }), import_react75.default.createElement("div", { style: { display: "flex", justifyContent: "center" } }, import_react75.default.createElement("div", { style: { backgroundRepeat: "no-repeat", backgroundSize: t ? "112px 58px" : "224px 116px", backgroundImage: "url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)", width: t ? 112 : 224, height: t ? 58 : 116 } })), import_react75.default.createElement("div", { style: { height: t ? "120px" : e ? "200px" : "30vh", minHeight: t ? "120px" : "200px" } }), import_react75.default.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "16px", textAlign: "center" } }, import_react75.default.createElement("h1", { style: { fontSize: n(), fontWeight: 700, margin: "0px" } }, "Welcome Aboard!"), import_react75.default.createElement("h4", { style: { fontSize: s(), fontWeight: 400, margin: "0px" } }, "Your configuration is completed.")), import_react75.default.createElement("div", { style: { height: "64px" } }), import_react75.default.createElement("div", { style: { display: "grid", gridTemplateColumns: `repeat(${r()})`, justifyContent: "center", gap: "48px", paddingRight: "16px", paddingLeft: "16px", paddingBottom: "32px", maxWidth: "976px", margin: "auto" } }, Fu.map((a) => import_react75.default.createElement(Au, { key: `welcome-page-${a.title}`, card: a })))));
}, "ConfigSuccessPage");
var Au = o(({ card: e }) => {
  let { title: t, description: r, iconUrl: n, link: s } = e, [a, i2] = (0, import_react75.useState)(false);
  return import_react75.default.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "16px" } }, import_react75.default.createElement("div", { style: { display: "flex", alignItems: "center" } }, import_react75.default.createElement("a", { onPointerEnter: () => i2(true), onPointerLeave: () => i2(false), style: { display: "flex", alignItems: "center", color: "#fff", textDecoration: "none" }, href: s }, import_react75.default.createElement("div", { style: { width: "16px", height: "16px", backgroundPosition: "center", backgroundSize: "contain", backgroundRepeat: "no-repeat", backgroundImage: `url(${n})` } }), import_react75.default.createElement("span", { style: { fontSize: "16px", fontWeight: 700, marginLeft: "13px", marginRight: "14px" } }, t), import_react75.default.createElement("svg", { style: { transition: "transform 0.5s ease-in-out, opacity 0.2s ease-in-out", ...a && { transform: "translateX(4px)", opacity: 1 } }, width: "12", height: "8", fill: "none", opacity: "0.5", xmlns: "http://www.w3.org/2000/svg" }, import_react75.default.createElement("path", { d: "M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z", fill: "#fff" })))), import_react75.default.createElement("span", { style: { fontSize: "12px", opacity: 0.5, lineHeight: "16px" } }, r));
}, "Card");
var Cs = o(() => import_react76.default.createElement("div", { style: { position: "fixed", zIndex: 11, inset: 0, overflow: "auto", width: "100dvw", height: "100dvh" } }, import_react76.default.createElement("div", { style: { width: "100%", height: "100%", display: "flex", justifyContent: "center", alignItems: "center", padding: "24px", background: "#14141FBF", backdropFilter: "blur(3px)" } }, import_react76.default.createElement("div", { style: { maxWidth: "640px", width: "100%", background: "#1D1E30", borderRadius: "16px", border: "1px solid #303450", boxShadow: "0px 0px 120px -24px #000000" } }, import_react76.default.createElement("div", { style: { padding: "16px 20px", borderBottom: "1px solid #303450", display: "flex", alignItems: "center", gap: "8px", position: "relative" } }, import_react76.default.createElement(Qu, { style: { position: "absolute", left: 0, top: 0 } }), import_react76.default.createElement("div", { style: { lineHeight: "24px", fontSize: "16px", color: "#FFFFFF", display: "flex", alignItems: "center", gap: "16px" } }, import_react76.default.createElement(Vu, null), import_react76.default.createElement("span", { style: { fontWeight: 400 } }, "Configuration Error"))), import_react76.default.createElement("div", { style: { padding: "20px", color: "#A3ADC2", lineHeight: "20px", fontSize: "14px", display: "flex", flexDirection: "column", gap: "20px" } }, import_react76.default.createElement("p", { style: { margin: 0, padding: 0, lineHeight: "28px", fontSize: "16px" } }, import_react76.default.createElement("code", { style: { display: "inline-block", background: "#30345080", padding: "0 4px", lineHeight: "24px", fontSize: "16px", borderRadius: "4px", color: "#FFFFFF" } }, "<Refine />"), " ", "is not initialized. Please make sure you have it mounted in your app and placed your components inside it."), import_react76.default.createElement("div", null, import_react76.default.createElement(ku, null)))))), "ConfigErrorPage");
var ku = o(() => import_react76.default.createElement("pre", { style: { display: "block", overflowX: "auto", borderRadius: "8px", fontSize: "14px", lineHeight: "24px", backgroundColor: "#14141F", color: "#E5ECF2", padding: "16px", margin: "0", maxHeight: "400px", overflow: "auto" } }, import_react76.default.createElement("span", { style: { color: "#FF7B72" } }, "import"), " ", "{", " Refine, WelcomePage", " ", "}", " ", import_react76.default.createElement("span", { style: { color: "#FF7B72" } }, "from"), " ", import_react76.default.createElement("span", { style: { color: "#A5D6FF" } }, '"@refinedev/core"'), ";", `
`, `
`, import_react76.default.createElement("span", { style: { color: "#FF7B72" } }, "export"), " ", import_react76.default.createElement("span", { style: { color: "#FF7B72" } }, "default"), " ", import_react76.default.createElement("span", null, import_react76.default.createElement("span", { style: { color: "#FF7B72" } }, "function"), " ", import_react76.default.createElement("span", { style: { color: "#FFA657" } }, "App"), "(", import_react76.default.createElement("span", { style: { color: "rgb(222, 147, 95)" } }), ")", " "), "{", `
`, "  ", import_react76.default.createElement("span", { style: { color: "#FF7B72" } }, "return"), " (", `
`, "    ", import_react76.default.createElement("span", null, import_react76.default.createElement("span", { style: { color: "#79C0FF" } }, "<", import_react76.default.createElement("span", { style: { color: "#79C0FF" } }, "Refine"), `
`, "      ", import_react76.default.createElement("span", { style: { color: "#E5ECF2", opacity: 0.6 } }, "// ", import_react76.default.createElement("span", null, "...")), `
`, "    ", ">"), `
`, "      ", import_react76.default.createElement("span", { style: { opacity: 0.6 } }, "{", "/* ... */", "}"), `
`, "      ", import_react76.default.createElement("span", { style: { color: "#79C0FF" } }, "<", import_react76.default.createElement("span", { style: { color: "#79C0FF" } }, "WelcomePage"), " />"), `
`, "      ", import_react76.default.createElement("span", { style: { opacity: 0.6 } }, "{", "/* ... */", "}"), `
`, "    ", import_react76.default.createElement("span", { style: { color: "#79C0FF" } }, "</", import_react76.default.createElement("span", { style: { color: "#79C0FF" } }, "Refine"), ">")), `
`, "  ", ");", `
`, "}"), "ExampleImplementation");
var Qu = o((e) => import_react76.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 204, height: 56, viewBox: "0 0 204 56", fill: "none", ...e }, import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-a)", d: "M12 0H0v12L12 0Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-b)", d: "M28 0h-8L0 20v8L28 0Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-c)", d: "M36 0h8L0 44v-8L36 0Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-d)", d: "M60 0h-8L0 52v4h4L60 0Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-e)", d: "M68 0h8L20 56h-8L68 0Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-f)", d: "M92 0h-8L28 56h8L92 0Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-g)", d: "M100 0h8L52 56h-8l56-56Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-h)", d: "M124 0h-8L60 56h8l56-56Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-i)", d: "M140 0h-8L76 56h8l56-56Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-j)", d: "M132 0h8L84 56h-8l56-56Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-k)", d: "M156 0h-8L92 56h8l56-56Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-l)", d: "M164 0h8l-56 56h-8l56-56Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-m)", d: "M188 0h-8l-56 56h8l56-56Z" }), import_react76.default.createElement("path", { fill: "url(#welcome-page-error-gradient-n)", d: "M204 0h-8l-56 56h8l56-56Z" }), import_react76.default.createElement("defs", null, import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-a", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-b", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-c", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-d", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-e", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-f", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-g", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-h", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-i", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-j", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-k", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-l", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-m", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })), import_react76.default.createElement("radialGradient", { id: "welcome-page-error-gradient-n", cx: 0, cy: 0, r: 1, gradientTransform: "scale(124)", gradientUnits: "userSpaceOnUse" }, import_react76.default.createElement("stop", { stopColor: "#FF4C4D", stopOpacity: 0.1 }), import_react76.default.createElement("stop", { offset: 1, stopColor: "#FF4C4D", stopOpacity: 0 })))), "ErrorGradient");
var Vu = o((e) => import_react76.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", ...e }, import_react76.default.createElement("path", { fill: "#FF4C4D", fillRule: "evenodd", d: "M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z", clipRule: "evenodd" }), import_react76.default.createElement("path", { fill: "#fff", fillRule: "evenodd", d: "M7 8a1 1 0 1 0 2 0V5a1 1 0 1 0-2 0v3Zm0 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z", clipRule: "evenodd" })), "ErrorIcon");
var Bu = o(() => {
  let { __initialized: e } = se();
  return import_react74.default.createElement(import_react74.default.Fragment, null, import_react74.default.createElement(hs, null), !e && import_react74.default.createElement(Cs, null));
}, "WelcomePage");
var Nu = "4.49.0";
var bs = o(() => {
  var R2;
  let e = Yr(), t = (0, import_react79.useContext)(lt), { liveProvider: r } = (0, import_react79.useContext)(qe), n = (0, import_react79.useContext)(Nt), s = (0, import_react79.useContext)(Vt), { i18nProvider: a } = (0, import_react79.useContext)(ke), i2 = (0, import_react79.useContext)(Bt), c = (0, import_react79.useContext)(je), { resources: d3 } = z(), u = se(), p3 = !!t.create || !!t.get || !!t.update, l2 = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe), y2 = !!n.useHistory || !!n.Link || !!n.Prompt || !!n.useLocation || !!n.useParams, f2 = !!s, T2 = !!(a != null && a.changeLocale) || !!(a != null && a.getLocale) || !!(a != null && a.translate), U = !!i2.close || !!i2.open, D = !!c.can, g2 = (R2 = u == null ? void 0 : u.options) == null ? void 0 : R2.projectId;
  return { providers: { auth: e, auditLog: p3, live: l2, router: y2, data: f2, i18n: T2, notification: U, accessControl: D }, version: Nu, resourceCount: d3.length, projectId: g2 };
}, "useTelemetryData");
var Ku = o((e) => {
  try {
    let t = JSON.stringify(e || {});
    return typeof btoa < "u" ? btoa(t) : Buffer.from(t).toString("base64");
  } catch {
    return;
  }
}, "encode");
var Gu = o((e) => {
  let t = new Image();
  t.src = e;
}, "throughImage");
var Hu = o((e) => {
  fetch(e);
}, "throughFetch");
var $u = o((e) => {
  typeof Image < "u" ? Gu(e) : typeof fetch < "u" && Hu(e);
}, "transport");
var Ds = o(() => {
  let e = bs(), t = import_react78.default.useRef(false);
  return import_react78.default.useEffect(() => {
    if (t.current)
      return;
    let r = Ku(e);
    r && ($u(`https://telemetry.refine.dev/telemetry?payload=${r}`), t.current = true);
  }, []), null;
}, "Telemetry");
var Ls = o((e) => {
  let t = ["go", "parse", "back", "Link"], r = Object.keys(e).filter((s) => !t.includes(s));
  return r.length > 0 ? (console.warn(`Unsupported properties are found in \`routerProvider\` prop. You provided \`${r.join(", ")}\`. Supported properties are \`${t.join(", ")}\`. You may wanted to use \`legacyRouterProvider\` prop instead.`), true) : false;
}, "checkRouterPropMisuse");
var Es = o((e) => {
  let t = import_react80.default.useRef(false);
  import_react80.default.useEffect(() => {
    t.current === false && e && Ls(e) && (t.current = true);
  }, [e]);
}, "useRouterMisuseWarning");
var zu = o(({ legacyAuthProvider: e, authProvider: t, dataProvider: r, legacyRouterProvider: n, routerProvider: s, notificationProvider: a, accessControlProvider: i2, auditLogProvider: c, resources: d3, DashboardPage: u, ReadyPage: p3, LoginPage: l2, catchAll: y2, children: f2, liveProvider: T2, i18nProvider: U, Title: D, Layout: g2, Sider: R2, Header: w, Footer: I2, OffLayoutArea: P2, onLiveEvent: x2, options: m2 }) => {
  let { optionsWithDefaults: v2, disableTelemetryWithDefault: b, reactQueryWithDefaults: C2 } = kr({ options: m2 }), E2 = yr(() => {
    var M;
    return C2.clientConfig instanceof QueryClient ? C2.clientConfig : new QueryClient({ ...C2.clientConfig, defaultOptions: { ...C2.clientConfig.defaultOptions, queries: { refetchOnWindowFocus: false, keepPreviousData: true, ...(M = C2.clientConfig.defaultOptions) == null ? void 0 : M.queries } } });
  }, [C2.clientConfig]);
  C(E2);
  let L = import_react77.default.useMemo(() => typeof a == "function" ? a : () => a, [a])();
  if (Es(s), n && !s && (d3 ?? []).length === 0)
    return p3 ? import_react77.default.createElement(p3, null) : import_react77.default.createElement(mo, null);
  let { RouterComponent: A = import_react77.default.Fragment } = s ? {} : n ?? {};
  return import_react77.default.createElement(QueryClientProvider, { client: E2 }, import_react77.default.createElement(Gn, { ...L }, import_react77.default.createElement(Mo, { ...e ?? {}, isProvided: !!e }, import_react77.default.createElement(Io, { ...t ?? {}, isProvided: !!t }, import_react77.default.createElement(vn, { dataProvider: r }, import_react77.default.createElement(Ln, { liveProvider: T2 }, import_react77.default.createElement(Sn, { value: n && !s ? "legacy" : "new" }, import_react77.default.createElement(An, { router: s }, import_react77.default.createElement(Xn, { ...n }, import_react77.default.createElement(Mn, { resources: d3 ?? [] }, import_react77.default.createElement($n, { i18nProvider: U }, import_react77.default.createElement(Yn, { ...i2 ?? {} }, import_react77.default.createElement(ss, { ...c ?? {} }, import_react77.default.createElement(Nn, null, import_react77.default.createElement($o, { mutationMode: v2.mutationMode, warnWhenUnsavedChanges: v2.warnWhenUnsavedChanges, syncWithLocation: v2.syncWithLocation, Title: D, undoableTimeout: v2.undoableTimeout, catchAll: y2, DashboardPage: u, LoginPage: l2, Layout: g2, Sider: R2, Footer: I2, Header: w, OffLayoutArea: P2, hasDashboard: !!u, liveMode: v2.liveMode, onLiveEvent: x2, options: v2 }, import_react77.default.createElement(jo, null, import_react77.default.createElement(A, null, f2, !b && import_react77.default.createElement(Ds, null), import_react77.default.createElement(fo, null))))))))))))))))));
}, "Refine");
var Kn = o(({ notification: e }) => {
  let t = H(), { notificationDispatch: r } = _e(), { open: n } = we(), [s, a] = (0, import_react81.useState)(), i2 = o(() => {
    if (e.isRunning === true && (e.seconds === 0 && e.doMutation(), e.isSilent || n == null || n({ key: `${e.id}-${e.resource}-notification`, type: "progress", message: t("notifications.undoable", { seconds: Mt(e.seconds) }, `You have ${Mt(e.seconds)} seconds to undo`), cancelMutation: e.cancelMutation, undoableTimeout: Mt(e.seconds) }), e.seconds > 0)) {
      s && clearTimeout(s);
      let c = setTimeout(() => {
        r({ type: "DECREASE_NOTIFICATION_SECOND", payload: { id: e.id, seconds: e.seconds, resource: e.resource } });
      }, 1e3);
      a(c);
    }
  }, "cancelNotification");
  return (0, import_react81.useEffect)(() => {
    i2();
  }, [e]), null;
}, "UndoableQueue");
var Zu = o(({ children: e, Layout: t, Sider: r, Header: n, Title: s, Footer: a, OffLayoutArea: i2 }) => {
  let { Layout: c, Footer: d3, Header: u, Sider: p3, Title: l2, OffLayoutArea: y2 } = se();
  return import_react82.default.createElement(t ?? c, { Sider: r ?? p3, Header: n ?? u, Footer: a ?? d3, Title: s ?? l2, OffLayoutArea: i2 ?? y2 }, e, import_react82.default.createElement(Yu, null));
}, "LayoutWrapper");
var Yu = o(() => {
  let { Prompt: e } = re(), t = H(), { warnWhen: r, setWarnWhen: n } = dt(), s = o((a) => (a.preventDefault(), a.returnValue = t("warnWhenUnsavedChanges", "Are you sure you want to leave? You have unsaved changes."), a.returnValue), "warnWhenListener");
  return (0, import_react82.useEffect)(() => (r && window.addEventListener("beforeunload", s), window.removeEventListener("beforeunload", s)), [r]), import_react82.default.createElement(e, { when: r, message: t("warnWhenUnsavedChanges", "Are you sure you want to leave? You have unsaved changes."), setWarnWhen: n });
}, "UnsavedPrompt");
function Ju({ redirectOnFail: e = true, appendCurrentPathToQuery: t = true, children: r, fallback: n, loading: s }) {
  var P2;
  let a = J(), i2 = Z(), c = !!(a != null && a.isProvided), d3 = !!(a != null && a.isLegacy), u = i2 === "legacy", p3 = ae(), l2 = ge(), { useLocation: y2 } = re(), f2 = y2(), { isFetching: T2, isSuccess: U, data: { authenticated: D, redirectTo: g2 } = {} } = fr({ v3LegacyAuthProviderCompatible: d3 }), R2 = c ? d3 ? U : D : true;
  if (!c)
    return import_react83.default.createElement(import_react83.default.Fragment, null, r ?? null);
  if (T2)
    return import_react83.default.createElement(import_react83.default.Fragment, null, s ?? null);
  if (R2)
    return import_react83.default.createElement(import_react83.default.Fragment, null, r ?? null);
  if (typeof n < "u")
    return import_react83.default.createElement(import_react83.default.Fragment, null, n ?? null);
  let w = d3 ? typeof e == "string" ? e : "/login" : typeof e == "string" ? e : g2, I2 = `${u ? f2 == null ? void 0 : f2.pathname : p3.pathname}`.replace(/(\?.*|#.*)$/, "");
  if (w) {
    if (u) {
      let x2 = t ? `?to=${encodeURIComponent(I2)}` : "";
      return import_react83.default.createElement(ec, { to: `${w}${x2}` });
    }
    return import_react83.default.createElement(qu, { config: { to: w, query: t ? { to: (P2 = p3.params) != null && P2.to ? p3.params.to : l2({ to: I2, options: { keepQuery: true }, type: "path" }) } : void 0, type: "replace" } });
  }
  return null;
}
o(Ju, "Authenticated");
var qu = o(({ config: e }) => {
  let t = ge();
  return import_react83.default.useEffect(() => {
    t(e);
  }, [t, e]), null;
}, "Redirect");
var ec = o(({ to: e }) => {
  let { replace: t } = ce();
  return import_react83.default.useEffect(() => {
    t(e);
  }, [t, e]), null;
}, "RedirectLegacy");
var fo = o(() => {
  let { useLocation: e } = re(), { checkAuth: t } = ue(), r = e();
  return (0, import_react84.useEffect)(() => {
    t == null || t().catch(() => false);
  }, [r == null ? void 0 : r.pathname]), null;
}, "RouteChangeHandler");
var oc = o(({ resource: e, action: t, params: r, fallback: n, onUnauthorized: s, children: a, queryOptions: i2, ...c }) => {
  let { id: d3, resource: u, action: p3 = "" } = Ne({ resource: e, id: r == null ? void 0 : r.id }), l2 = t ?? p3, y2 = r ?? { id: d3, resource: u }, { data: f2 } = gr({ resource: u == null ? void 0 : u.name, action: l2, params: y2, queryOptions: i2 });
  return (0, import_react85.useEffect)(() => {
    s && (f2 == null ? void 0 : f2.can) === false && s({ resource: u == null ? void 0 : u.name, action: l2, reason: f2 == null ? void 0 : f2.reason, params: y2 });
  }, [f2 == null ? void 0 : f2.can]), f2 != null && f2.can ? import_react85.default.isValidElement(a) ? import_react85.default.cloneElement(a, c) : import_react85.default.createElement(import_react85.default.Fragment, null, a) : (f2 == null ? void 0 : f2.can) === false ? import_react85.default.createElement(import_react85.default.Fragment, null, n ?? null) : null;
}, "CanAccess");
var ws = [`
    .bg-top-announcement {
        border-bottom: 1px solid rgba(71, 235, 235, 0.15);
        background: radial-gradient(
                218.19% 111.8% at 0% 0%,
                rgba(71, 235, 235, 0.1) 0%,
                rgba(71, 235, 235, 0.2) 100%
            ),
            #14141f;
    }
    `, `
    .top-announcement-mask {
        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);
        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);
        mask-repeat: repeat;
        -webkit-mask-repeat: repeat;
        background: rgba(71, 235, 235, 0.25);
    }
    `, `
    .banner {
        display: flex;
        @media (max-width: 1000px) {
            display: none;
        }
    }`, `
    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {
        text-decoration: none;
        z-index: 9;
    }
    `, `
    @keyframes top-announcement-glow {
        0% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }
    `];
var sc = "If you find Refine useful, you can contribute to its growth by giving it a star on GitHub";
var ac = o(() => ((0, import_react86.useEffect)(() => {
  let e = document.createElement("style");
  document.head.appendChild(e), ws.forEach((t) => {
    var r;
    return (r = e.sheet) == null ? void 0 : r.insertRule(t, e.sheet.cssRules.length);
  });
}, []), import_react86.default.createElement("div", { className: "banner bg-top-announcement", style: { width: "100%", height: "48px" } }, import_react86.default.createElement("div", { style: { position: "relative", display: "flex", justifyContent: "center", alignItems: "center", paddingLeft: "200px", width: "100%", maxWidth: "100vw", height: "100%", borderBottom: "1px solid #47ebeb26" } }, import_react86.default.createElement("div", { className: "top-announcement-mask", style: { position: "absolute", left: 0, top: 0, width: "100%", height: "100%", borderBottom: "1px solid #47ebeb26" } }, import_react86.default.createElement("div", { style: { position: "relative", width: "960px", height: "100%", display: "flex", justifyContent: "space-between", margin: "0 auto" } }, import_react86.default.createElement("div", { style: { width: "calc(50% - 300px)", height: "100%", position: "relative" } }, import_react86.default.createElement(Dr, { style: { animationDelay: "1.5s", position: "absolute", top: "2px", right: "220px" }, id: "1" }), import_react86.default.createElement(Dr, { style: { animationDelay: "1s", position: "absolute", top: "8px", right: "100px", transform: "rotate(180deg)" }, id: "2" }), import_react86.default.createElement(Is, { style: { position: "absolute", right: "10px" }, id: "3" })), import_react86.default.createElement("div", { style: { width: "calc(50% - 300px)", height: "100%", position: "relative" } }, import_react86.default.createElement(Dr, { style: { animationDelay: "2s", position: "absolute", top: "6px", right: "180px", transform: "rotate(180deg)" }, id: "4" }), import_react86.default.createElement(Dr, { style: { animationDelay: "0.5s", transitionDelay: "1.3s", position: "absolute", top: "2px", right: "40px" }, id: "5" }), import_react86.default.createElement(Is, { style: { position: "absolute", right: "-70px" }, id: "6" })))), import_react86.default.createElement(ic, { text: sc })))), "GitHubBanner");
var ic = o(({ text: e }) => import_react86.default.createElement("a", { className: "gh-link", href: "https://s.refine.dev/github-support", target: "_blank", rel: "noreferrer", style: { position: "absolute", height: "100%", padding: "0 60px", display: "flex", flexWrap: "nowrap", whiteSpace: "nowrap", justifyContent: "center", alignItems: "center", backgroundImage: "linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)" } }, import_react86.default.createElement("div", { style: { color: "#fff", display: "flex", flexDirection: "row", gap: "8px" } }, import_react86.default.createElement("span", { style: { display: "flex", flexDirection: "row", justifyContent: "center", alignItems: "center" } }, "⭐️"), import_react86.default.createElement("span", { className: "text", style: { fontSize: "16px", lineHeight: "24px" } }, e), import_react86.default.createElement("span", { style: { display: "flex", flexDirection: "row", justifyContent: "center", alignItems: "center" } }, "⭐️"))), "Text");
var Dr = o(({ style: e, ...t }) => import_react86.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 80, height: 40, fill: "none", style: { opacity: 1, animation: "top-announcement-glow 1s ease-in-out infinite alternate", ...e } }, import_react86.default.createElement("circle", { cx: 40, r: 40, fill: `url(#${t.id}-a)`, fillOpacity: 0.5 }), import_react86.default.createElement("defs", null, import_react86.default.createElement("radialGradient", { id: `${t.id}-a`, cx: 0, cy: 0, r: 1, gradientTransform: "matrix(0 40 -40 0 40 0)", gradientUnits: "userSpaceOnUse" }, import_react86.default.createElement("stop", { stopColor: "#47EBEB" }), import_react86.default.createElement("stop", { offset: 1, stopColor: "#47EBEB", stopOpacity: 0 })))), "GlowSmall");
var Is = o(({ style: e, ...t }) => import_react86.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: 120, height: 48, fill: "none", ...t, style: { opacity: 1, animation: "top-announcement-glow 1s ease-in-out infinite alternate", ...e } }, import_react86.default.createElement("circle", { cx: 60, cy: 24, r: 60, fill: `url(#${t.id}-a)`, fillOpacity: 0.5 }), import_react86.default.createElement("defs", null, import_react86.default.createElement("radialGradient", { id: `${t.id}-a`, cx: 0, cy: 0, r: 1, gradientTransform: "matrix(0 60 -60 0 60 24)", gradientUnits: "userSpaceOnUse" }, import_react86.default.createElement("stop", { stopColor: "#47EBEB" }), import_react86.default.createElement("stop", { offset: 1, stopColor: "#47EBEB", stopOpacity: 0 })))), "GlowBig");
var uc = o(({ status: e, elements: { success: t = import_react87.default.createElement(Lr, { key: "autoSave.success", defaultMessage: "saved" }), error: r = import_react87.default.createElement(Lr, { key: "autoSave.error", defaultMessage: "auto save failure" }), loading: n = import_react87.default.createElement(Lr, { key: "autoSave.loading", defaultMessage: "saving..." }), idle: s = import_react87.default.createElement(Lr, { key: "autoSave.idle", defaultMessage: "waiting for changes" }) } = {} }) => {
  switch (e) {
    case "success":
      return import_react87.default.createElement(import_react87.default.Fragment, null, t);
    case "error":
      return import_react87.default.createElement(import_react87.default.Fragment, null, r);
    case "loading":
      return import_react87.default.createElement(import_react87.default.Fragment, null, n);
    default:
      return import_react87.default.createElement(import_react87.default.Fragment, null, s);
  }
}, "AutoSaveIndicator");
var Lr = o(({ key: e, defaultMessage: t }) => {
  let r = H();
  return import_react87.default.createElement("span", null, r(e, t));
}, "Message");

export {
  require_shim,
  require_lib,
  Ht,
  $t,
  Fo,
  Tt,
  We,
  F,
  Ao,
  No,
  qt,
  Ko,
  j,
  tr,
  rr,
  or,
  J,
  zo,
  Ae,
  dt,
  Br,
  Ys,
  se,
  nt,
  ar,
  Yo,
  ur,
  ra,
  cr,
  Pt,
  dr,
  pr,
  lr,
  oa,
  na,
  sa,
  O2 as O,
  aa,
  Hr,
  mr,
  Ft,
  zr,
  jr,
  Zr,
  fr,
  Ta,
  de,
  xa,
  Yr,
  ee,
  At,
  kt,
  Jr,
  qr,
  Qt,
  eo,
  to,
  Na,
  $a,
  Wa,
  _a,
  Za,
  ne,
  ti,
  Ce,
  at,
  Z,
  ro,
  ae,
  z,
  kn,
  st,
  Vn,
  IP,
  Ve,
  _e,
  we,
  pe,
  ke,
  so,
  H,
  ao,
  DR,
  BR,
  OR,
  zn,
  io,
  pt,
  ge,
  ce,
  Mh,
  Vh,
  Gh,
  ou,
  tt,
  re,
  je,
  gr,
  SC,
  OC,
  sb,
  Be,
  Fb,
  _b,
  hu,
  q,
  ht,
  Ne,
  vu,
  Lu,
  LD,
  UD,
  ED,
  MD,
  wD,
  ID,
  SD,
  FD,
  Mu,
  Ar,
  Iu,
  mo,
  Bu,
  zu,
  Kn,
  Zu,
  Ju,
  fo,
  oc,
  ac,
  uc
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

papaparse/papaparse.min.js:
  (* @license
  Papa Parse
  v5.4.1
  https://github.com/mholt/PapaParse
  License: MIT
  *)
*/
//# sourceMappingURL=chunk-MOWYNYXL.js.map
