var P=Object.create;var R=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,G=Object.prototype.hasOwnProperty;var j=(i,e)=>{for(var n in e)R(i,n,{get:e[n],enumerable:!0})},Q=(i,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of T(e))!G.call(i,t)&&t!==n&&R(i,t,{get:()=>e[t],enumerable:!(r=A(e,t))||r.enumerable});return i};var C=(i,e,n)=>(n=i!=null?P(U(i)):{},Q(e||!i||!i.__esModule?R(n,"default",{value:i,enumerable:!0}):n,i)),z=i=>Q(R({},"__esModule",{value:!0}),i);var re={};j(re,{GraphQLClient:()=>g.GraphQLClient,batchRequests:()=>g.batchRequests,default:()=>ee,gql:()=>g.gql,graphqlWS:()=>ie,liveProvider:()=>m,qqlQueryBuilder:()=>te,rawRequest:()=>g.rawRequest,request:()=>g.request,resolveRequestDocument:()=>g.resolveRequestDocument});module.exports=z(re);var c=C(require("camelcase")),v=C(require("gql-query-builder")),D=require("graphql-request"),O=C(require("graphql-tag")),q=require("pluralize");var b=C(require("camelcase")),F=C(require("gql-query-builder")),M=C(require("lodash/set")),$=require("pluralize");var S=require("graphql"),W=i=>{var e,n;return(n=(e=i==null?void 0:i.selectionSet)==null?void 0:e.selections)==null?void 0:n.find(r=>r.kind==="Field"&&r.name.value==="nodes")},h=i=>{let e=[],n=!0,r=0,t=!1;return(0,S.visit)(i,{Field:{enter(s){if(n){n=!1;let o=W(s)??s;if(typeof o.selectionSet>"u")throw new Error("Operation must have a selection set");return o.selectionSet}e.push(`${r>0?"  ".repeat(t?r:r-1):""}${s.name.value}${s.selectionSet?" {":""}`),s.selectionSet&&(r++,t=!0)},leave(s){s.selectionSet&&(r--,e.push(`${"  ".repeat(r)}}`),t=!1)}}}),e.join(`
`).trim()},x=i=>{let e=!1;return(0,S.visit)(i,{OperationDefinition:{enter(n){n.operation==="mutation"&&(e=!0)}}}),e};var N=(i,{callback:e,params:n,meta:r},t)=>{let s={created:K,updated:X,deleted:Y},{resource:u,filters:o,subscriptionType:a,id:l,ids:p}=n??{},d=s[t],{operation:f,query:y,variables:L,operationName:k}=d({ids:p,id:l,resource:u,filters:o,meta:r,subscriptionType:a}),E=I=>{e(I.data[f])};return i.subscribe({query:y,variables:L,operationName:k},{next:E,error:console.error,complete:()=>null})},H={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},J=(i,e)=>{if(i==="contains")return{iLike:`%${e}%`};if(i==="ncontains")return{notILike:`%${e}%`};if(i==="containss")return{like:`%${e}%`};if(i==="ncontainss")return{notLike:`%${e}%`};if(i==="startswith")return{iLike:`${e}%`};if(i==="nstartswith")return{notILike:`${e}%`};if(i==="startswiths")return{like:`${e}%`};if(i==="nstartswiths")return{notLike:`${e}%`};if(i==="endswith")return{iLike:`%${e}`};if(i==="nendswith")return{notILike:`%${e}`};if(i==="endswiths")return{like:`%${e}`};if(i==="nendswiths")return{notLike:`%${e}`};if(i==="null")return{is:null};if(i==="nnull")return{isNot:null};if(i==="between"){if(!Array.isArray(e))throw new Error("Between operator requires an array");return e.length!==2?{}:{between:{lower:e[0],upper:e[1]}}}if(i==="nbetween"){if(!Array.isArray(e))throw new Error("NBetween operator requires an array");return e.length!==2?{}:{notBetween:{lower:e[0],upper:e[1]}}}return{[H[i]]:e}},w=i=>{let e={};return i.filter(n=>Array.isArray(n.value)&&n.value.length===0?!1:typeof n.value=="number"?Number.isFinite(n.value):n.value!=null).map(n=>n.operator==="and"||n.operator==="or"?(0,M.default)(e,n.operator,[w(n.value)]):"field"in n?(0,M.default)(e,n.field,J(n.operator,n.value)):{}),e},B=i=>i.map(e=>({field:e.field,direction:e.order.toUpperCase()})),_=i=>{if(i.mode==="off")return{limit:2147483647};if(i.mode==="server"&&!(!i.current||!i.pageSize))return{limit:i.pageSize,offset:(i.current-1)*i.pageSize}},K=({resource:i,filters:e,meta:n})=>{let r=(n==null?void 0:n.gqlQuery)??(n==null?void 0:n.gqlMutation);if(r){let a=(0,b.default)((0,$.singular)(i),{pascalCase:!0}),l=`Created${a}`,p=`created${a}`,d=`
            subscription ${l}($input: Create${a}SubscriptionFilterInput) {
                ${p}(input: $input) {
                    ${h(r)}
                }
            }
        `,f={};return e&&(f.input={filter:w(e.filter(y=>!y.field.includes(".")))}),{query:d,variables:f,operation:p,operationName:l}}let t=`created${(0,b.default)((0,$.singular)(i),{pascalCase:!0})}`,s={};e&&(s.input={type:(0,b.default)(`create_${(0,$.singular)(i)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:w(e.filter(a=>!a.field.includes(".")))}});let{query:u,variables:o}=F.subscription({operation:t,fields:n.fields,variables:s});return{query:u,variables:o,operation:t}},X=({id:i,resource:e,filters:n,meta:r})=>{let t=(r==null?void 0:r.gqlQuery)??(r==null?void 0:r.gqlMutation);if(t){let l=(0,b.default)((0,$.singular)(e),{pascalCase:!0}),p=`Updated${l}`,d=`updatedOne${l}`,f=`
            subscription ${p}($input: UpdateOne${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                   ${h(t)}
                }
            }
        `,y={};return n&&(y.input={filter:w(n.filter(L=>!L.field.includes(".")))}),i&&(y.input={filter:{id:{eq:i}}}),{query:f,variables:y,operation:d,operationName:p}}let s=`updatedOne${(0,b.default)((0,$.singular)(e),{pascalCase:!0})}`,u={};n&&(u.input={type:(0,b.default)(`update_one_${(0,$.singular)(e)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:w(n.filter(l=>!l.field.includes(".")))}}),i&&(u.input={type:(0,b.default)(`update_one_${(0,$.singular)(e)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:{id:{eq:i}}}});let{query:o,variables:a}=F.subscription({operation:s,fields:r.fields,variables:u});return{query:o,variables:a,operation:s}},Y=({resource:i,filters:e,meta:n})=>{if(n!=null&&n.gqlQuery){let o=(0,b.default)((0,$.singular)(i),{pascalCase:!0}),a=`Deleted${o}`,l=`deletedOne${o}`,p=`
            subscription ${a}($input: DeleteOne${o}SubscriptionFilterInput) {
                ${l}(input: $input) {
                    id
                }
            }
        `,d={};return e&&(d.input={filter:w(e.filter(f=>!f.field.includes(".")))}),{query:p,variables:d,operation:l,operationName:a}}let r=`deletedOne${(0,b.default)((0,$.singular)(i),{pascalCase:!0})}`,t={};e&&(t.input={type:(0,b.default)(`delete_one_${(0,$.singular)(i)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:w(e.filter(o=>!o.field.includes(".")))}});let{query:s,variables:u}=F.subscription({operation:r,fields:n.fields.filter(o=>typeof o!="object"),variables:t});return{query:s,variables:u,operation:r}};var Z=i=>({getList:async({resource:e,pagination:n,sorters:r,filters:t,meta:s})=>{let u=(0,c.default)(e),o=_(n||{}),a={},l,p;if(s!=null&&s.gqlQuery)l=s==null?void 0:s.gqlQuery,p={filter:t?w(t):{},sorting:r?B(r):[],paging:o};else{t&&(a.filter={type:(0,c.default)(`${(0,q.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:w(t)}),r&&(a.sorting={type:(0,c.default)(`${(0,q.singular)(e)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:B(r)}),o&&(a.paging={type:"OffsetPaging",required:!0,value:o});let f=v.query({operation:u,fields:[{nodes:s==null?void 0:s.fields},"totalCount"],variables:a});l=f.query,p=f.variables}let d=await i.request(l,p);return{data:d[u].nodes,total:d[u].totalCount}},getMany:async({resource:e,ids:n,meta:r})=>{let t=(0,c.default)(e);if(r!=null&&r.gqlQuery)return{data:(await i.request(r.gqlQuery,{filter:{id:{in:n}}}))[t].nodes};let{query:s,variables:u}=v.query({operation:t,fields:[{nodes:(r==null?void 0:r.fields)||["id"]}],variables:{filter:{type:(0,c.default)(`${(0,q.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});return{data:(await i.request(s,u))[t].nodes}},create:async({resource:e,variables:n,meta:r})=>{let t=`createOne${(0,c.default)((0,q.singular)(e),{pascalCase:!0})}`,s=(r==null?void 0:r.gqlMutation)??(r==null?void 0:r.gqlQuery);if(s)return{data:(await i.request(s,{input:{[(0,c.default)((0,q.singular)(e))]:n}}))[t]};let{query:u,variables:o}=v.mutation({operation:t,fields:(r==null?void 0:r.fields)||["id"],variables:{input:{type:`CreateOne${(0,c.default)((0,q.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{[(0,c.default)((0,q.singular)(e))]:n}}}});return{data:(await i.request(u,o))[t]}},createMany:async({resource:e,variables:n,meta:r})=>{let s=`createMany${(0,c.default)(e,{pascalCase:!0})}`,u=(r==null?void 0:r.gqlMutation)??(r==null?void 0:r.gqlQuery);if(u)return{data:(await i.request(u,{input:{[(0,c.default)(e)]:n}}))[s]};let{query:o,variables:a}=v.mutation({operation:s,fields:(r==null?void 0:r.fields)||["id"],variables:{input:{type:`CreateMany${(0,c.default)(e,{pascalCase:!0})}Input`,required:!0,value:{[(0,c.default)(e)]:n}}}});return{data:(await i.request(o,a))[s]}},update:async({resource:e,id:n,variables:r,meta:t})=>{let s=`updateOne${(0,c.default)((0,q.singular)(e),{pascalCase:!0})}`,u=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(u)return{data:(await i.request(u,{input:{id:n,update:r}}))[s]};let{query:o,variables:a}=v.mutation({operation:s,fields:(t==null?void 0:t.fields)||["id"],variables:{input:{type:`UpdateOne${(0,c.default)((0,q.singular)(e),{pascalCase:!0})}Input`,required:!0,value:{id:n,update:r}}}});return{data:(await i.request(o,a))[s]}},updateMany:async({resource:e,ids:n,variables:r,meta:t})=>{let s=(0,c.default)(e,{pascalCase:!0}),u=`updateMany${s}`,o=O.default`
                mutation UpdateMany${s}($input: UpdateMany${s}Input!) {
                    ${u}(input: $input) {
                        updatedCount
                    }
                }
            `;await i.request(o,{input:{filter:{id:{in:n}},update:r}});let a=(0,c.default)(e),l,p;if(t!=null&&t.fields){let f=v.query({operation:a,fields:[{nodes:(t==null?void 0:t.fields)||["id"]}],variables:{filter:{type:(0,c.default)(`${(0,q.singular)(e)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});l=f.query,p=f.variables}else l=O.default`
                    query GetMany${s}($filter: ${(0,q.singular)(s)}Filter!) {
                        ${a}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `,p={filter:{id:{in:n}}};return{data:(await i.request(l,p))[a].nodes}},getOne:async({resource:e,id:n,meta:r})=>{let t=(0,c.default)((0,q.singular)(e)),s=(r==null?void 0:r.gqlQuery)??(r==null?void 0:r.gqlMutation);if(s){let l=s,p={id:n};if(x(s)){let f=h(s);l=O.default`
                        query Get${(0,c.default)((0,q.singular)(e),{pascalCase:!0})}($id: ID!) {
                            ${t}(id: $id) {
                            ${f}
                            }
                        }
                    `}return{data:(await i.request(l,p))[t]}}let{query:u,variables:o}=v.query({operation:t,fields:(r==null?void 0:r.fields)||["id"],variables:{id:{type:"ID",required:!0,value:n}}});return{data:(await i.request(u,o))[t]}},deleteOne:async({resource:e,id:n,meta:r})=>{let t=(0,c.default)((0,q.singular)(e),{pascalCase:!0}),s=`deleteOne${t}`;if(r!=null&&r.gqlMutation)return{data:(await i.request(r.gqlMutation,{input:{id:n}}))[s]};let u=O.default`
                    mutation DeleteOne${t}($input: DeleteOne${t}Input!) {
                        ${s}(input: $input) {
                            id
                        }
                    }
                `;return{data:(await i.request(u,{input:{id:n}}))[s]}},deleteMany:async({resource:e,ids:n})=>{let r=(0,c.default)(e,{pascalCase:!0}),t=`deleteMany${r}`,s=O.default`
                mutation DeleteMany${r}($input: DeleteMany${r}Input!) {
                    ${t}(input: $input) {
                        deletedCount
                    }
                }
            `,u={input:{filter:{id:{in:n}}}};return await i.request(s,u),{data:[]}},getApiUrl:()=>i.url,custom:async({url:e,method:n,headers:r,meta:t})=>{let s=["get","post"],u=e||i.url;if(!s.some(p=>p===n))throw Error(`GraphQL does not support ${n} method.`);let o=n,a=new D.GraphQLClient(u,{...i.requestConfig,method:o,headers:{...i.requestConfig.headers,...r}}),l=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(l)return{data:await a.request({document:l,variables:t==null?void 0:t.variables})};if(t!=null&&t.rawQuery)return{data:await a.request({document:t.rawQuery,variables:t.variables})};if(t){if(t.operation){let p,d;if(n==="get"){let y=v.query({operation:t.operation,fields:t.fields,variables:t.variables});p=y.query,d=y.variables}else{let y=v.mutation({operation:t.operation,fields:t.fields,variables:t.variables});p=y.query,d=y.variables}return{data:(await a.request({document:p,variables:d}))[t.operation]}}throw Error("GraphQL operation name required.")}throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),V=Z;var m=i=>{let e=(n,r,t,s,u,o,a)=>{let l=N(n,{callback:r,params:t,meta:s},u);a.push(l)};return{subscribe({callback:n,params:r,meta:t}){let{resource:s,subscriptionType:u}=r??{};if(!t||!u||!s)throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");let o=[];return(r==null?void 0:r.subscriptionType)==="useList"&&["created","updated","deleted"].forEach(l=>e(i,n,r,t,l,s,o)),(r==null?void 0:r.subscriptionType)==="useOne"&&e(i,n,r,t,"updated",s,o),()=>{o.forEach(l=>l())}},unsubscribe(n){n()}}};var te=C(require("gql-query-builder")),g=require("graphql-request"),ie=C(require("graphql-ws")),ee=V;
//# sourceMappingURL=index.cjs.map